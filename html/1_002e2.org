* 1.2 Procedures and the Processes They Generate
** Pre
We have now considered the elements of programming: We have used primitive arithmetic operations, we have combined these operations, and we have abstracted these composite operations by defining them as compound procedures. But that is not enough to enable us to say that we know how to program. Our situation is analogous to that of someone who has learned the rules for how the pieces move in chess but knows nothing of typical openings, tactics, or strategy. Like the novice chess player, we don't yet know the common patterns of usage in the domain. We lack the knowledge of which moves are worth making (which procedures are worth defining). We lack the experience to predict the consequences of making a move (executing a procedure).

The ability to visualize the consequences of the actions under consideration is crucial to becoming an expert programmer, just as it is in any synthetic, creative activity. In becoming an expert photographer, for example, one must learn how to look at a scene and know how dark each region will appear on a print for each possible choice of exposure and development conditions. Only then can one reason backward, planning framing, lighting, exposure, and development to obtain the desired effects. So it is with programming, where we are planning the course of action to be taken by a process and where we control the process by means of a program. To become experts, we must learn to visualize the processes generated by various types of procedures. Only after we have developed such a skill can we learn to reliably construct programs that exhibit the desired behavior.

A procedure is a pattern for the  /local evolution/ of a computational process. It specifies how each stage of the process is built upon the previous stage. We would like to be able to make statements about the overall, or  /global/, behavior of a process whose local evolution has been specified by a procedure. This is very difficult to do in general, but we can at least try to describe some typical patterns of process evolution.

In this section we will examine some common “shapes” for processes generated by simple procedures. We will also investigate the rates at which these processes consume the important computational resources of time and space. The procedures we will consider are very simple. Their role is like that played by test patterns in photography: as oversimplified prototypical patterns, rather than practical examples in their own right.

** 1.2.1 Linear Recursion and Iteration


We begin by considering the factorial function, defined by [[file:fig/math/d9a7ed457c5fc2db3708937f13e789da.svg]] There are many ways to compute factorials. One way is to make use of the observation that [[file:fig/math/5fa3dbabdc4f880a425fd3b033864691.svg]] is equal to [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] times [[file:fig/math/44fe5301c8e9c277481b220163a36838.svg]] for any positive integer [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]]: [[file:fig/math/84b2ed4ef8a69a37b4ae01ceb320dc1c.svg]] Thus, we can compute [[file:fig/math/5fa3dbabdc4f880a425fd3b033864691.svg]] by computing [[file:fig/math/44fe5301c8e9c277481b220163a36838.svg]] and multiplying the result by [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]]. If we add the stipulation that 1! is equal to 1, this observation translates directly into a procedure:

#+BEGIN_SRC lisp
    (define (factorial n)
      (if (= n 1)
          1
          (* n (factorial (- n 1)))))
#+END_SRC

We can use the substitution model of [[1.1.5]] to watch this procedure in action computing 6!, as shown in [[Figure 1.3]].

#+CAPTION: *Figure 1.3:* A linear recursive process for computing 6!.
[[file:fig/chap1/Fig1.3d.std.svg]]

Now let's take a different perspective on computing factorials. We could describe a rule for computing [[file:fig/math/5fa3dbabdc4f880a425fd3b033864691.svg]] by specifying that we first multiply 1 by 2, then multiply the result by 3, then by 4, and so on until we reach [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]]. More formally, we maintain a running product, together with a counter that counts from 1 up to [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]]. We can describe the computation by saying that the counter and the product simultaneously change from one step to the next according to the rule

#+BEGIN_EXAMPLE
    product  counter * product
    counter  counter + 1
#+END_EXAMPLE

and stipulating that [[file:fig/math/5fa3dbabdc4f880a425fd3b033864691.svg]] is the value of the product when the counter exceeds [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]].

Once again, we can recast our description as a procedure for computing factorials:[fn:1-29]

#+BEGIN_SRC lisp
    (define (factorial n)
      (fact-iter 1 1 n))

    (define (fact-iter product counter max-count)
      (if (> counter max-count)
          product
          (fact-iter (* counter product)
                     (+ counter 1)
                     max-count)))
#+END_SRC

As before, we can use the substitution model to visualize the process of computing 6!, as shown in [[Figure 1.4]].

#+CAPTION: *Figure 1.4:* A linear iterative process for computing 6!.
[[file:fig/chap1/Fig1.4d.std.svg]]

Compare the two processes. From one point of view, they seem hardly different at all. Both compute the same mathematical function on the same domain, and each requires a number of steps proportional to [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] to compute [[file:fig/math/5fa3dbabdc4f880a425fd3b033864691.svg]]. Indeed, both processes even carry out the same sequence of multiplications, obtaining the same sequence of partial products. On the other hand, when we consider the “shapes” of the two processes, we find that they evolve quite differently.

Consider the first process. The substitution model reveals a shape of expansion followed by contraction, indicated by the arrow in [[Figure 1.3]]. The expansion occurs as the process builds up a chain of  /deferred operations/ (in this case, a chain of multiplications). The contraction occurs as the operations are actually performed. This type of process, characterized by a chain of deferred operations, is called a  /recursive process/. Carrying out this process requires that the interpreter keep track of the operations to be performed later on. In the computation of [[file:fig/math/5fa3dbabdc4f880a425fd3b033864691.svg]], the length of the chain of deferred multiplications, and hence the amount of information needed to keep track of it, grows linearly with [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] (is proportional to [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]]), just like the number of steps. Such a process is called a  /linear recursive process/.

By contrast, the second process does not grow and shrink. At each step, all we need to keep track of, for any [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]], are the current values of the variables =product=, =counter=, and =max-count=. We call this an  /iterative process/. In general, an iterative process is one whose state can be summarized by a fixed number of  /state variables/, together with a fixed rule that describes how the state variables should be updated as the process moves from state to state and an (optional) end test that specifies conditions under which the process should terminate. In computing [[file:fig/math/5fa3dbabdc4f880a425fd3b033864691.svg]], the number of steps required grows linearly with [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]]. Such a process is called a  /linear iterative process/.

The contrast between the two processes can be seen in another way. In the iterative case, the program variables provide a complete description of the state of the process at any point. If we stopped the computation between steps, all we would need to do to resume the computation is to supply the interpreter with the values of the three program variables. Not so with the recursive process. In this case there is some additional “hidden” information, maintained by the interpreter and not contained in the program variables, which indicates “where the process is” in negotiating the chain of deferred operations. The longer the chain, the more information must be maintained.[fn:1-30]

In contrasting iteration and recursion, we must be careful not to confuse the notion of a recursive  /process/ with the notion of a recursive  /procedure/. When we describe a procedure as recursive, we are referring to the syntactic fact that the procedure definition refers (either directly or indirectly) to the procedure itself. But when we describe a process as following a pattern that is, say, linearly recursive, we are speaking about how the process evolves, not about the syntax of how a procedure is written. It may seem disturbing that we refer to a recursive procedure such as =fact-iter= as generating an iterative process. However, the process really is iterative: Its state is captured completely by its three state variables, and an interpreter need keep track of only three variables in order to execute the process.

One reason that the distinction between process and procedure may be confusing is that most implementations of common languages (including Ada, Pascal, and C) are designed in such a way that the interpretation of any recursive procedure consumes an amount of memory that grows with the number of procedure calls, even when the process described is, in principle, iterative. As a consequence, these languages can describe iterative processes only by resorting to special-purpose “looping constructs” such as =do=, =repeat=, =until=, =for=, and =while=. The implementation of Scheme we shall consider in [[Chapter 5]] does not share this defect. It will execute an iterative process in constant space, even if the iterative process is described by a recursive procedure. An implementation with this property is called  /tail-recursive/. With a tail-recursive implementation, iteration can be expressed using the ordinary procedure call mechanism, so that special iteration constructs are useful only as syntactic sugar.[fn:1-31]

#+BEGIN_QUOTE
  *Exercise 1.9:* Each of the following two procedures defines a method for adding two positive integers in terms of the procedures =inc=, which increments its argument by 1, and =dec=, which decrements its argument by 1.

  #+BEGIN_SRC lisp
      (define (+ a b)
        (if (= a 0)
            b
            (inc (+ (dec a) b))))

      (define (+ a b)
        (if (= a 0)
            b
            (+ (dec a) (inc b))))
  #+END_SRC

  Using the substitution model, illustrate the process generated by each procedure in evaluating =(+ 4 5)=. Are these processes iterative or recursive?
#+END_QUOTE

#+BEGIN_QUOTE
  *Exercise 1.10:* The following procedure computes a mathematical function called Ackermann's function.

  #+BEGIN_SRC lisp
      (define (A x y)
        (cond ((= y 0) 0)
              ((= x 0) (* 2 y))
              ((= y 1) 2)
              (else (A (- x 1)
                       (A x (- y 1))))))
  #+END_SRC

  What are the values of the following expressions?

  #+BEGIN_SRC lisp
      (A 1 10)
      (A 2 4)
      (A 3 3)
  #+END_SRC

  Consider the following procedures, where =A= is the procedure defined above:

  #+BEGIN_SRC lisp
      (define (f n) (A 0 n))
      (define (g n) (A 1 n))
      (define (h n) (A 2 n))
      (define (k n) (* 5 n n))
  #+END_SRC

  Give concise mathematical definitions for the functions computed by the procedures =f=, =g=, and =h= for positive integer values of [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]]. For example, =(k n)= computes [[file:fig/math/16a46df6d09d600cea1b52c1f70b1db4.svg]].
#+END_QUOTE

** 1.2.2 Tree Recursion


Another common pattern of computation is called  /tree recursion/. As an example, consider computing the sequence of Fibonacci numbers, in which each number is the sum of the preceding two:

0, 1, 1, 2, 3, 5, 8, 13, 21, ....

In general, the Fibonacci numbers can be defined by the rule [[file:fig/math/8225dec0d676b9c57da03597a3556d31.svg]] We can immediately translate this definition into a recursive procedure for computing Fibonacci numbers:

#+BEGIN_SRC lisp
    (define (fib n)
      (cond ((= n 0) 0)
            ((= n 1) 1)
            (else (+ (fib (- n 1))
                     (fib (- n 2))))))
#+END_SRC

Consider the pattern of this computation. To compute =(fib 5)=, we compute =(fib 4)= and =(fib 3)=. To compute =(fib 4)=, we compute =(fib 3)= and =(fib 2)=. In general, the evolved process looks like a tree, as shown in [[Figure 1.5]]. Notice that the branches split into two at each level (except at the bottom); this reflects the fact that the =fib= procedure calls itself twice each time it is invoked.

#+CAPTION: *Figure 1.5:* The tree-recursive process generated in computing =(fib 5)=.
[[file:fig/chap1/Fig1.5d.std.svg]]

This procedure is instructive as a prototypical tree recursion, but it is a terrible way to compute Fibonacci numbers because it does so much redundant computation. Notice in [[Figure 1.5]] that the entire computation of =(fib 3)=---almost half the work---is duplicated. In fact, it is not hard to show that the number of times the procedure will compute =(fib 1)= or =(fib 0)= (the number of leaves in the above tree, in general) is precisely [[file:fig/math/455054e624823e0531cfd992817c1e2c.svg]]. To get an idea of how bad this is, one can show that the value of [[file:fig/math/606058a44581066eed9cf2309aee7b71.svg]] grows exponentially with [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]]. More precisely (see [[Exercise 1.13]]), [[file:fig/math/606058a44581066eed9cf2309aee7b71.svg]] is the closest integer to [[file:fig/math/dd53f55e0a4674912e8a49cd871c795b.svg]], where [[file:fig/math/196371d8fda930e2dcb771b35db1df9a.svg]] is the  /golden ratio/, which satisfies the equation [[file:fig/math/9726168de251dd7670ebb58eaca40d0d.svg]] Thus, the process uses a number of steps that grows exponentially with the input. On the other hand, the space required grows only linearly with the input, because we need keep track only of which nodes are above us in the tree at any point in the computation. In general, the number of steps required by a tree-recursive process will be proportional to the number of nodes in the tree, while the space required will be proportional to the maximum depth of the tree.

We can also formulate an iterative process for computing the Fibonacci numbers. The idea is to use a pair of integers [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]] and [[file:fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg]], initialized to [[file:fig/math/ba72d1746f7d257fd4f89f24c86a0e61.svg]] and [[file:fig/math/af6821f800a115ac3e33a8b02bb5c544.svg]], and to repeatedly apply the simultaneous transformations

[[file:fig/math/d7bc6551cb534bc2372f5fe135fb8843.svg]]
It is not hard to show that, after applying this transformation [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] times, [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]] and [[file:fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg]] will be equal, respectively, to [[file:fig/math/455054e624823e0531cfd992817c1e2c.svg]] and [[file:fig/math/606058a44581066eed9cf2309aee7b71.svg]]. Thus, we can compute Fibonacci numbers iteratively using the procedure

#+BEGIN_SRC lisp
    (define (fib n)
      (fib-iter 1 0 n))

    (define (fib-iter a b count)
      (if (= count 0)
          b
          (fib-iter (+ a b) a (- count 1))))
#+END_SRC

This second method for computing [[file:fig/math/606058a44581066eed9cf2309aee7b71.svg]] is a linear iteration. The difference in number of steps required by the two methods---one linear in [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]], one growing as fast as [[file:fig/math/606058a44581066eed9cf2309aee7b71.svg]] itself---is enormous, even for small inputs.

One should not conclude from this that tree-recursive processes are useless. When we consider processes that operate on hierarchically structured data rather than numbers, we will find that tree recursion is a natural and powerful tool.[fn:1-32] But even in numerical operations, tree-recursive processes can be useful in helping us to understand and design programs. For instance, although the first =fib= procedure is much less efficient than the second one, it is more straightforward, being little more than a translation into Lisp of the definition of the Fibonacci sequence. To formulate the iterative algorithm required noticing that the computation could be recast as an iteration with three state variables.

*** Example: Counting change


It takes only a bit of cleverness to come up with the iterative Fibonacci algorithm. In contrast, consider the following problem: How many different ways can we make change of $1.00, given half-dollars, quarters, dimes, nickels, and pennies? More generally, can we write a procedure to compute the number of ways to change any given amount of money?

This problem has a simple solution as a recursive procedure. Suppose we think of the types of coins available as arranged in some order. Then the following relation holds:

The number of ways to change amount [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]] using [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] kinds of coins equals

- the number of ways to change amount [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]] using all but the first kind of coin, plus
- the number of ways to change amount [[file:fig/math/300c23f60457a24b1e5ebe2eba416e7d.svg]] using all [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] kinds of coins, where [[file:fig/math/94022487faed4226073f19cc394c11d0.svg]] is the denomination of the first kind of coin.

To see why this is true, observe that the ways to make change can be divided into two groups: those that do not use any of the first kind of coin, and those that do. Therefore, the total number of ways to make change for some amount is equal to the number of ways to make change for the amount without using any of the first kind of coin, plus the number of ways to make change assuming that we do use the first kind of coin. But the latter number is equal to the number of ways to make change for the amount that remains after using a coin of the first kind.

Thus, we can recursively reduce the problem of changing a given amount to the problem of changing smaller amounts using fewer kinds of coins. Consider this reduction rule carefully, and convince yourself that we can use it to describe an algorithm if we specify the following degenerate cases:[fn:1-33]

- If [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]] is exactly 0, we should count that as 1 way to make change.
- If [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]] is less than 0, we should count that as 0 ways to make change.
- If [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] is 0, we should count that as 0 ways to make change.

We can easily translate this description into a recursive procedure:

#+BEGIN_SRC lisp
    (define (count-change amount)
      (cc amount 5))

    (define (cc amount kinds-of-coins)
      (cond ((= amount 0) 1)
            ((or (< amount 0)
                 (= kinds-of-coins 0))
             0)
            (else
             (+ (cc amount (- kinds-of-coins 1))
                (cc (- amount (first-denomination
                               kinds-of-coins))
                    kinds-of-coins)))))

    (define (first-denomination kinds-of-coins)
      (cond ((= kinds-of-coins 1) 1)
            ((= kinds-of-coins 2) 5)
            ((= kinds-of-coins 3) 10)
            ((= kinds-of-coins 4) 25)
            ((= kinds-of-coins 5) 50)))
#+END_SRC

(The =first-denomination= procedure takes as input the number of kinds of coins available and returns the denomination of the first kind. Here we are thinking of the coins as arranged in order from largest to smallest, but any order would do as well.) We can now answer our original question about changing a dollar:

#+BEGIN_SRC lisp
    (count-change 100)
    292
#+END_SRC

=Count-change= generates a tree-recursive process with redundancies similar to those in our first implementation of =fib=. (It will take quite a while for that 292 to be computed.) On the other hand, it is not obvious how to design a better algorithm for computing the result, and we leave this problem as a challenge. The observation that a tree-recursive process may be highly inefficient but often easy to specify and understand has led people to propose that one could get the best of both worlds by designing a “smart compiler” that could transform tree-recursive procedures into more efficient procedures that compute the same result.[fn:1-34]

#+BEGIN_QUOTE
  *Exercise 1.11:* A function [[file:fig/math/7a8d165d31a04fc319968e0213091ff8.svg]] is defined by the rule that [[file:fig/math/858e97aa72fad42049bfdb3d966def85.svg]] if [[file:fig/math/1a7101157ae461b511ffea0eacf7ce88.svg]] and [[file:fig/math/3442878c66dcc4b6133e5ea2a2d10121.svg]] if [[file:fig/math/fd0bb2e5e2f01284bb7c8b8e23031c45.svg]]. Write a procedure that computes [[file:fig/math/7a8d165d31a04fc319968e0213091ff8.svg]] by means of a recursive process. Write a procedure that computes [[file:fig/math/7a8d165d31a04fc319968e0213091ff8.svg]] by means of an iterative process.
#+END_QUOTE

#+BEGIN_QUOTE
  *Exercise 1.12:* The following pattern of numbers is called  /Pascal's triangle/.

  #+BEGIN_EXAMPLE
               1
             1   1
           1   2   1
         1   3   3   1
       1   4   6   4   1
             . . .
  #+END_EXAMPLE

  The numbers at the edge of the triangle are all 1, and each number inside the triangle is the sum of the two numbers above it.[fn:1-35] Write a procedure that computes elements of Pascal's triangle by means of a recursive process.
#+END_QUOTE

#+BEGIN_QUOTE
  *Exercise 1.13:* Prove that [[file:fig/math/606058a44581066eed9cf2309aee7b71.svg]] is the closest integer to [[file:fig/math/dd53f55e0a4674912e8a49cd871c795b.svg]], where [[file:fig/math/82c54a67e55d18b10c1f9e31c4e345a8.svg]]. Hint: Let [[file:fig/math/64827f834c027b41fcef22961c68e30f.svg]]. Use induction and the definition of the Fibonacci numbers (see [[1.2.2]]) to prove that [[file:fig/math/ccf94bce86e4d1eb28de0fe042b3b533.svg]].
#+END_QUOTE

** 1.2.3 Orders of Growth


The previous examples illustrate that processes can differ considerably in the rates at which they consume computational resources. One convenient way to describe this difference is to use the notion of  /order of growth/ to obtain a gross measure of the resources required by a process as the inputs become larger.

Let [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] be a parameter that measures the size of the problem, and let [[file:fig/math/ea7204bb6e90d2190e6edb6a241d8564.svg]] be the amount of resources the process requires for a problem of size [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]]. In our previous examples we took [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] to be the number for which a given function is to be computed, but there are other possibilities. For instance, if our goal is to compute an approximation to the square root of a number, we might take [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] to be the number of digits accuracy required. For matrix multiplication we might take [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] to be the number of rows in the matrices. In general there are a number of properties of the problem with respect to which it will be desirable to analyze a given process. Similarly, [[file:fig/math/ea7204bb6e90d2190e6edb6a241d8564.svg]] might measure the number of internal storage registers used, the number of elementary machine operations performed, and so on. In computers that do only a fixed number of operations at a time, the time required will be proportional to the number of elementary machine operations performed.

We say that [[file:fig/math/ea7204bb6e90d2190e6edb6a241d8564.svg]] has order of growth [[file:fig/math/82dee58be97eb1c143e8307f9a952b48.svg]], written [[file:fig/math/aca9328ad0b29190f05f348d1f42f4f9.svg]] (pronounced “theta of [[file:fig/math/84a6f8b825fdb354bca37ca2a5b854e1.svg]]”), if there are positive constants [[file:fig/math/9e40c899364b3a7bc648f5071c8e501c.svg]] and [[file:fig/math/f770f36651db7f4958828f415118c5e8.svg]] independent of [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] such that [[file:fig/math/06b1fbaa45f5769cd3de898eb76451b1.svg]] for any sufficiently large value of [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]]. (In other words, for large [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]], the value [[file:fig/math/ea7204bb6e90d2190e6edb6a241d8564.svg]] is sandwiched between [[file:fig/math/1b4ac2c0c1dd95f199d565e90b91e1ca.svg]] and [[file:fig/math/f683bd07b215182cd8c6df8573bb0513.svg]].)

For instance, with the linear recursive process for computing factorial described in [[1.2.1]] the number of steps grows proportionally to the input [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]]. Thus, the steps required for this process grows as [[file:fig/math/67f39a78859198da759c097b570842e8.svg]]. We also saw that the space required grows as [[file:fig/math/67f39a78859198da759c097b570842e8.svg]]. For the iterative factorial, the number of steps is still [[file:fig/math/67f39a78859198da759c097b570842e8.svg]] but the space is [[file:fig/math/d204133a45e3c82e46752ed335bc0373.svg]]---that is, constant.[fn:1-36] The tree-recursive Fibonacci computation requires [[file:fig/math/52158564696e8ea2b148b091ec81e378.svg]] steps and space [[file:fig/math/67f39a78859198da759c097b570842e8.svg]], where [[file:fig/math/dcc52b7b3e1a0a821032c2d16b198829.svg]] is the golden ratio described in [[1.2.2]].

Orders of growth provide only a crude description of the behavior of a process. For example, a process requiring [[file:fig/math/8749316e3d02c5d953690375757e639e.svg]] steps and a process requiring [[file:fig/math/27546935652e330bcf31c704436a103d.svg]] steps and a process requiring [[file:fig/math/95657bdb137c3a0202cdd427b4930ea3.svg]] steps all have [[file:fig/math/e6194f553f4f8569bdbf476c2d7fbe3e.svg]] order of growth. On the other hand, order of growth provides a useful indication of how we may expect the behavior of the process to change as we change the size of the problem. For a [[file:fig/math/67f39a78859198da759c097b570842e8.svg]] (linear) process, doubling the size will roughly double the amount of resources used. For an exponential process, each increment in problem size will multiply the resource utilization by a constant factor. In the remainder of [[1.2]] we will examine two algorithms whose order of growth is logarithmic, so that doubling the problem size increases the resource requirement by a constant amount.

#+BEGIN_QUOTE
  *Exercise 1.14:* Draw the tree illustrating the process generated by the =count-change= procedure of [[1.2.2]] in making change for 11 cents. What are the orders of growth of the space and number of steps used by this process as the amount to be changed increases?
#+END_QUOTE

#+BEGIN_QUOTE
  *Exercise 1.15:* The sine of an angle (specified in radians) can be computed by making use of the approximation [[file:fig/math/5b5a58e4e6caabf48362f07299a6963f.svg]] if [[file:fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg]] is sufficiently small, and the trigonometric identity [[file:fig/math/c5d4c9fd61552087f2509120228486b5.svg]] to reduce the size of the argument of sin. (For purposes of this exercise an angle is considered “sufficiently small” if its magnitude is not greater than 0.1 radians.) These ideas are incorporated in the following procedures:

  #+BEGIN_SRC lisp
      (define (cube x) (* x x x))
      (define (p x) (- (* 3 x) (* 4 (cube x))))
      (define (sine angle)
         (if (not (> (abs angle) 0.1))
             angle
             (p (sine (/ angle 3.0)))))
  #+END_SRC

  1. How many times is the procedure =p= applied when =(sine 12.15)= is evaluated?
  2. What is the order of growth in space and number of steps (as a function of [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]]) used by the process generated by the =sine= procedure when =(sine a)= is evaluated?
#+END_QUOTE

** 1.2.4 Exponentiation


Consider the problem of computing the exponential of a given number. We would like a procedure that takes as arguments a base [[file:fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg]] and a positive integer exponent [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] and computes [[file:fig/math/d6d83912c8ad9c60e8bb70e75a27a8ad.svg]]. One way to do this is via the recursive definition [[file:fig/math/7cdc301fe7e670dea20a8543c292a94b.svg]] which translates readily into the procedure

#+BEGIN_SRC lisp
    (define (expt b n)
      (if (= n 0)
          1
          (* b (expt b (- n 1)))))
#+END_SRC

This is a linear recursive process, which requires [[file:fig/math/67f39a78859198da759c097b570842e8.svg]] steps and [[file:fig/math/67f39a78859198da759c097b570842e8.svg]] space. Just as with factorial, we can readily formulate an equivalent linear iteration:

#+BEGIN_SRC lisp
    (define (expt b n)
      (expt-iter b n 1))

    (define (expt-iter b counter product)
      (if (= counter 0)
          product
          (expt-iter b
                     (- counter 1)
                     (* b product))))
#+END_SRC

This version requires [[file:fig/math/67f39a78859198da759c097b570842e8.svg]] steps and [[file:fig/math/d204133a45e3c82e46752ed335bc0373.svg]] space.

We can compute exponentials in fewer steps by using successive squaring. For instance, rather than computing [[file:fig/math/283d552b882dc58695d55ae691cc39ec.svg]] as [[file:fig/math/0af40e2c1e29ab7e2b5c30a9a3626d86.svg]] we can compute it using three multiplications: [[file:fig/math/3d315a20de1eb7a81e1755603ff7fba8.svg]] This method works fine for exponents that are powers of 2. We can also take advantage of successive squaring in computing exponentials in general if we use the rule [[file:fig/math/6c35b5f12bc3e025345212de641cff2c.svg]] We can express this method as a procedure:

#+BEGIN_SRC lisp
    (define (fast-expt b n)
      (cond ((= n 0)
             1)
            ((even? n)
             (square (fast-expt b (/ n 2))))
            (else
             (* b (fast-expt b (- n 1))))))
#+END_SRC

where the predicate to test whether an integer is even is defined in terms of the primitive procedure =remainder= by

#+BEGIN_SRC lisp
    (define (even? n)
      (= (remainder n 2) 0))
#+END_SRC

The process evolved by =fast-expt= grows logarithmically with [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] in both space and number of steps. To see this, observe that computing [[file:fig/math/02fd4a93757c080c7a4513c86141b1ca.svg]] using =fast-expt= requires only one more multiplication than computing [[file:fig/math/d6d83912c8ad9c60e8bb70e75a27a8ad.svg]]. The size of the exponent we can compute therefore doubles (approximately) with every new multiplication we are allowed. Thus, the number of multiplications required for an exponent of [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] grows about as fast as the logarithm of [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] to the base 2. The process has [[file:fig/math/48be6efaded27da68b3a4aa70713c562.svg]] growth.[fn:1-37]

The difference between [[file:fig/math/48be6efaded27da68b3a4aa70713c562.svg]] growth and [[file:fig/math/67f39a78859198da759c097b570842e8.svg]] growth becomes striking as [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] becomes large. For example, =fast-expt= for [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] = 1000 requires only 14 multiplications.[fn:1-38] It is also possible to use the idea of successive squaring to devise an iterative algorithm that computes exponentials with a logarithmic number of steps (see [[Exercise 1.16]]), although, as is often the case with iterative algorithms, this is not written down so straightforwardly as the recursive algorithm.[fn:1-39]

#+BEGIN_QUOTE
  *Exercise 1.16:* Design a procedure that evolves an iterative exponentiation process that uses successive squaring and uses a logarithmic number of steps, as does =fast-expt=. (Hint: Using the observation that [[file:fig/math/2200ff350e68ec776850ac2446796cf2.svg]], keep, along with the exponent [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] and the base [[file:fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg]], an additional state variable [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]], and define the state transformation in such a way that the product [[file:fig/math/c6cb8af9049ad4ef353f37f56c7dd679.svg]] is unchanged from state to state. At the beginning of the process [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]] is taken to be 1, and the answer is given by the value of [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]] at the end of the process. In general, the technique of defining an  /invariant quantity/ that remains unchanged from state to state is a powerful way to think about the design of iterative algorithms.)
#+END_QUOTE

#+BEGIN_QUOTE
  *Exercise 1.17:* The exponentiation algorithms in this section are based on performing exponentiation by means of repeated multiplication. In a similar way, one can perform integer multiplication by means of repeated addition. The following multiplication procedure (in which it is assumed that our language can only add, not multiply) is analogous to the =expt= procedure:

  #+BEGIN_SRC lisp
      (define (* a b)
        (if (= b 0)
            0
            (+ a (* a (- b 1)))))
  #+END_SRC

  This algorithm takes a number of steps that is linear in =b=. Now suppose we include, together with addition, operations =double=, which doubles an integer, and =halve=, which divides an (even) integer by 2. Using these, design a multiplication procedure analogous to =fast-expt= that uses a logarithmic number of steps.
#+END_QUOTE

#+BEGIN_QUOTE
  *Exercise 1.18:* Using the results of [[Exercise 1.16]] and [[Exercise 1.17]], devise a procedure that generates an iterative process for multiplying two integers in terms of adding, doubling, and halving and uses a logarithmic number of steps.[fn:1-40]
#+END_QUOTE

#+BEGIN_QUOTE
  *Exercise 1.19:* There is a clever algorithm for computing the Fibonacci numbers in a logarithmic number of steps. Recall the transformation of the state variables [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]] and [[file:fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg]] in the =fib-iter= process of [[1.2.2]]: [[file:fig/math/d39194a0d1c178733eb244d69b55684e.svg]] and [[file:fig/math/3b380e5e7cb6eaec3d24987d57155346.svg]]. Call this transformation [[file:fig/math/f06926aab0bc0e9f47ee2cd90f581bb2.svg]], and observe that applying [[file:fig/math/f06926aab0bc0e9f47ee2cd90f581bb2.svg]] over and over again [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] times, starting with 1 and 0, produces the pair [[file:fig/math/455054e624823e0531cfd992817c1e2c.svg]] and [[file:fig/math/606058a44581066eed9cf2309aee7b71.svg]]. In other words, the Fibonacci numbers are produced by applying [[file:fig/math/97bb73b53bd84890ebced415bc5b713b.svg]], the [[file:fig/math/3b6c232f796b2d291446b22cb38c933e.svg]] power of the transformation [[file:fig/math/f06926aab0bc0e9f47ee2cd90f581bb2.svg]], starting with the pair (1, 0). Now consider [[file:fig/math/f06926aab0bc0e9f47ee2cd90f581bb2.svg]] to be the special case of [[file:fig/math/cb1bd43764938dd0d271b5c7810257d2.svg]] and [[file:fig/math/07135faa5399dbe9425185586bd6242d.svg]] in a family of transformations [[file:fig/math/27485fa57aac362c12f3cb2fcd66342a.svg]], where [[file:fig/math/27485fa57aac362c12f3cb2fcd66342a.svg]] transforms the pair [[file:fig/math/ea2319b50d39f07528935586077fff92.svg]] according to [[file:fig/math/5abe8ae895e31cd7ab1160ddf92add64.svg]] and [[file:fig/math/232e9f2a41f754a7c0551325a3e01f05.svg]]. Show that if we apply such a transformation [[file:fig/math/27485fa57aac362c12f3cb2fcd66342a.svg]] twice, the effect is the same as using a single transformation [[file:fig/math/4f694b2fe4e4719aa0dac2d674d0b3a0.svg]] of the same form, and compute [[file:fig/math/57e75abf57b8dff6be94ebb3d668a101.svg]] and [[file:fig/math/64e83566bd37cbe1c40549eab5aa5f33.svg]] in terms of [[file:fig/math/cce39738a2208cea750f01366fd29144.svg]] and [[file:fig/math/55e71917aae71d65907116d02f07c8f8.svg]]. This gives us an explicit way to square these transformations, and thus we can compute [[file:fig/math/97bb73b53bd84890ebced415bc5b713b.svg]] using successive squaring, as in the =fast-expt= procedure. Put this all together to complete the following procedure, which runs in a logarithmic number of steps:[fn:1-41]

  #+BEGIN_SRC lisp
      (define (fib n)
        (fib-iter 1 0 0 1 n))

      (define (fib-iter a b p q count)
        (cond ((= count 0)
               b)
              ((even? count)
               (fib-iter a
                         b
                         ⟨??⟩  ;compute p'
                         ⟨??⟩  ;compute q'
                         (/ count 2)))
              (else
               (fib-iter (+ (* b q)
                            (* a q)
                            (* a p))
                         (+ (* b p)
                            (* a q))
                         p
                         q
                         (- count 1)))))
  #+END_SRC

#+END_QUOTE

** 1.2.5 Greatest Common Divisors


The greatest common divisor (GCD) of two integers [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]] and [[file:fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg]] is defined to be the largest integer that divides both [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]] and [[file:fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg]] with no remainder. For example, the GCD of 16 and 28 is 4. In [[Chapter 2]], when we investigate how to implement rational-number arithmetic, we will need to be able to compute GCDs in order to reduce rational numbers to lowest terms. (To reduce a rational number to lowest terms, we must divide both the numerator and the denominator by their GCD. For example, 16/28 reduces to 4/7.) One way to find the GCD of two integers is to factor them and search for common factors, but there is a famous algorithm that is much more efficient.

The idea of the algorithm is based on the observation that, if [[file:fig/math/506c25753e5f5225576484e427d17c9b.svg]] is the remainder when [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]] is divided by [[file:fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg]], then the common divisors of [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]] and [[file:fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg]] are precisely the same as the common divisors of [[file:fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg]] and [[file:fig/math/506c25753e5f5225576484e427d17c9b.svg]]. Thus, we can use the equation

#+BEGIN_EXAMPLE
    GCD(a,b) = GCD(b,r)
#+END_EXAMPLE

to successively reduce the problem of computing a GCD to the problem of computing the GCD of smaller and smaller pairs of integers. For example,

#+BEGIN_EXAMPLE
    GCD(206,40) = GCD(40,6)
                = GCD(6,4)
                = GCD(4,2)
                = GCD(2,0) = 2
#+END_EXAMPLE

reduces GCD(206, 40) to GCD(2, 0), which is 2. It is possible to show that starting with any two positive integers and performing repeated reductions will always eventually produce a pair where the second number is 0. Then the GCD is the other number in the pair. This method for computing the GCD is known as  /Euclid's Algorithm/.[fn:1-42]

It is easy to express Euclid's Algorithm as a procedure:

#+BEGIN_SRC lisp
    (define (gcd a b)
      (if (= b 0)
          a
          (gcd b (remainder a b))))
#+END_SRC

This generates an iterative process, whose number of steps grows as the logarithm of the numbers involved.

The fact that the number of steps required by Euclid's Algorithm has logarithmic growth bears an interesting relation to the Fibonacci numbers:

#+BEGIN_QUOTE
  *Lamé's Theorem:* If Euclid's Algorithm requires [[file:fig/math/83054be07bea98353c7cda3290903d5e.svg]] steps to compute the GCD of some pair, then the smaller number in the pair must be greater than or equal to the [[file:fig/math/a99501773dcc30d9f89e17ff1338d1eb.svg]] Fibonacci number.[fn:1-43]
#+END_QUOTE

We can use this theorem to get an order-of-growth estimate for Euclid's Algorithm. Let [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] be the smaller of the two inputs to the procedure. If the process takes [[file:fig/math/83054be07bea98353c7cda3290903d5e.svg]] steps, then we must have [[file:fig/math/4dc3a31cbb87672a5f199a4a57784b3c.svg]]. Therefore the number of steps [[file:fig/math/83054be07bea98353c7cda3290903d5e.svg]] grows as the logarithm (to the base [[file:fig/math/dcc52b7b3e1a0a821032c2d16b198829.svg]]) of [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]]. Hence, the order of growth is [[file:fig/math/48be6efaded27da68b3a4aa70713c562.svg]].

#+BEGIN_QUOTE
  *Exercise 1.20:* The process that a procedure generates is of course dependent on the rules used by the interpreter. As an example, consider the iterative =gcd= procedure given above. Suppose we were to interpret this procedure using normal-order evaluation, as discussed in [[1.1.5]]. (The normal-order-evaluation rule for =if= is described in [[Exercise 1.5]].) Using the substitution method (for normal order), illustrate the process generated in evaluating =(gcd 206 40)= and indicate the =remainder= operations that are actually performed. How many =remainder= operations are actually performed in the normal-order evaluation of =(gcd 206 40)=? In the applicative-order evaluation?
#+END_QUOTE

** 1.2.6 Example: Testing for Primality


This section describes two methods for checking the primality of an integer [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]], one with order of growth [[file:fig/math/0b326d311946d63cd799ea924304ca88.svg]], and a “probabilistic” algorithm with order of growth [[file:fig/math/48be6efaded27da68b3a4aa70713c562.svg]]. The exercises at the end of this section suggest programming projects based on these algorithms.

*** Searching for divisors


Since ancient times, mathematicians have been fascinated by problems concerning prime numbers, and many people have worked on the problem of determining ways to test if numbers are prime. One way to test if a number is prime is to find the number's divisors. The following program finds the smallest integral divisor (greater than 1) of a given number [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]]. It does this in a straightforward way, by testing [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] for divisibility by successive integers starting with 2.

#+BEGIN_SRC lisp
    (define (smallest-divisor n)
      (find-divisor n 2))

    (define (find-divisor n test-divisor)
      (cond ((> (square test-divisor) n)
             n)
            ((divides? test-divisor n)
             test-divisor)
            (else (find-divisor
                   n
                   (+ test-divisor 1)))))

    (define (divides? a b)
      (= (remainder b a) 0))
#+END_SRC

We can test whether a number is prime as follows: [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] is prime if and only if [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] is its own smallest divisor.

#+BEGIN_SRC lisp
    (define (prime? n)
      (= n (smallest-divisor n)))
#+END_SRC

The end test for =find-divisor= is based on the fact that if [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] is not prime it must have a divisor less than or equal to [[file:fig/math/6401acda6e40516e261b2a2cd409285f.svg]].[fn:1-44] This means that the algorithm need only test divisors between 1 and [[file:fig/math/6401acda6e40516e261b2a2cd409285f.svg]]. Consequently, the number of steps required to identify [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] as prime will have order of growth [[file:fig/math/0b326d311946d63cd799ea924304ca88.svg]].

*** The Fermat test


The [[file:fig/math/48be6efaded27da68b3a4aa70713c562.svg]] primality test is based on a result from number theory known as Fermat's Little Theorem.[fn:1-45]

#+BEGIN_QUOTE
  *Fermat's Little Theorem:* If [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] is a prime number and [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]] is any positive integer less than [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]], then [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]] raised to the [[file:fig/math/3b6c232f796b2d291446b22cb38c933e.svg]] power is congruent to [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]] modulo [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]].
#+END_QUOTE

(Two numbers are said to be  /congruent modulo/ [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] if they both have the same remainder when divided by [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]]. The remainder of a number [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]] when divided by [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] is also referred to as the  /remainder of/ [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]]  /modulo/ [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]], or simply as [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]]  /modulo/ [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]].)

If [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] is not prime, then, in general, most of the numbers [[file:fig/math/fe5e256d86f2ab36533fbb225c24f80c.svg]] will not satisfy the above relation. This leads to the following algorithm for testing primality: Given a number [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]], pick a random number [[file:fig/math/fe5e256d86f2ab36533fbb225c24f80c.svg]] and compute the remainder of [[file:fig/math/105ea6d3173ee81b75f470740a59e52a.svg]] modulo [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]]. If the result is not equal to [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]], then [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] is certainly not prime. If it is [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]], then chances are good that [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] is prime. Now pick another random number [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]] and test it with the same method. If it also satisfies the equation, then we can be even more confident that [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] is prime. By trying more and more values of [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]], we can increase our confidence in the result. This algorithm is known as the Fermat test.

To implement the Fermat test, we need a procedure that computes the exponential of a number modulo another number:

#+BEGIN_SRC lisp
    (define (expmod base exp m)
      (cond ((= exp 0) 1)
            ((even? exp)
             (remainder
              (square (expmod base (/ exp 2) m))
              m))
            (else
             (remainder
              (* base (expmod base (- exp 1) m))
              m))))
#+END_SRC

This is very similar to the =fast-expt= procedure of [[1.2.4]]. It uses successive squaring, so that the number of steps grows logarithmically with the exponent.[fn:1-46]

The Fermat test is performed by choosing at random a number [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]] between 1 and [[file:fig/math/1aeb2237b7777768e88172586e76ee37.svg]] inclusive and checking whether the remainder modulo [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] of the [[file:fig/math/3b6c232f796b2d291446b22cb38c933e.svg]] power of [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]] is equal to [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]]. The random number [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]] is chosen using the procedure =random=, which we assume is included as a primitive in Scheme. =Random= returns a nonnegative integer less than its integer input. Hence, to obtain a random number between 1 and [[file:fig/math/1aeb2237b7777768e88172586e76ee37.svg]], we call =random= with an input of [[file:fig/math/1aeb2237b7777768e88172586e76ee37.svg]] and add 1 to the result:

#+BEGIN_SRC lisp
    (define (fermat-test n)
      (define (try-it a)
        (= (expmod a n n) a))
      (try-it (+ 1 (random (- n 1)))))
#+END_SRC

The following procedure runs the test a given number of times, as specified by a parameter. Its value is true if the test succeeds every time, and false otherwise.

#+BEGIN_SRC lisp
    (define (fast-prime? n times)
      (cond ((= times 0) true)
            ((fermat-test n)
             (fast-prime? n (- times 1)))
            (else false)))
#+END_SRC

*** Probabilistic methods


The Fermat test differs in character from most familiar algorithms, in which one computes an answer that is guaranteed to be correct. Here, the answer obtained is only probably correct. More precisely, if [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] ever fails the Fermat test, we can be certain that [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] is not prime. But the fact that [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] passes the test, while an extremely strong indication, is still not a guarantee that [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] is prime. What we would like to say is that for any number [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]], if we perform the test enough times and find that [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] always passes the test, then the probability of error in our primality test can be made as small as we like.

Unfortunately, this assertion is not quite correct. There do exist numbers that fool the Fermat test: numbers [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] that are not prime and yet have the property that [[file:fig/math/105ea6d3173ee81b75f470740a59e52a.svg]] is congruent to [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]] modulo [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] for all integers [[file:fig/math/fe5e256d86f2ab36533fbb225c24f80c.svg]]. Such numbers are extremely rare, so the Fermat test is quite reliable in practice.[fn:1-47]

There are variations of the Fermat test that cannot be fooled. In these tests, as with the Fermat method, one tests the primality of an integer [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] by choosing a random integer [[file:fig/math/fe5e256d86f2ab36533fbb225c24f80c.svg]] and checking some condition that depends upon [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] and [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]]. (See [[Exercise 1.28]] for an example of such a test.) On the other hand, in contrast to the Fermat test, one can prove that, for any [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]], the condition does not hold for most of the integers [[file:fig/math/fe5e256d86f2ab36533fbb225c24f80c.svg]] unless [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] is prime. Thus, if [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] passes the test for some random choice of [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]], the chances are better than even that [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] is prime. If [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] passes the test for two random choices of [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]], the chances are better than 3 out of 4 that [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] is prime. By running the test with more and more randomly chosen values of [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]] we can make the probability of error as small as we like.

The existence of tests for which one can prove that the chance of error becomes arbitrarily small has sparked interest in algorithms of this type, which have come to be known as  /probabilistic algorithms/. There is a great deal of research activity in this area, and probabilistic algorithms have been fruitfully applied to many fields.[fn:1-48]

#+BEGIN_QUOTE
  *Exercise 1.21:* Use the =smallest-divisor= procedure to find the smallest divisor of each of the following numbers: 199, 1999, 19999.
#+END_QUOTE

#+BEGIN_QUOTE
  *Exercise 1.22:* Most Lisp implementations include a primitive called =runtime= that returns an integer that specifies the amount of time the system has been running (measured, for example, in microseconds). The following =timed-prime-test= procedure, when called with an integer [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]], prints [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] and checks to see if [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] is prime. If [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] is prime, the procedure prints three asterisks followed by the amount of time used in performing the test.

  #+BEGIN_SRC lisp
      (define (timed-prime-test n)
        (newline)
        (display n)
        (start-prime-test n (runtime)))
  #+END_SRC

  #+BEGIN_SRC lisp
      (define (start-prime-test n start-time)
        (if (prime? n)
            (report-prime (- (runtime)
                             start-time))))
  #+END_SRC

  #+BEGIN_SRC lisp
      (define (report-prime elapsed-time)
        (display " *** ")
        (display elapsed-time))
  #+END_SRC

  Using this procedure, write a procedure =search-for-primes= that checks the primality of consecutive odd integers in a specified range. Use your procedure to find the three smallest primes larger than 1000; larger than 10,000; larger than 100,000; larger than 1,000,000. Note the time needed to test each prime. Since the testing algorithm has order of growth of [[file:fig/math/0b326d311946d63cd799ea924304ca88.svg]], you should expect that testing for primes around 10,000 should take about [[file:fig/math/791dda34684aa76ee72ce36deacb06ee.svg]] times as long as testing for primes around 1000. Do your timing data bear this out? How well do the data for 100,000 and 1,000,000 support the [[file:fig/math/0b326d311946d63cd799ea924304ca88.svg]] prediction? Is your result compatible with the notion that programs on your machine run in time proportional to the number of steps required for the computation?
#+END_QUOTE

#+BEGIN_QUOTE
  *Exercise 1.23:* The =smallest-divisor= procedure shown at the start of this section does lots of needless testing: After it checks to see if the number is divisible by 2 there is no point in checking to see if it is divisible by any larger even numbers. This suggests that the values used for =test-divisor= should not be 2, 3, 4, 5, 6, ..., but rather 2, 3, 5, 7, 9, .... To implement this change, define a procedure =next= that returns 3 if its input is equal to 2 and otherwise returns its input plus 2. Modify the =smallest-divisor= procedure to use =(next test-divisor)= instead of =(+ test-divisor 1)=. With =timed-prime-test= incorporating this modified version of =smallest-divisor=, run the test for each of the 12 primes found in [[Exercise 1.22]]. Since this modification halves the number of test steps, you should expect it to run about twice as fast. Is this expectation confirmed? If not, what is the observed ratio of the speeds of the two algorithms, and how do you explain the fact that it is different from 2?
#+END_QUOTE

#+BEGIN_QUOTE
  *Exercise 1.24:* Modify the =timed-prime-test= procedure of [[Exercise 1.22]] to use =fast-prime?= (the Fermat method), and test each of the 12 primes you found in that exercise. Since the Fermat test has [[file:fig/math/48be6efaded27da68b3a4aa70713c562.svg]] growth, how would you expect the time to test primes near 1,000,000 to compare with the time needed to test primes near 1000? Do your data bear this out? Can you explain any discrepancy you find?
#+END_QUOTE

#+BEGIN_QUOTE
  *Exercise 1.25:* Alyssa P. Hacker complains that we went to a lot of extra work in writing =expmod=. After all, she says, since we already know how to compute exponentials, we could have simply written

  #+BEGIN_SRC lisp
      (define (expmod base exp m)
        (remainder (fast-expt base exp) m))
  #+END_SRC

  Is she correct? Would this procedure serve as well for our fast prime tester? Explain.
#+END_QUOTE

#+BEGIN_QUOTE
  *Exercise 1.26:* Louis Reasoner is having great difficulty doing [[Exercise 1.24]]. His =fast-prime?= test seems to run more slowly than his =prime?= test. Louis calls his friend Eva Lu Ator over to help. When they examine Louis's code, they find that he has rewritten the =expmod= procedure to use an explicit multiplication, rather than calling =square=:

  #+BEGIN_SRC lisp
      (define (expmod base exp m)
        (cond ((= exp 0) 1)
              ((even? exp)
               (remainder
                (* (expmod base (/ exp 2) m)
                   (expmod base (/ exp 2) m))
                m))
              (else
               (remainder
                (* base
                   (expmod base (- exp 1) m))
                m))))
  #+END_SRC

  “I don't see what difference that could make,” says Louis. “I do.” says Eva. “By writing the procedure like that, you have transformed the [[file:fig/math/48be6efaded27da68b3a4aa70713c562.svg]] process into a [[file:fig/math/67f39a78859198da759c097b570842e8.svg]] process.” Explain.
#+END_QUOTE

#+BEGIN_QUOTE
  *Exercise 1.27:* Demonstrate that the Carmichael numbers listed in [[Footnote 47]] really do fool the Fermat test. That is, write a procedure that takes an integer [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] and tests whether [[file:fig/math/105ea6d3173ee81b75f470740a59e52a.svg]] is congruent to [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]] modulo [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] for every [[file:fig/math/fe5e256d86f2ab36533fbb225c24f80c.svg]], and try your procedure on the given Carmichael numbers.
#+END_QUOTE

#+BEGIN_QUOTE
  *Exercise 1.28:* One variant of the Fermat test that cannot be fooled is called the  /Miller-Rabin test/ ([[Miller 1976]]; [[Rabin 1980]]). This starts from an alternate form of Fermat's Little Theorem, which states that if [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] is a prime number and [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]] is any positive integer less than [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]], then [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]] raised to the [[file:fig/math/c8beea704f256f9704f3db4847b94c52.svg]]-st power is congruent to 1 modulo [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]]. To test the primality of a number [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] by the Miller-Rabin test, we pick a random number [[file:fig/math/fe5e256d86f2ab36533fbb225c24f80c.svg]] and raise [[file:fig/math/09009cdd5fc245e05305bc574dcdc97d.svg]] to the [[file:fig/math/c8beea704f256f9704f3db4847b94c52.svg]]-st power modulo [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] using the =expmod= procedure. However, whenever we perform the squaring step in =expmod=, we check to see if we have discovered a “nontrivial square root of 1 modulo [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]],” that is, a number not equal to 1 or [[file:fig/math/1aeb2237b7777768e88172586e76ee37.svg]] whose square is equal to 1 modulo [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]]. It is possible to prove that if such a nontrivial square root of 1 exists, then [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] is not prime. It is also possible to prove that if [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] is an odd number that is not prime, then, for at least half the numbers [[file:fig/math/fe5e256d86f2ab36533fbb225c24f80c.svg]], computing [[file:fig/math/8eb6a52f0a1b2964cd27430784f25ad9.svg]] in this way will reveal a nontrivial square root of 1 modulo [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]]. (This is why the Miller-Rabin test cannot be fooled.) Modify the =expmod= procedure to signal if it discovers a nontrivial square root of 1, and use this to implement the Miller-Rabin test with a procedure analogous to =fermat-test=. Check your procedure by testing various known primes and non-primes. Hint: One convenient way to make =expmod= signal is to have it return 0.
#+END_QUOTE

** Footnotes


[fn:1-29] In a real program we would probably use the block structure introduced in the last section to hide the definition of =fact-iter=:

#+BEGIN_SRC lisp
    (define (factorial n)
      (define (iter product counter)
        (if (> counter n)
            product
            (iter (* counter product)
                  (+ counter 1))))
      (iter 1 1))
#+END_SRC

We avoided doing this here so as to minimize the number of things to think about at once.

[fn:1-30] When we discuss the implementation of procedures on register machines in [[Chapter 5]], we will see that any iterative process can be realized “in hardware” as a machine that has a fixed set of registers and no auxiliary memory. In contrast, realizing a recursive process requires a machine that uses an auxiliary data structure known as a  /stack/.

[fn:1-31] Tail recursion has long been known as a compiler optimization trick. A coherent semantic basis for tail recursion was provided by Carl [[Hewitt (1977)]], who explained it in terms of the “message-passing” model of computation that we shall discuss in [[Chapter 3]]. Inspired by this, Gerald Jay Sussman and Guy Lewis Steele Jr. (see [[Steele and Sussman 1975]]) constructed a tail-recursive interpreter for Scheme. Steele later showed how tail recursion is a consequence of the natural way to compile procedure calls ([[Steele 1977]]). The IEEE standard for Scheme requires that Scheme implementations be tail-recursive.

[fn:1-32] An example of this was hinted at in [[1.1.3]]. The interpreter itself evaluates expressions using a tree-recursive process.

[fn:1-33] For example, work through in detail how the reduction rule applies to the problem of making change for 10 cents using pennies and nickels.

[fn:1-34] One approach to coping with redundant computations is to arrange matters so that we automatically construct a table of values as they are computed. Each time we are asked to apply the procedure to some argument, we first look to see if the value is already stored in the table, in which case we avoid performing the redundant computation. This strategy, known as  /tabulation/ or  /memoization/, can be implemented in a straightforward way. Tabulation can sometimes be used to transform processes that require an exponential number of steps (such as =count-change=) into processes whose space and time requirements grow linearly with the input. See [[Exercise 3.27]].

[fn:1-35] The elements of Pascal's triangle are called the  /binomial coefficients/, because the [[file:fig/math/1d26333e30d7ef6a556179ea33325d48.svg]] row consists of the coefficients of the terms in the expansion of [[file:fig/math/1d548631d553cb5c93d658f0f25d296c.svg]]. This pattern for computing the coefficients appeared in Blaise Pascal's 1653 seminal work on probability theory, Traité du triangle arithmétique. According to [[Knuth (1973)]], the same pattern appears in the Szu-yuen Yü-chien (“The Precious Mirror of the Four Elements”), published by the Chinese mathematician Chu Shih-chieh in 1303, in the works of the twelfth-century Persian poet and mathematician Omar Khayyam, and in the works of the twelfth-century Hindu mathematician Bháscara Áchárya.

[fn:1-36] These statements mask a great deal of oversimplification. For instance, if we count process steps as “machine operations” we are making the assumption that the number of machine operations needed to perform, say, a multiplication is independent of the size of the numbers to be multiplied, which is false if the numbers are sufficiently large. Similar remarks hold for the estimates of space. Like the design and description of a process, the analysis of a process can be carried out at various levels of abstraction.

[fn:1-37] More precisely, the number of multiplications required is equal to 1 less than the log base 2 of [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]] plus the number of ones in the binary representation of [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]]. This total is always less than twice the log base 2 of [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]]. The arbitrary constants [[file:fig/math/9e40c899364b3a7bc648f5071c8e501c.svg]] and [[file:fig/math/f770f36651db7f4958828f415118c5e8.svg]] in the definition of order notation imply that, for a logarithmic process, the base to which logarithms are taken does not matter, so all such processes are described as [[file:fig/math/48be6efaded27da68b3a4aa70713c562.svg]].

[fn:1-38] You may wonder why anyone would care about raising numbers to the 1000th power. See [[1.2.6]].

[fn:1-39] This iterative algorithm is ancient. It appears in the Chandah-sutra by Áchárya Pingala, written before 200 B.C. See [[Knuth 1981]], section 4.6.3, for a full discussion and analysis of this and other methods of exponentiation.

[fn:1-40] This algorithm, which is sometimes known as the “Russian peasant method” of multiplication, is ancient. Examples of its use are found in the Rhind Papyrus, one of the two oldest mathematical documents in existence, written about 1700 B.C. (and copied from an even older document) by an Egyptian scribe named A'h-mose.

[fn:1-41] This exercise was suggested to us by Joe Stoy, based on an example in [[Kaldewaij 1990]].

[fn:1-42] Euclid's Algorithm is so called because it appears in Euclid's Elements (Book 7, ca. 300 B.C.). According to [[Knuth (1973)]], it can be considered the oldest known nontrivial algorithm. The ancient Egyptian method of multiplication ([[Exercise 1.18]]) is surely older, but, as Knuth explains, Euclid's algorithm is the oldest known to have been presented as a general algorithm, rather than as a set of illustrative examples.

[fn:1-43] This theorem was proved in 1845 by Gabriel Lamé, a French mathematician and engineer known chiefly for his contributions to mathematical physics. To prove the theorem, we consider pairs [[file:fig/math/4f4d9d2c178554d258955b5882886b71.svg]], where [[file:fig/math/c2b388f46177fef311a426f168e037d0.svg]], for which Euclid's Algorithm terminates in [[file:fig/math/83054be07bea98353c7cda3290903d5e.svg]] steps. The proof is based on the claim that, if [[file:fig/math/f91a2e4e97b6d4a9352d940625decdc0.svg]] are three successive pairs in the reduction process, then we must have [[file:fig/math/c02eacd6ed941e61dd6627af23507a75.svg]]. To verify the claim, consider that a reduction step is defined by applying the transformation [[file:fig/math/7913884e304c591ea6986727d9c56e66.svg]], [[file:fig/math/3cc38c0fc219be9688662626a0b0c48b.svg]] remainder of [[file:fig/math/07febb67a15c456e95ebbdb91c5910b7.svg]] divided by [[file:fig/math/7b7c05b32ae65e232eca6bbe10d21ea1.svg]]. The second equation means that [[file:fig/math/d6d4e2bcb9ab1e420b2a77bdb19d8fb3.svg]] for some positive integer [[file:fig/math/55e71917aae71d65907116d02f07c8f8.svg]]. And since [[file:fig/math/55e71917aae71d65907116d02f07c8f8.svg]] must be at least 1 we have [[file:fig/math/938e4d2065401215ca379761b3a64e9d.svg]]. But in the previous reduction step we have [[file:fig/math/438f8ebb132c2cec5e4312a20d21e1b6.svg]]. Therefore, [[file:fig/math/88677bf9dcc1a761dc146cb860233562.svg]]. This verifies the claim. Now we can prove the theorem by induction on [[file:fig/math/83054be07bea98353c7cda3290903d5e.svg]], the number of steps that the algorithm requires to terminate. The result is true for [[file:fig/math/bb08cea3f77bfdf5d4c5dd747eeb776d.svg]], since this merely requires that [[file:fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg]] be at least as large as [[file:fig/math/45b5ef7d699444ab210b863170b7461a.svg]]. Now, assume that the result is true for all integers less than or equal to [[file:fig/math/83054be07bea98353c7cda3290903d5e.svg]] and establish the result for [[file:fig/math/17d112fd6f44f2145c3129b029e7ac8b.svg]]. Let [[file:fig/math/f91a2e4e97b6d4a9352d940625decdc0.svg]] be successive pairs in the reduction process. By our induction hypotheses, we have [[file:fig/math/3ef36ea21d5611df87ff2c3d91236e32.svg]] and [[file:fig/math/1133dbc7a8bdab0aaed8b78933faac11.svg]]. Thus, applying the claim we just proved together with the definition of the Fibonacci numbers gives [[file:fig/math/b54c123a3fd5277f0165afffbbc74c83.svg]], which completes the proof of Lamé's Theorem.

[fn:1-44] If [[file:fig/math/94022487faed4226073f19cc394c11d0.svg]] is a divisor of [[file:fig/math/0932467390da34555ec70c122d7e915e.svg]], then so is [[file:fig/math/9101f115e5e93ec5cec5de214927fb7f.svg]]. But [[file:fig/math/94022487faed4226073f19cc394c11d0.svg]] and [[file:fig/math/9101f115e5e93ec5cec5de214927fb7f.svg]] cannot both be greater than [[file:fig/math/6401acda6e40516e261b2a2cd409285f.svg]].

[fn:1-45] Pierre de Fermat (1601-1665) is considered to be the founder of modern number theory. He obtained many important number-theoretic results, but he usually announced just the results, without providing his proofs. Fermat's Little Theorem was stated in a letter he wrote in 1640. The first published proof was given by Euler in 1736 (and an earlier, identical proof was discovered in the unpublished manuscripts of Leibniz). The most famous of Fermat's results---known as Fermat's Last Theorem---was jotted down in 1637 in his copy of the book Arithmetic (by the third-century Greek mathematician Diophantus) with the remark “I have discovered a truly remarkable proof, but this margin is too small to contain it.” Finding a proof of Fermat's Last Theorem became one of the most famous challenges in number theory. A complete solution was finally given in 1995 by Andrew Wiles of Princeton University.

[fn:1-46] The reduction steps in the cases where the exponent [[file:fig/math/debcc3e84db401938012afdc2ced88f1.svg]] is greater than 1 are based on the fact that, for any integers [[file:fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg]], [[file:fig/math/05e4cdb2f26a4f66b68c167423907fea.svg]], and [[file:fig/math/d87e6d0d6a9513640fdd6193cde8b6a3.svg]], we can find the remainder of [[file:fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg]] times [[file:fig/math/05e4cdb2f26a4f66b68c167423907fea.svg]] modulo [[file:fig/math/d87e6d0d6a9513640fdd6193cde8b6a3.svg]] by computing separately the remainders of [[file:fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg]] modulo [[file:fig/math/d87e6d0d6a9513640fdd6193cde8b6a3.svg]] and [[file:fig/math/05e4cdb2f26a4f66b68c167423907fea.svg]] modulo [[file:fig/math/d87e6d0d6a9513640fdd6193cde8b6a3.svg]], multiplying these, and then taking the remainder of the result modulo [[file:fig/math/d87e6d0d6a9513640fdd6193cde8b6a3.svg]]. For instance, in the case where [[file:fig/math/debcc3e84db401938012afdc2ced88f1.svg]] is even, we compute the remainder of [[file:fig/math/074fefd2a5f678baa3f4dfd220035e99.svg]] modulo [[file:fig/math/d87e6d0d6a9513640fdd6193cde8b6a3.svg]], square this, and take the remainder modulo [[file:fig/math/d87e6d0d6a9513640fdd6193cde8b6a3.svg]]. This technique is useful because it means we can perform our computation without ever having to deal with numbers much larger than [[file:fig/math/d87e6d0d6a9513640fdd6193cde8b6a3.svg]]. (Compare [[Exercise 1.25]].)

[fn:1-47] Numbers that fool the Fermat test are called  /Carmichael numbers/, and little is known about them other than that they are extremely rare. There are 255 Carmichael numbers below 100,000,000. The smallest few are 561, 1105, 1729, 2465, 2821, and 6601. In testing primality of very large numbers chosen at random, the chance of stumbling upon a value that fools the Fermat test is less than the chance that cosmic radiation will cause the computer to make an error in carrying out a “correct” algorithm. Considering an algorithm to be inadequate for the first reason but not for the second illustrates the difference between mathematics and engineering.

[fn:1-48] One of the most striking applications of probabilistic prime testing has been to the field of cryptography. Although it is now computationally infeasible to factor an arbitrary 200-digit number, the primality of such a number can be checked in a few seconds with the Fermat test. This fact forms the basis of a technique for constructing “unbreakable codes” suggested by [[Rivest et al. (1977)]]. The resulting  /RSA algorithm/ has become a widely used technique for enhancing the security of electronic communications. Because of this and related developments, the study of prime numbers, once considered the epitome of a topic in “pure” mathematics to be studied only for its own sake, now turns out to have important practical applications to cryptography, electronic funds transfer, and information retrieval.
