<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" xmlns:xml="http://www.w3.org/XML/1998/namespace" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Structure and Interpretation of Computer Programs, 2e: 1.1</title>

<meta name="description" content="Structure and Interpretation of Computer Programs, 2e: 1.1" />
<meta name="keywords" content="Structure and Interpretation of Computer Programs, 2e: 1.1" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="Generator" content="texi2any" />
<meta charset="utf-8" />
<link href="index.xhtml#Top" rel="start" title="Top" />
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index" />
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents" />
<link href="Chapter-1.xhtml#Chapter-1" rel="prev" title="Chapter 1" />
<link href="1_002e2.xhtml#g_t1_002e2" rel="next" title="1.2" />
<link href="Chapter-1.xhtml#Chapter-1" rel="prev" title="Chapter 1" />

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />



</head>

<body>
<section><span class="top jump" title="Jump to top"><a href="#pagetop" accesskey="t">⇡</a></span><a id="pagetop"></a><a id="g_t1_002e1"></a>
<nav class="header">
<p>
Next: <a href="1_002e2.xhtml#g_t1_002e2" accesskey="n" rel="next">1.2</a>, Prev: <a href="Chapter-1.xhtml#Chapter-1" accesskey="p" rel="prev">Chapter 1</a>, Up: <a href="Chapter-1.xhtml#Chapter-1" accesskey="u" rel="prev">Chapter 1</a>   [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>]</p>
</nav>
<a id="The-Elements-of-Programming"></a>
<h3 class="section"><span class="secnum">1.1</span><span class="sectitle">The Elements of Programming</span></h3>

<p>A powerful programming language is more than just a means for instructing a
computer to perform tasks.  The language also serves as a framework within
which we organize our ideas about processes.  Thus, when we describe a
language, we should pay particular attention to the means that the language
provides for combining simple ideas to form more complex ideas.  Every powerful
language has three mechanisms for accomplishing this:
</p>
<ul>
<li> <b>primitive expressions</b>,
which represent the simplest entities the language is concerned with,

</li><li> <b>means of combination</b>,
by which compound elements are built from simpler ones, and

</li><li> <b>means of abstraction</b>,
by which compound elements can be named and manipulated as units.

</li></ul>

<p>In programming, we deal with two kinds of elements: procedures and data. (Later
we will discover that they are really not so distinct.)  Informally, data is
“stuff” that we want to manipulate, and procedures are descriptions of the
rules for manipulating the data.  Thus, any powerful programming language
should be able to describe primitive data and primitive procedures and should
have methods for combining and abstracting procedures and data.
</p>
<p>In this chapter we will deal only with simple numerical data so that we can
focus on the rules for building procedures.<sup><a class="footnote_link" id="DOCF4" href="#FOOT4" epub:type="noteref">4</a></sup> In later chapters we will see that these
same rules allow us to build procedures to manipulate compound data as well.
</p>

<a id="g_t1_002e1_002e1"></a>
<a id="Expressions"></a>
<h4 class="subsection"><span class="secnum">1.1.1</span><span class="sectitle">Expressions</span></h4>

<p>One easy way to get started at programming is to examine some typical
interactions with an interpreter for the Scheme dialect of Lisp.  Imagine that
you are sitting at a computer terminal.  You type an <a id="index-expression"></a>
<em>expression</em>, and
the interpreter responds by displaying the result of its <a id="index-evaluating"></a>
<em>evaluating</em>
that expression.
</p>
<p>One kind of primitive expression you might type is a number.  (More precisely,
the expression that you type consists of the numerals that represent the number
in base 10.)  If you present Lisp with a number
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="lit">486</span></pre></div>

<p>the interpreter will respond by printing<sup><a class="footnote_link" id="DOCF5" href="#FOOT5" epub:type="noteref">5</a></sup>
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><i><span class="lit">486</span></i>
</pre></div>

<p>Expressions representing numbers may be combined with an expression
representing a primitive procedure (such as <code>+</code> or <code>*</code>) to form a
compound expression that represents the application of the procedure to those
numbers.  For example<!-- /@w -->:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="lit">137</span><span class="pln"> </span><span class="lit">349</span><span class="clo">)</span><span class="pln">
</span><i><span class="lit">486</span></i><span class="pln">

</span><span class="opn">(</span><span class="pun">-</span><span class="pln"> </span><span class="lit">1000</span><span class="pln"> </span><span class="lit">334</span><span class="clo">)</span><span class="pln">
</span><i><span class="lit">666</span></i><span class="pln">

</span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="lit">5</span><span class="pln"> </span><span class="lit">99</span><span class="clo">)</span><span class="pln">
</span><i><span class="lit">495</span></i><span class="pln">

</span><span class="opn">(</span><span class="pun">/</span><span class="pln"> </span><span class="lit">10</span><span class="pln"> </span><span class="lit">5</span><span class="clo">)</span><span class="pln">
</span><i><span class="lit">2</span></i><span class="pln">

</span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="lit">2.7</span><span class="pln"> </span><span class="lit">10</span><span class="clo">)</span><span class="pln">
</span><i><span class="lit">12.7</span></i>
</pre></div>

<p>Expressions such as these, formed by delimiting a list of expressions within
parentheses in order to denote procedure application, are called
<a id="index-combinations"></a>
<em>combinations</em>.  The leftmost element in the list is called the
<a id="index-operator"></a>
<em>operator</em>, and the other elements are called <a id="index-operands"></a>
<em>operands</em>.  The
value of a combination is obtained by applying the procedure specified by the
operator to the <a id="index-arguments"></a>
<em>arguments</em> that are the values of the operands.
</p>
<p>The convention of placing the operator to the left of the operands is known as
<a id="index-prefix-notation"></a>
<em>prefix notation</em>, and it may be somewhat confusing at first because it
departs significantly from the customary mathematical convention.  Prefix
notation has several advantages, however.  One of them is that it can
accommodate procedures that may take an arbitrary number of arguments, as in
the following examples:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="lit">21</span><span class="pln"> </span><span class="lit">35</span><span class="pln"> </span><span class="lit">12</span><span class="pln"> </span><span class="lit">7</span><span class="clo">)</span><span class="pln">
</span><i><span class="lit">75</span></i><span class="pln">

</span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="lit">25</span><span class="pln"> </span><span class="lit">4</span><span class="pln"> </span><span class="lit">12</span><span class="clo">)</span><span class="pln">
</span><i><span class="lit">1200</span></i>
</pre></div>

<p>No ambiguity can arise, because the operator is always the leftmost element and
the entire combination is delimited by the parentheses.
</p>
<p>A second advantage of prefix notation is that it extends in a straightforward
way to allow combinations to be <i>nested</i>, that is, to have combinations whose
elements are themselves combinations:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="lit">3</span><span class="pln"> </span><span class="lit">5</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> </span><span class="lit">10</span><span class="pln"> </span><span class="lit">6</span><span class="clo">))</span><span class="pln">
</span><i><span class="lit">19</span></i>
</pre></div>

<p>There is no limit (in principle) to the depth of such nesting and to the
overall complexity of the expressions that the Lisp interpreter can evaluate.
It is we humans who get confused by still relatively simple expressions such as
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="lit">3</span><span class="pln"> </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="lit">2</span><span class="pln"> </span><span class="lit">4</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="lit">3</span><span class="pln"> </span><span class="lit">5</span><span class="clo">)))</span><span class="pln"> </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> </span><span class="lit">10</span><span class="pln"> </span><span class="lit">7</span><span class="clo">)</span><span class="pln"> </span><span class="lit">6</span><span class="clo">))</span></pre></div>

<p>which the interpreter would readily evaluate to be 57.  We can help ourselves
by writing such an expression in the form
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="lit">3</span><span class="pln">
      </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="lit">2</span><span class="pln"> </span><span class="lit">4</span><span class="clo">)</span><span class="pln">
         </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="lit">3</span><span class="pln"> </span><span class="lit">5</span><span class="clo">)))</span><span class="pln">
   </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> </span><span class="lit">10</span><span class="pln"> </span><span class="lit">7</span><span class="clo">)</span><span class="pln">
      </span><span class="lit">6</span><span class="clo">))</span></pre></div>

<p>following a formatting convention known as <a id="index-pretty_002dprinting"></a>
<em>pretty-printing</em>, in which
each long combination is written so that the operands are aligned vertically.
The resulting indentations display clearly the structure of the
expression.<sup><a class="footnote_link" id="DOCF6" href="#FOOT6" epub:type="noteref">6</a></sup>
</p>
<p>Even with complex expressions, the interpreter always operates in the same
basic cycle: It reads an expression from the terminal, evaluates the
expression, and prints the result.  This mode of operation is often expressed
by saying that the interpreter runs in a <a id="index-read_002deval_002dprint-loop"></a>
<em>read-eval-print loop</em>.
Observe in particular that it is not necessary to explicitly instruct the
interpreter to print the value of the expression.<sup><a class="footnote_link" id="DOCF7" href="#FOOT7" epub:type="noteref">7</a></sup>
</p>
<a id="g_t1_002e1_002e2"></a>
<a id="Naming-and-the-Environment"></a>
<h4 class="subsection"><span class="secnum">1.1.2</span><span class="sectitle">Naming and the Environment</span></h4>

<p>A critical aspect of a programming language is the means it provides for using
names to refer to computational objects.  We say that the name identifies a
<a id="index-variable"></a>
<em>variable</em> whose <a id="index-value"></a>
<em>value</em> is the object.
</p>
<p>In the Scheme dialect of Lisp, we name things with <code>define</code>.  Typing
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> size </span><span class="lit">2</span><span class="clo">)</span></pre></div>

<p>causes the interpreter to associate the value 2 with the name
<code>size</code>.<sup><a class="footnote_link" id="DOCF8" href="#FOOT8" epub:type="noteref">8</a></sup> Once
the name <code>size</code> has been associated with the number 2, we can refer to the
value 2 by name:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="pln">size
</span><i><span class="lit">2</span></i><span class="pln">

</span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="lit">5</span><span class="pln"> size</span><span class="clo">)</span><span class="pln">
</span><i><span class="lit">10</span></i>
</pre></div>

<p>Here are further examples of the use of <code>define</code>:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> pi </span><span class="lit">3.14159</span><span class="clo">)</span><span class="pln">
</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> radius </span><span class="lit">10</span><span class="clo">)</span><span class="pln">

</span><span class="opn">(</span><span class="pun">*</span><span class="pln"> pi </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> radius radius</span><span class="clo">))</span><span class="pln">
</span><i><span class="lit">314.159</span></i><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> circumference </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="lit">2</span><span class="pln"> pi radius</span><span class="clo">))</span><span class="pln">

circumference
</span><i><span class="lit">62.8318</span></i>
</pre></div>

<p><code>Define</code> is our language’s simplest means of abstraction, for it allows us
to use simple names to refer to the results of compound operations, such as the
<code>circumference</code> computed above.  In general, computational objects may
have very complex structures, and it would be extremely inconvenient to have to
remember and repeat their details each time we want to use them.  Indeed,
complex programs are constructed by building, step by step, computational
objects of increasing complexity. The interpreter makes this step-by-step
program construction particularly convenient because name-object associations
can be created incrementally in successive interactions.  This feature
encourages the incremental development and testing of programs and is largely
responsible for the fact that a Lisp program usually consists of a large number
of relatively simple procedures.
</p>
<p>It should be clear that the possibility of associating values with symbols and
later retrieving them means that the interpreter must maintain some sort of
memory that keeps track of the name-object pairs.  This memory is called the
<a id="index-environment"></a>
<em>environment</em> (more precisely the <a id="index-global-environment"></a>
<em>global environment</em>, since
we will see later that a computation may involve a number of different
environments).<sup><a class="footnote_link" id="DOCF9" href="#FOOT9" epub:type="noteref">9</a></sup>
</p>
<a id="g_t1_002e1_002e3"></a>
<a id="Evaluating-Combinations"></a>
<h4 class="subsection"><span class="secnum">1.1.3</span><span class="sectitle">Evaluating Combinations</span></h4>

<p>One of our goals in this chapter is to isolate issues about thinking
procedurally.  As a case in point, let us consider that, in evaluating
combinations, the interpreter is itself following a procedure.
</p>
<blockquote>
<p>To evaluate a combination, do the following:
</p>
<ol>
<li> Evaluate the subexpressions of the combination.

</li><li> Apply the procedure that is the value of the leftmost subexpression (the
operator) to the arguments that are the values of the other subexpressions (the
operands).

</li></ol>
</blockquote>

<p>Even this simple rule illustrates some important points about processes in
general.  First, observe that the first step dictates that in order to
accomplish the evaluation process for a combination we must first perform the
evaluation process on each element of the combination.  Thus, the evaluation
rule is <a id="index-recursive"></a>
<em>recursive</em> in nature; that is, it includes, as one of its
steps, the need to invoke the rule itself.<sup><a class="footnote_link" id="DOCF10" href="#FOOT10" epub:type="noteref">10</a></sup>
</p>
<p>Notice how succinctly the idea of recursion can be used to express what, in the
case of a deeply nested combination, would otherwise be viewed as a rather
complicated process.  For example, evaluating
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="lit">2</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="lit">4</span><span class="pln"> </span><span class="lit">6</span><span class="clo">))</span><span class="pln"> </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="lit">3</span><span class="pln"> </span><span class="lit">5</span><span class="pln"> </span><span class="lit">7</span><span class="clo">))</span></pre></div>

<p>requires that the evaluation rule be applied to four different combinations.
We can obtain a picture of this process by representing the combination in the
form of a tree, as shown in <a href="#Figure-1_002e1">Figure 1.1</a>.  Each combination is represented
by a node with branches corresponding to the operator and the operands of the
combination stemming from it.  The terminal nodes (that is, nodes with no
branches stemming from them) represent either operators or numbers.  Viewing
evaluation in terms of the tree, we can imagine that the values of the operands
percolate upward, starting from the terminal nodes and then combining at higher
and higher levels.  In general, we shall see that recursion is a very powerful
technique for dealing with hierarchical, treelike objects.  In fact, the
“percolate values upward” form of the evaluation rule is an example of a
general kind of process known as <a id="index-tree-accumulation"></a>
<em>tree accumulation</em>.
</p>
<figure class="float">
<a id="Figure-1_002e1"></a>
<img style="width: 20.38ex; max-width: 100%; display: inline;" src="fig/chap1/Fig1.1g.std.svg" />

<figcaption class="float-caption">
<p><strong>Figure 1.1:</strong> Tree representation, showing the value of each subcombination.</p>
</figcaption>
</figure>

<p>Next, observe that the repeated application of the first step brings us to the
point where we need to evaluate, not combinations, but primitive expressions
such as numerals, built-in operators, or other names.  We take care of the
primitive cases by stipulating that
</p>
<ul>
<li> the values of numerals are the numbers that they name,

</li><li> the values of built-in operators are the machine instruction sequences that
carry out the corresponding operations, and

</li><li> the values of other names are the objects associated with those names in the
environment.

</li></ul>

<p>We may regard the second rule as a special case of the third one by stipulating
that symbols such as <code>+</code> and <code>*</code> are also included in the global
environment, and are associated with the sequences of machine instructions that
are their “values.”  The key point to notice is the role of the environment
in determining the meaning of the symbols in expressions.  In an interactive
language such as Lisp, it is meaningless to speak of the value of an expression
such as <code>(+ x 1)</code> without specifying any information about the environment
that would provide a meaning for the symbol <code>x</code> (or even for the symbol
<code>+</code>).  As we shall see in <a href="Chapter-3.xhtml#Chapter-3">Chapter 3</a>, the general notion of the
environment as providing a context in which evaluation takes place will play an
important role in our understanding of program execution.
</p>
<p>Notice that the evaluation rule given above does not handle definitions.  For
instance, evaluating <code>(define x 3)</code> does not apply <code>define</code> to two
arguments, one of which is the value of the symbol <code>x</code> and the other of
which is 3, since the purpose of the <code>define</code> is precisely to associate
<code>x</code> with a value.  (That is, <code>(define x 3)</code> is not a combination.)
</p>
<p>Such exceptions to the general evaluation rule are called <a id="index-special-forms"></a>
<em>special forms</em>.  
<code>Define</code> is the only example of a special form that we have seen
so far, but we will meet others shortly.  Each special form has its own
evaluation rule. The various kinds of expressions (each with its associated
evaluation rule) constitute the syntax of the programming language.  In
comparison with most other programming languages, Lisp has a very simple
syntax; that is, the evaluation rule for expressions can be described by a
simple general rule together with specialized rules for a small number of
special forms.<sup><a class="footnote_link" id="DOCF11" href="#FOOT11" epub:type="noteref">11</a></sup>
</p>
<a id="g_t1_002e1_002e4"></a>
<a id="Compound-Procedures"></a>
<h4 class="subsection"><span class="secnum">1.1.4</span><span class="sectitle">Compound Procedures</span></h4>

<p>We have identified in Lisp some of the elements that must appear in any
powerful programming language:
</p>
<ul>
<li> Numbers and arithmetic operations are primitive data and procedures.

</li><li> Nesting of combinations provides a means of combining operations.

</li><li> Definitions that associate names with values provide a limited means of
abstraction.

</li></ul>

<p>Now we will learn about <a id="index-procedure-definitions"></a>
<em>procedure definitions</em>, a much more powerful
abstraction technique by which a compound operation can be given a name and
then referred to as a unit.
</p>
<p>We begin by examining how to express the idea of “squaring.”  We might say,
“To square something, multiply it by itself.”  This is expressed in our
language as
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">square x</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> x x</span><span class="clo">))</span></pre></div>

<p>We can understand this in the following way:
</p>
<div class="example">
<pre class="example">(define (square x)    (*       x       x))
  |      |      |      |       |       |
 To square something, multiply it by itself.
</pre></div>

<p>We have here a <a id="index-compound-procedure"></a>
<em>compound procedure</em>, which has been given the name
<code>square</code>.  The procedure represents the operation of multiplying something
by itself.  The thing to be multiplied is given a local name, <code>x</code>, which
plays the same role that a pronoun plays in natural language.  Evaluating the
definition creates this compound procedure and associates it with the name
<code>square</code>.<sup><a class="footnote_link" id="DOCF12" href="#FOOT12" epub:type="noteref">12</a></sup>
</p>
<p>The general form of a procedure definition is
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">⟨</span><var><span class="pln">name</span></var><span class="pln">⟩ ⟨</span><var><span class="pln">formal parameters</span></var><span class="pln">⟩</span><span class="clo">)</span><span class="pln"> ⟨</span><var><span class="pln">body</span></var><span class="pln">⟩</span><span class="clo">)</span></pre></div>

<p>The <code>⟨</code><var>name</var><code>⟩</code> is a symbol to be associated with the procedure definition in
the environment.<sup><a class="footnote_link" id="DOCF13" href="#FOOT13" epub:type="noteref">13</a></sup> The <code>⟨</code><var>formal<!-- /@w --> parameters<!-- /@w --></var><code>⟩</code> 
are the names used within the body of the procedure to refer to
the corresponding arguments of the procedure.  The <code>⟨</code><var>body</var><code>⟩</code> is an
expression that will yield the value of the procedure application when the
formal parameters are replaced by the actual arguments to which the procedure
is applied.<sup><a class="footnote_link" id="DOCF14" href="#FOOT14" epub:type="noteref">14</a></sup>  The <code>⟨</code><var>name</var><code>⟩</code> and
the <code>⟨</code><var>formal parameters</var><code>⟩</code> are grouped within parentheses, just as they
would be in an actual call to the procedure being defined.
</p>
<p>Having defined <code>square</code>, we can now use it:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pln">square </span><span class="lit">21</span><span class="clo">)</span><span class="pln">
</span><i><span class="lit">441</span></i><span class="pln">

</span><span class="opn">(</span><span class="pln">square </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="lit">2</span><span class="pln"> </span><span class="lit">5</span><span class="clo">))</span><span class="pln">
</span><i><span class="lit">49</span></i><span class="pln">

</span><span class="opn">(</span><span class="pln">square </span><span class="opn">(</span><span class="pln">square </span><span class="lit">3</span><span class="clo">))</span><span class="pln">
</span><i><span class="lit">81</span></i>
</pre></div>

<p>We can also use <code>square</code> as a building block in defining other procedures.
For example, <img src="fig/math/ef5ef8f3534bb6cad0d2b5045f813685.svg" class="math-inline" style="height: 1.078em; vertical-align: -0.235em;" alt="\( x^2 + y^2 \)" /> can be expressed as
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pln">square x</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pln">square y</span><span class="clo">))</span></pre></div>

<p>We can easily define a procedure <code>sum-of-squares</code> that, given any two
numbers as arguments, produces the sum of their squares:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">sum-of-squares x y</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pln">square x</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pln">square y</span><span class="clo">)))</span><span class="pln">

</span><span class="opn">(</span><span class="pln">sum-of-squares </span><span class="lit">3</span><span class="pln"> </span><span class="lit">4</span><span class="clo">)</span><span class="pln">
</span><i><span class="lit">25</span></i>
</pre></div>

<p>Now we can use <code>sum-of-squares</code> as a building block in constructing
further procedures:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">f a</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">sum-of-squares </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> a </span><span class="lit">1</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> a </span><span class="lit">2</span><span class="clo">)))</span><span class="pln">

</span><span class="opn">(</span><span class="pln">f </span><span class="lit">5</span><span class="clo">)</span><span class="pln">
</span><i><span class="lit">136</span></i>
</pre></div>

<p>Compound procedures are used in exactly the same way as primitive procedures.
Indeed, one could not tell by looking at the definition of
<code>sum-of-squares</code> given above whether <code>square</code> was built into the
interpreter, like <code>+</code> and <code>*</code>, or defined as a compound procedure.
</p>
<a id="g_t1_002e1_002e5"></a>
<a id="The-Substitution-Model-for-Procedure-Application"></a>
<h4 class="subsection"><span class="secnum">1.1.5</span><span class="sectitle">The Substitution Model for Procedure Application</span></h4>

<p>To evaluate a combination whose operator names a compound procedure, the
interpreter follows much the same process as for combinations whose operators
name primitive procedures, which we described in <a href="#g_t1_002e1_002e3">1.1.3</a>.  That is,
the interpreter evaluates the elements of the combination and applies the
procedure (which is the value of the operator of the combination) to the
arguments (which are the values of the operands of the combination).
</p>
<p>We can assume that the mechanism for applying primitive procedures to arguments
is built into the interpreter.  For compound procedures, the application
process is as follows:
</p>
<blockquote>
<p>To apply a compound procedure to arguments, evaluate the body of the procedure
with each formal parameter replaced by the corresponding argument.
</p></blockquote>

<p>To illustrate this process, let’s evaluate the combination
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pln">f </span><span class="lit">5</span><span class="clo">)</span></pre></div>

<p>where <code>f</code> is the procedure defined in <a href="#g_t1_002e1_002e4">1.1.4</a>.  We begin by
retrieving the body of <code>f</code>:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pln">sum-of-squares </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> a </span><span class="lit">1</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> a </span><span class="lit">2</span><span class="clo">))</span></pre></div>

<p>Then we replace the formal parameter <code>a</code> by the argument 5:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pln">sum-of-squares </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="lit">5</span><span class="pln"> </span><span class="lit">1</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="lit">5</span><span class="pln"> </span><span class="lit">2</span><span class="clo">))</span></pre></div>

<p>Thus the problem reduces to the evaluation of a combination with two operands
and an operator <code>sum-of-squares</code>.  Evaluating this combination involves
three subproblems.  We must evaluate the operator to get the procedure to be
applied, and we must evaluate the operands to get the arguments.  Now <code>(+
5 1)</code> produces 6 and <code>(* 5 2)</code> produces 10, so we must apply the
<code>sum-of-squares</code> procedure to 6 and 10.  These values are substituted for
the formal parameters <code>x</code> and <code>y</code> in the body of
<code>sum-of-squares</code>, reducing the expression to
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pln">square </span><span class="lit">6</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pln">square </span><span class="lit">10</span><span class="clo">))</span></pre></div>

<p>If we use the definition of <code>square</code>, this reduces to
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="lit">6</span><span class="pln"> </span><span class="lit">6</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="lit">10</span><span class="pln"> </span><span class="lit">10</span><span class="clo">))</span></pre></div>

<p>which reduces by multiplication to
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="lit">36</span><span class="pln"> </span><span class="lit">100</span><span class="clo">)</span></pre></div>

<p>and finally to
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="lit">136</span></pre></div>

<p>The process we have just described is called the <a id="index-substitution-model"></a>
<em>substitution model</em>
for procedure application.  It can be taken as a model that determines the
“meaning” of procedure application, insofar as the procedures in this chapter
are concerned.  However, there are two points that should be stressed:
</p>
<ul>
<li> The purpose of the substitution is to help us think about procedure
application, not to provide a description of how the interpreter really works.
Typical interpreters do not evaluate procedure applications by manipulating the
text of a procedure to substitute values for the formal parameters.  In
practice, the “substitution” is accomplished by using a local environment for
the formal parameters.  We will discuss this more fully in <a href="Chapter-3.xhtml#Chapter-3">Chapter 3</a> and
<a href="Chapter-4.xhtml#Chapter-4">Chapter 4</a> when we examine the implementation of an interpreter in detail.

</li><li> Over the course of this book, we will present a sequence of increasingly
elaborate models of how interpreters work, culminating with a complete
implementation of an interpreter and compiler in <a href="Chapter-5.xhtml#Chapter-5">Chapter 5</a>.  The
substitution model is only the first of these models—a way to get started
thinking formally about the evaluation process.  In general, when modeling
phenomena in science and engineering, we begin with simplified, incomplete
models.  As we examine things in greater detail, these simple models become
inadequate and must be replaced by more refined models.  The substitution model
is no exception.  In particular, when we address in <a href="Chapter-3.xhtml#Chapter-3">Chapter 3</a> the use of
procedures with “mutable data,” we will see that the substitution model
breaks down and must be replaced by a more complicated model of procedure
application.<sup><a class="footnote_link" id="DOCF15" href="#FOOT15" epub:type="noteref">15</a></sup>

</li></ul>

<a id="Applicative-order-versus-normal-order"></a>
<h5 class="subsubheading">Applicative order versus normal order</h5>

<p>According to the description of evaluation given in <a href="#g_t1_002e1_002e3">1.1.3</a>, the
interpreter first evaluates the operator and operands and then applies the
resulting procedure to the resulting arguments.  This is not the only way to
perform evaluation.  An alternative evaluation model would not evaluate the
operands until their values were needed.  Instead it would first substitute
operand expressions for parameters until it obtained an expression involving
only primitive operators, and would then perform the evaluation.  If we used
this method, the evaluation of <code>(f 5)</code> would proceed according to the
sequence of expansions
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pln">sum-of-squares </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="lit">5</span><span class="pln"> </span><span class="lit">1</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="lit">5</span><span class="pln"> </span><span class="lit">2</span><span class="clo">))</span><span class="pln">

</span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pln">square </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="lit">5</span><span class="pln"> </span><span class="lit">1</span><span class="clo">))</span><span class="pln"> 
   </span><span class="opn">(</span><span class="pln">square </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="lit">5</span><span class="pln"> </span><span class="lit">2</span><span class="clo">)))</span><span class="pln">

</span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="lit">5</span><span class="pln"> </span><span class="lit">1</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="lit">5</span><span class="pln"> </span><span class="lit">1</span><span class="clo">))</span><span class="pln"> 
   </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="lit">5</span><span class="pln"> </span><span class="lit">2</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="lit">5</span><span class="pln"> </span><span class="lit">2</span><span class="clo">)))</span></pre></div>

<p>followed by the reductions
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="lit">6</span><span class="pln"> </span><span class="lit">6</span><span class="clo">)</span><span class="pln"> 
   </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="lit">10</span><span class="pln"> </span><span class="lit">10</span><span class="clo">))</span><span class="pln">

</span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="lit">36</span><span class="pln"> </span><span class="lit">100</span><span class="clo">)</span><span class="pln">

</span><span class="lit">136</span></pre></div>

<p>This gives the same answer as our previous evaluation model, but the process is
different.  In particular, the evaluations of <code>(+ 5 1)</code> and <code>(* 5 2)</code>
are each performed twice here, corresponding to the reduction of the expression
<code>(* x x)</code> with <code>x</code> replaced respectively by <code>(+ 5 1)</code> and
<code>(* 5 2)</code>.
</p>
<p>This alternative “fully expand and then reduce” evaluation method is known as
<a id="index-normal_002dorder-evaluation"></a>
<em>normal-order evaluation</em>, in contrast to the “evaluate the arguments
and then apply” method that the interpreter actually uses, which is called
<a id="index-applicative_002dorder-evaluation"></a>
<em>applicative-order evaluation</em>.  It can be shown that, for procedure
applications that can be modeled using substitution (including all the
procedures in the first two chapters of this book) and that yield legitimate
values, normal-order and applicative-order evaluation produce the same value.
(See <a href="#Exercise-1_002e5">Exercise 1.5</a> for an instance of an “illegitimate” value where
normal-order and applicative-order evaluation do not give the same result.)
</p>
<p>Lisp uses applicative-order evaluation, partly because of the additional
efficiency obtained from avoiding multiple evaluations of expressions such as
those illustrated with <code>(+ 5 1)</code> and <code>(* 5 2)</code> above and, more
significantly, because normal-order evaluation becomes much more complicated to
deal with when we leave the realm of procedures that can be modeled by
substitution.  On the other hand, normal-order evaluation can be an extremely
valuable tool, and we will investigate some of its implications in <a href="Chapter-3.xhtml#Chapter-3">Chapter 3</a> and <a href="Chapter-4.xhtml#Chapter-4">Chapter 4</a>.<sup><a class="footnote_link" id="DOCF16" href="#FOOT16" epub:type="noteref">16</a></sup>
</p>
<a id="g_t1_002e1_002e6"></a>
<a id="Conditional-Expressions-and-Predicates"></a>
<h4 class="subsection"><span class="secnum">1.1.6</span><span class="sectitle">Conditional Expressions and Predicates</span></h4>

<p>The expressive power of the class of procedures that we can define at this
point is very limited, because we have no way to make tests and to perform
different operations depending on the result of a test.  For instance, we
cannot define a procedure that computes the absolute value of a number by
testing whether the number is positive, negative, or zero and taking different
actions in the different cases according to the rule

<img src="fig/math/827517d0ecd8f031fa58256546889916.svg" class="math-display" style="height: 3.389em;" alt="\[ % :1:&amp;#10; \left|{x}\right| \; = \;   \left\{      \begin{array}{rll}            x &amp;amp; \;\text{if} &amp;amp; x \gt 0, \\        0 &amp;amp; \;\text{if} &amp;amp; x  =  0, \\       -x &amp;amp; \;\text{if} &amp;amp; x \lt 0.      \end{array}    \right.  \]" />

This construct is called a <a id="index-case-analysis"></a>
<em>case analysis</em>, and there is a special form
in Lisp for notating such a case analysis.  It is called <code>cond</code> (which
stands for “conditional”), and it is used as follows:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">abs x</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">cond</span><span class="pln"> </span><span class="opn">((</span><span class="pun">&gt;</span><span class="pln"> x </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> x</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> x </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> </span><span class="lit">0</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">((</span><span class="pun">&lt;</span><span class="pln"> x </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> x</span><span class="clo">))))</span></pre></div>

<p>The general form of a conditional expression is
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">cond</span><span class="pln"> </span><span class="opn">(</span><span class="pln">⟨</span><var><span class="pln">p</span><span class="pun">₁</span></var><span class="pln">⟩ ⟨</span><var><span class="pln">e</span><span class="pun">₁</span></var><span class="pln">⟩</span><span class="clo">)</span><span class="pln">
      </span><span class="opn">(</span><span class="pln">⟨</span><var><span class="pln">p</span><span class="pun">₂</span></var><span class="pln">⟩ ⟨</span><var><span class="pln">e</span><span class="pun">₂</span></var><span class="pln">⟩</span><span class="clo">)</span><span class="pln">
      </span><span class="roman"><span class="pun">…</span></span><span class="pln">
      </span><span class="opn">(</span><span class="pln">⟨</span><var><span class="pln">p</span><span class="pun">ₙ</span></var><span class="pln">⟩ ⟨</span><var><span class="pln">e</span><span class="pun">ₙ</span></var><span class="pln">⟩</span><span class="clo">))</span></pre></div>

<p>consisting of the symbol <code>cond</code> followed by parenthesized pairs of
expressions
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pln">⟨</span><var><span class="pln">p</span></var><span class="pln">⟩ ⟨</span><var><span class="pln">e</span></var><span class="pln">⟩</span><span class="clo">)</span></pre></div>

<p>called <a id="index-clauses"></a>
<em>clauses</em>. The first expression in each pair is a
<a id="index-predicate"></a>
<em>predicate</em>—that is, an expression whose value is interpreted as
either true or false.<sup><a class="footnote_link" id="DOCF17" href="#FOOT17" epub:type="noteref">17</a></sup>
</p>
<p>Conditional expressions are evaluated as follows.  The predicate <img src="fig/math/38ad274b81a729d803d68a92bb79cdb0.svg" class="math-inline" style="height: 0.916em; vertical-align: -0.231em;" alt="\( {⟨p_1⟩} \)" /> is
evaluated first.  If its value is false, then <img src="fig/math/7f4d632268394200967d619e965e2f21.svg" class="math-inline" style="height: 0.916em; vertical-align: -0.231em;" alt="\( {⟨p_2⟩} \)" /> is evaluated.  If
<img src="fig/math/7f4d632268394200967d619e965e2f21.svg" class="math-inline" style="height: 0.916em; vertical-align: -0.231em;" alt="\( {⟨p_2⟩} \)" />’s value is also false, then <img src="fig/math/6d9ec14c119cce8c9035a44acf56d1e8.svg" class="math-inline" style="height: 0.916em; vertical-align: -0.231em;" alt="\( {⟨p_3⟩} \)" /> is evaluated.  This process
continues until a predicate is found whose value is true, in which case the
interpreter returns the value of the corresponding <a id="index-consequent-expression"></a>
<em>consequent expression</em> 
<img src="fig/math/50b0886bc58e9198573af83a2c87dd16.svg" class="math-inline" style="height: 0.843em; vertical-align: -0.159em;" alt="\( {⟨e⟩} \)" /> of the clause as the value of the conditional expression.
If none of the <img src="fig/math/275cb87ec00431e4320aaeb37376bdaa.svg" class="math-inline" style="height: 0.916em; vertical-align: -0.231em;" alt="\( {⟨p⟩} \)" />’s is found to be true, the value of the <code>cond</code> is
undefined.
</p>
<p>The word <a id="index-predicate-1"></a>
<em>predicate</em> is used for procedures that return true or false,
as well as for expressions that evaluate to true or false.  The absolute-value
procedure <code>abs</code> makes use of the primitive predicates <code>&gt;</code>, <code>&lt;</code>,
and <code>=</code>.<sup><a class="footnote_link" id="DOCF18" href="#FOOT18" epub:type="noteref">18</a></sup> These take two numbers as arguments and test whether the first
number is, respectively, greater than, less than, or equal to the second
number, returning true or false accordingly.
</p>
<p>Another way to write the absolute-value procedure is
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">abs x</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">cond</span><span class="pln"> </span><span class="opn">((</span><span class="pun">&lt;</span><span class="pln"> x </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> x</span><span class="clo">))</span><span class="pln">
        </span><span class="opn">(</span><span class="kwd">else</span><span class="pln"> x</span><span class="clo">)))</span></pre></div>

<p>which could be expressed in English as “If <img src="fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( x \)" /> is less than zero return 
<img src="fig/math/9b5fb3541f562e216ec62eb211390ca1.svg" class="math-inline" style="height: 0.519em; vertical-align: -0.008em;" alt="\( {-x} \)" />; otherwise return <img src="fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( x \)" />.”  <code>else</code> is a special symbol that can be
used in place of the <img src="fig/math/275cb87ec00431e4320aaeb37376bdaa.svg" class="math-inline" style="height: 0.916em; vertical-align: -0.231em;" alt="\( {⟨p⟩} \)" /> in the final clause of a <code>cond</code>.  This
causes the <code>cond</code> to return as its value the value of the corresponding
<img src="fig/math/50b0886bc58e9198573af83a2c87dd16.svg" class="math-inline" style="height: 0.843em; vertical-align: -0.159em;" alt="\( {⟨e⟩} \)" /> whenever all previous clauses have been bypassed.  In fact, any
expression that always evaluates to a true value could be used as the <img src="fig/math/275cb87ec00431e4320aaeb37376bdaa.svg" class="math-inline" style="height: 0.916em; vertical-align: -0.231em;" alt="\( {⟨p⟩} \)" />
here.
</p>
<p>Here is yet another way to write the absolute-value procedure:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">abs x</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pun">&lt;</span><span class="pln"> x </span><span class="lit">0</span><span class="clo">)</span><span class="pln">
      </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> x</span><span class="clo">)</span><span class="pln">
      x</span><span class="clo">))</span></pre></div>

<p>This uses the special form <code>if</code>, a restricted type of conditional that can
be used when there are precisely two cases in the case analysis.  The general
form of an <code>if</code> expression is
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">if</span><span class="pln"> ⟨</span><var><span class="pln">predicate</span></var><span class="pln">⟩ ⟨</span><var><span class="pln">consequent</span></var><span class="pln">⟩ ⟨</span><var><span class="pln">alternative</span></var><span class="pln">⟩</span><span class="clo">)</span></pre></div>

<p>To evaluate an <code>if</code> expression, the interpreter starts by evaluating the
<code>⟨</code><var>predicate</var><code>⟩</code> part of the expression.  If the <code>⟨</code><var>predicate</var><code>⟩</code> evaluates
to a true value, the interpreter then evaluates the <code>⟨</code><var>consequent</var><code>⟩</code> and
returns its value.  Otherwise it evaluates the <code>⟨</code><var>alternative</var><code>⟩</code> and returns
its value.<sup><a class="footnote_link" id="DOCF19" href="#FOOT19" epub:type="noteref">19</a></sup>
</p>
<p>In addition to primitive predicates such as <code>&lt;</code>, <code>=</code>, and <code>&gt;</code>,
there are logical composition operations, which enable us to construct compound
predicates.  The three most frequently used are these:
</p>
<ul>
<li> <code>(and ⟨<var>e₁</var>⟩ <span class="roman">…</span> ⟨<var>eₙ</var>⟩)</code>

<p>The interpreter evaluates the expressions <code>⟨</code><var>e</var><code>⟩</code> one at a time, in
left-to-right order.  If any <code>⟨</code><var>e</var><code>⟩</code> evaluates to false, the value of the
<code>and</code> expression is false, and the rest of the <code>⟨</code><var>e</var><code>⟩</code>’s are not
evaluated.  If all <code>⟨</code><var>e</var><code>⟩</code>’s evaluate to true values, the value of the
<code>and</code> expression is the value of the last one.
</p>
</li><li> <code>(or ⟨<var>e₁</var>⟩ <span class="roman">…</span> ⟨<var>eₙ</var>⟩)</code>

<p>The interpreter evaluates the expressions <code>⟨</code><var>e</var><code>⟩</code> one at a time, in
left-to-right order.  If any <code>⟨</code><var>e</var><code>⟩</code> evaluates to a true value, that value is
returned as the value of the <code>or</code> expression, and the rest of the
<code>⟨</code><var>e</var><code>⟩</code>’s are not evaluated.  If all <code>⟨</code><var>e</var><code>⟩</code>’s evaluate to false, the value
of the <code>or</code> expression is false.
</p>
</li><li> <code>(not ⟨<var>e</var>⟩)</code>

<p>The value of a <code>not</code> expression is true when the expression <code>⟨</code><var>e</var><code>⟩</code>
evaluates to false, and false otherwise.
</p>
</li></ul>

<p>Notice that <code>and</code> and <code>or</code> are special forms, not procedures, because
the subexpressions are not necessarily all evaluated.  <code>Not</code> is an
ordinary procedure.
</p>
<p>As an example of how these are used, the condition that a number <img src="fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( x \)" /> be in
the range <img src="fig/math/2998398cd90f9d578c299b935f3b136f.svg" class="math-inline" style="height: 0.652em; vertical-align: -0.009em;" alt="\( 5 &amp;lt; x &amp;lt; 10 \)" /> may be expressed as
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">and</span><span class="pln"> </span><span class="opn">(</span><span class="pun">&gt;</span><span class="pln"> x </span><span class="lit">5</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">&lt;</span><span class="pln"> x </span><span class="lit">10</span><span class="clo">))</span></pre></div>

<p>As another example, we can define a predicate to test whether one number is
greater than or equal to another as 
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pun">&gt;=</span><span class="pln"> x y</span><span class="clo">)</span><span class="pln"> 
  </span><span class="opn">(</span><span class="kwd">or</span><span class="pln"> </span><span class="opn">(</span><span class="pun">&gt;</span><span class="pln"> x y</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">=</span><span class="pln"> x y</span><span class="clo">)))</span></pre></div>

<p>or alternatively as 
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pun">&gt;=</span><span class="pln"> x y</span><span class="clo">)</span><span class="pln"> 
  </span><span class="opn">(</span><span class="pln">not </span><span class="opn">(</span><span class="pun">&lt;</span><span class="pln"> x y</span><span class="clo">)))</span></pre></div>

<blockquote>
<p><strong><a id="Exercise-1_002e1"></a>Exercise 1.1:</strong> Below is a sequence of expressions.
What is the result printed by the interpreter in response to each expression?
Assume that the sequence is to be evaluated in the order in which it is
presented.
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="lit">10</span><span class="pln">
</span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="lit">5</span><span class="pln"> </span><span class="lit">3</span><span class="pln"> </span><span class="lit">4</span><span class="clo">)</span><span class="pln">
</span><span class="opn">(</span><span class="pun">-</span><span class="pln"> </span><span class="lit">9</span><span class="pln"> </span><span class="lit">1</span><span class="clo">)</span><span class="pln">
</span><span class="opn">(</span><span class="pun">/</span><span class="pln"> </span><span class="lit">6</span><span class="pln"> </span><span class="lit">2</span><span class="clo">)</span><span class="pln">
</span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="lit">2</span><span class="pln"> </span><span class="lit">4</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> </span><span class="lit">4</span><span class="pln"> </span><span class="lit">6</span><span class="clo">))</span><span class="pln">
</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> a </span><span class="lit">3</span><span class="clo">)</span><span class="pln">
</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> b </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> a </span><span class="lit">1</span><span class="clo">))</span><span class="pln">
</span><span class="opn">(</span><span class="pun">+</span><span class="pln"> a b </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> a b</span><span class="clo">))</span><span class="pln">
</span><span class="opn">(</span><span class="pun">=</span><span class="pln"> a b</span><span class="clo">)</span><span class="pln">
</span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="kwd">and</span><span class="pln"> </span><span class="opn">(</span><span class="pun">&gt;</span><span class="pln"> b a</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">&lt;</span><span class="pln"> b </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> a b</span><span class="clo">)))</span><span class="pln">
    b
    a</span><span class="clo">)</span><span class="pln">
</span><span class="opn">(</span><span class="kwd">cond</span><span class="pln"> </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> a </span><span class="lit">4</span><span class="clo">)</span><span class="pln"> </span><span class="lit">6</span><span class="clo">)</span><span class="pln">
      </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> b </span><span class="lit">4</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="lit">6</span><span class="pln"> </span><span class="lit">7</span><span class="pln"> a</span><span class="clo">))</span><span class="pln">
      </span><span class="opn">(</span><span class="kwd">else</span><span class="pln"> </span><span class="lit">25</span><span class="clo">))</span><span class="pln">
</span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="lit">2</span><span class="pln"> </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pun">&gt;</span><span class="pln"> b a</span><span class="clo">)</span><span class="pln"> b a</span><span class="clo">))</span><span class="pln">
</span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="opn">(</span><span class="kwd">cond</span><span class="pln"> </span><span class="opn">((</span><span class="pun">&gt;</span><span class="pln"> a b</span><span class="clo">)</span><span class="pln"> a</span><span class="clo">)</span><span class="pln">
         </span><span class="opn">((</span><span class="pun">&lt;</span><span class="pln"> a b</span><span class="clo">)</span><span class="pln"> b</span><span class="clo">)</span><span class="pln">
         </span><span class="opn">(</span><span class="kwd">else</span><span class="pln"> </span><span class="lit">-1</span><span class="clo">))</span><span class="pln">
   </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> a </span><span class="lit">1</span><span class="clo">))</span></pre></div>
</blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e2"></a>Exercise 1.2:</strong> Translate the following expression
into prefix form:

<img src="fig/math/81e37771ed20035fb8d1832c245a99bb.svg" class="math-display" style="height: 2.561em;" alt="\[ % :2:&amp;#10; {\frac{5 + 4 + (2 - (3 - (6 + \frac{4}{5})))}{3(6 - 2)(2 - 7)}.} \]" />

</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e3"></a>Exercise 1.3:</strong> Define a procedure that takes three
numbers as arguments and returns the sum of the squares of the two larger
numbers.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e4"></a>Exercise 1.4:</strong> Observe that our model of
evaluation allows for combinations whose operators are compound expressions.
Use this observation to describe the behavior of the following procedure:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">a-plus-abs-b a b</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">((</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pun">&gt;</span><span class="pln"> b </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="pun">-</span><span class="clo">)</span><span class="pln"> a b</span><span class="clo">))</span></pre></div>
</blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e5"></a>Exercise 1.5:</strong> Ben Bitdiddle has invented a test
to determine whether the interpreter he is faced with is using
applicative-order evaluation or normal-order evaluation.  He defines the
following two procedures:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">p</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pln">p</span><span class="clo">))</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">test x y</span><span class="clo">)</span><span class="pln"> 
  </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pun">=</span><span class="pln"> x </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> 
      </span><span class="lit">0</span><span class="pln"> 
      y</span><span class="clo">))</span></pre></div>

<p>Then he evaluates the expression
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pln">test </span><span class="lit">0</span><span class="pln"> </span><span class="opn">(</span><span class="pln">p</span><span class="clo">))</span></pre></div>

<p>What behavior will Ben observe with an interpreter that uses applicative-order
evaluation?  What behavior will he observe with an interpreter that uses
normal-order evaluation?  Explain your answer.  (Assume that the evaluation
rule for the special form <code>if</code> is the same whether the interpreter is
using normal or applicative order: The predicate expression is evaluated first,
and the result determines whether to evaluate the consequent or the alternative
expression.)
</p></blockquote>

<a id="Sec_002e1_002e1_002e7"></a><a id="g_t1_002e1_002e7"></a>
<a id="Example_003a-Square-Roots-by-Newton_0027s-Method"></a>
<h4 class="subsection"><span class="secnum">1.1.7</span><span class="sectitle">Example: Square Roots by Newton’s Method</span></h4>

<p>Procedures, as introduced above, are much like ordinary mathematical functions.
They specify a value that is determined by one or more parameters.  But there
is an important difference between mathematical functions and computer
procedures.  Procedures must be effective.
</p>
<p>As a case in point, consider the problem of computing square roots.  We can
define the square-root function as

<img src="fig/math/d0666d2646b513c81f28cc983a15579c.svg" class="math-display" style="height: 1.128em;" alt="\[ % :3:&amp;#10; \sqrt{x} \;\; = \;\; {\text{the} \;\; y} \;\; {\text{such that}} \;\; {y \ge 0} \;\; {\text{and} \;\; y^2 = x.} \]" />

This describes a perfectly legitimate mathematical function.  We could use it
to recognize whether one number is the square root of another, or to derive
facts about square roots in general.  On the other hand, the definition does
not describe a procedure.  Indeed, it tells us almost nothing about how to
actually find the square root of a given number.  It will not help matters to
rephrase this definition in pseudo-Lisp:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">sqrt x</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">the y </span><span class="opn">(</span><span class="kwd">and</span><span class="pln"> </span><span class="opn">(</span><span class="pun">&gt;=</span><span class="pln"> y </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> 
              </span><span class="opn">(</span><span class="pun">=</span><span class="pln"> </span><span class="opn">(</span><span class="pln">square y</span><span class="clo">)</span><span class="pln"> x</span><span class="clo">))))</span></pre></div>

<p>This only begs the question.
</p>
<p>The contrast between function and procedure is a reflection of the general
distinction between describing properties of things and describing how to do
things, or, as it is sometimes referred to, the distinction between declarative
knowledge and imperative knowledge.  In mathematics we are usually concerned
with declarative (what is) descriptions, whereas in computer science we are
usually concerned with imperative (how to) descriptions.<sup><a class="footnote_link" id="DOCF20" href="#FOOT20" epub:type="noteref">20</a></sup>
</p>
<p>How does one compute square roots?  The most common way is to use Newton’s
method of successive approximations, which says that whenever we have a guess
<img src="fig/math/05e4cdb2f26a4f66b68c167423907fea.svg" class="math-inline" style="height: 0.669em; vertical-align: -0.235em;" alt="\( y \)" /> for the value of the square root of a number <img src="fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( x \)" />, we can perform a
simple manipulation to get a better guess (one closer to the actual square
root) by averaging <img src="fig/math/05e4cdb2f26a4f66b68c167423907fea.svg" class="math-inline" style="height: 0.669em; vertical-align: -0.235em;" alt="\( y \)" /> with <img src="fig/math/c243e54e1f37c985a92584d386f5fc01.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.229em;" alt="\( {x / y} \)" />.<sup><a class="footnote_link" id="DOCF21" href="#FOOT21" epub:type="noteref">21</a></sup> 
For example, we can compute the square root of 2 as follows.
Suppose our initial guess is 1:
</p>
<div class="example">
<pre class="example">Guess     Quotient      Average

1         (2/1)  = 2    ((2 + 1)/2)  = 1.5

1.5       (2/1.5)       ((1.3333 + 1.5)/2)
            = 1.3333      = 1.4167

1.4167    (2/1.4167)    ((1.4167 + 1.4118)/2) 
            = 1.4118      = 1.4142  

1.4142    ...           ...
</pre></div>

<p>Continuing this process, we obtain better and better approximations to the
square root.
</p>
<p>Now let’s formalize the process in terms of procedures.  We start with a value
for the radicand (the number whose square root we are trying to compute) and a
value for the guess.  If the guess is good enough for our purposes, we are
done; if not, we must repeat the process with an improved guess.  We write this
basic strategy as a procedure:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">sqrt-iter guess x</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pln">good-enough? guess x</span><span class="clo">)</span><span class="pln">
      guess
      </span><span class="opn">(</span><span class="pln">sqrt-iter </span><span class="opn">(</span><span class="pln">improve guess x</span><span class="clo">)</span><span class="pln"> x</span><span class="clo">)))</span></pre></div>

<p>A guess is improved by averaging it with the quotient of the radicand and the
old guess:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">improve guess x</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">average guess </span><span class="opn">(</span><span class="pun">/</span><span class="pln"> x guess</span><span class="clo">)))</span></pre></div>

<p>where
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">average x y</span><span class="clo">)</span><span class="pln"> 
  </span><span class="opn">(</span><span class="pun">/</span><span class="pln"> </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> x y</span><span class="clo">)</span><span class="pln"> </span><span class="lit">2</span><span class="clo">))</span></pre></div>

<p>We also have to say what we mean by “good enough.”  The following will do for
illustration, but it is not really a very good test.  (See <a href="#Exercise-1_002e7">Exercise 1.7</a>.)  
The idea is to improve the answer until it is close
enough so that its square differs from the radicand by less than a
predetermined tolerance (here 0.001):<sup><a class="footnote_link" id="DOCF22" href="#FOOT22" epub:type="noteref">22</a></sup>
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">good-enough? guess x</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pun">&lt;</span><span class="pln"> </span><span class="opn">(</span><span class="pln">abs </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> </span><span class="opn">(</span><span class="pln">square guess</span><span class="clo">)</span><span class="pln"> x</span><span class="clo">))</span><span class="pln"> </span><span class="lit">0.001</span><span class="clo">))</span></pre></div>

<p>Finally, we need a way to get started.  For instance, we can always guess that
the square root of any number is 1:<sup><a class="footnote_link" id="DOCF23" href="#FOOT23" epub:type="noteref">23</a></sup>
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">sqrt x</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">sqrt-iter </span><span class="lit">1.0</span><span class="pln"> x</span><span class="clo">))</span></pre></div>

<p>If we type these definitions to the interpreter, we can use <code>sqrt</code> just as
we can use any procedure:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pln">sqrt </span><span class="lit">9</span><span class="clo">)</span><span class="pln">
</span><i><span class="lit">3.00009155413138</span></i><span class="pln">

</span><span class="opn">(</span><span class="pln">sqrt </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="lit">100</span><span class="pln"> </span><span class="lit">37</span><span class="clo">))</span><span class="pln">
</span><i><span class="lit">11.704699917758145</span></i><span class="pln">

</span><span class="opn">(</span><span class="pln">sqrt </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pln">sqrt </span><span class="lit">2</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pln">sqrt </span><span class="lit">3</span><span class="clo">)))</span><span class="pln">
</span><i><span class="lit">1.7739279023207892</span></i><span class="pln">

</span><span class="opn">(</span><span class="pln">square </span><span class="opn">(</span><span class="pln">sqrt </span><span class="lit">1000</span><span class="clo">))</span><span class="pln">
</span><i><span class="lit">1000.000369924366</span></i>
</pre></div>

<p>The <code>sqrt</code> program also illustrates that the simple procedural language we
have introduced so far is sufficient for writing any purely numerical program
that one could write in, say, C or Pascal.  This might seem surprising, since
we have not included in our language any iterative (looping) constructs that
direct the computer to do something over and over again.  <code>Sqrt-iter</code>, on
the other hand, demonstrates how iteration can be accomplished using no special
construct other than the ordinary ability to call a procedure.<sup><a class="footnote_link" id="DOCF24" href="#FOOT24" epub:type="noteref">24</a></sup>
</p>
<blockquote>
<p><strong><a id="Exercise-1_002e6"></a>Exercise 1.6:</strong> Alyssa P. Hacker doesn’t see why
<code>if</code> needs to be provided as a special form.  “Why can’t I just define it
as an ordinary procedure in terms of <code>cond</code>?” she asks.  Alyssa’s friend
Eva Lu Ator claims this can indeed be done, and she defines a new version of
<code>if</code>:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">new-if predicate 
                then-clause 
                else-clause</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">cond</span><span class="pln"> </span><span class="opn">(</span><span class="pln">predicate then-clause</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">(</span><span class="kwd">else</span><span class="pln"> else-clause</span><span class="clo">)))</span></pre></div>

<p>Eva demonstrates the program for Alyssa:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pln">new-if </span><span class="opn">(</span><span class="pun">=</span><span class="pln"> </span><span class="lit">2</span><span class="pln"> </span><span class="lit">3</span><span class="clo">)</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="lit">5</span><span class="clo">)</span><span class="pln">
</span><i><span class="lit">5</span></i><span class="pln">

</span><span class="opn">(</span><span class="pln">new-if </span><span class="opn">(</span><span class="pun">=</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="lit">1</span><span class="clo">)</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="lit">5</span><span class="clo">)</span><span class="pln">
</span><i><span class="lit">0</span></i>
</pre></div>

<p>Delighted, Alyssa uses <code>new-if</code> to rewrite the square-root program:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">sqrt-iter guess x</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">new-if </span><span class="opn">(</span><span class="pln">good-enough? guess x</span><span class="clo">)</span><span class="pln">
          guess
          </span><span class="opn">(</span><span class="pln">sqrt-iter </span><span class="opn">(</span><span class="pln">improve guess x</span><span class="clo">)</span><span class="pln"> x</span><span class="clo">)))</span></pre></div>

<p>What happens when Alyssa attempts to use this to compute square roots?
Explain.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e7"></a>Exercise 1.7:</strong> The <code>good-enough?</code> test used
in computing square roots will not be very effective for finding the square
roots of very small numbers.  Also, in real computers, arithmetic operations
are almost always performed with limited precision.  This makes our test
inadequate for very large numbers.  Explain these statements, with examples
showing how the test fails for small and large numbers.  An alternative
strategy for implementing <code>good-enough?</code> is to watch how <code>guess</code>
changes from one iteration to the next and to stop when the change is a very
small fraction of the guess.  Design a square-root procedure that uses this
kind of end test.  Does this work better for small and large numbers?
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e8"></a>Exercise 1.8:</strong> Newton’s method for cube roots is
based on the fact that if <img src="fig/math/05e4cdb2f26a4f66b68c167423907fea.svg" class="math-inline" style="height: 0.669em; vertical-align: -0.235em;" alt="\( y \)" /> is an approximation to the cube root of <img src="fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( x \)" />,
then a better approximation is given by the value

<img src="fig/math/f473edbf6a444add19b682cd2e3ad814.svg" class="math-display" style="height: 2.220em;" alt="\[ % :4:&amp;#10;  {\frac{{x / y^2} + 2y}{3}.} \]" />

Use this formula to implement a cube-root procedure analogous to the
square-root procedure.  (In <a href="1_002e3.xhtml#g_t1_002e3_002e4">1.3.4</a> we will see how to implement
Newton’s method in general as an abstraction of these square-root and cube-root
procedures.)
</p></blockquote>

<a id="g_t1_002e1_002e8"></a>
<a id="Procedures-as-Black_002dBox-Abstractions"></a>
<h4 class="subsection"><span class="secnum">1.1.8</span><span class="sectitle">Procedures as Black-Box Abstractions</span></h4>

<p><code>Sqrt</code> is our first example of a process defined by a set of mutually
defined procedures.  Notice that the definition of <code>sqrt-iter</code> is
<a id="index-recursive-1"></a>
<em>recursive</em>; that is, the procedure is defined in terms of itself.  The
idea of being able to define a procedure in terms of itself may be disturbing;
it may seem unclear how such a “circular” definition could make sense at all,
much less specify a well-defined process to be carried out by a computer.  This
will be addressed more carefully in <a href="1_002e2.xhtml#g_t1_002e2">1.2</a>.  But first let’s
consider some other important points illustrated by the <code>sqrt</code> example.
</p>
<p>Observe that the problem of computing square roots breaks up naturally into a
number of subproblems: how to tell whether a guess is good enough, how to
improve a guess, and so on.  Each of these tasks is accomplished by a separate
procedure.  The entire <code>sqrt</code> program can be viewed as a cluster of
procedures (shown in <a href="#Figure-1_002e2">Figure 1.2</a>) that mirrors the decomposition of the
problem into subproblems.
</p>
<figure class="float">
<a id="Figure-1_002e2"></a>
<img style="width: 34.97ex; max-width: 100%; display: inline;" src="fig/chap1/Fig1.2.std.svg" />

<figcaption class="float-caption">
<p><strong>Figure 1.2:</strong> Procedural decomposition of the <code>sqrt</code> program.</p>
</figcaption>
</figure>

<p>The importance of this decomposition strategy is not simply that one is
dividing the program into parts.  After all, we could take any large program
and divide it into parts—the first ten lines, the next ten lines, the next
ten lines, and so on.  Rather, it is crucial that each procedure accomplishes
an identifiable task that can be used as a module in defining other procedures.
For example, when we define the <code>good-enough?</code> procedure in terms of
<code>square</code>, we are able to regard the <code>square</code> procedure as a “black
box.”  We are not at that moment concerned with <em>how</em> the procedure
computes its result, only with the fact that it computes the square.  The
details of how the square is computed can be suppressed, to be considered at a
later time.  Indeed, as far as the <code>good-enough?</code> procedure is concerned,
<code>square</code> is not quite a procedure but rather an abstraction of a
procedure, a so-called <a id="index-procedural-abstraction"></a>
<em>procedural abstraction</em>.  At this level of
abstraction, any procedure that computes the square is equally good.
</p>
<p>Thus, considering only the values they return, the following two procedures for
squaring a number should be indistinguishable.  Each takes a numerical argument
and produces the square of that number as the value.<sup><a class="footnote_link" id="DOCF25" href="#FOOT25" epub:type="noteref">25</a></sup>
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">square x</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> x x</span><span class="clo">))</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">square x</span><span class="clo">)</span><span class="pln"> 
  </span><span class="opn">(</span><span class="pln">exp </span><span class="opn">(</span><span class="pln">double </span><span class="opn">(</span><span class="pln">log x</span><span class="clo">))))</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">double x</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> x x</span><span class="clo">))</span></pre></div>

<p>So a procedure definition should be able to suppress detail.  The users of the
procedure may not have written the procedure themselves, but may have obtained
it from another programmer as a black box.  A user should not need to know how
the procedure is implemented in order to use it.
</p>
<a id="Local-names"></a>
<h5 class="subsubheading">Local names</h5>

<p>One detail of a procedure’s implementation that should not matter to the user
of the procedure is the implementer’s choice of names for the procedure’s
formal parameters.  Thus, the following procedures should not be
distinguishable:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">square x</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> x x</span><span class="clo">))</span><span class="pln">
</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">square y</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> y y</span><span class="clo">))</span></pre></div>

<p>This principle—that the meaning of a procedure should be independent of the
parameter names used by its author—seems on the surface to be self-evident,
but its consequences are profound.  The simplest consequence is that the
parameter names of a procedure must be local to the body of the procedure.  For
example, we used <code>square</code> in the definition of <code>good-enough?</code> in our
square-root procedure:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">good-enough? guess x</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pun">&lt;</span><span class="pln"> </span><span class="opn">(</span><span class="pln">abs </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> </span><span class="opn">(</span><span class="pln">square guess</span><span class="clo">)</span><span class="pln"> x</span><span class="clo">))</span><span class="pln"> </span><span class="lit">0.001</span><span class="clo">))</span></pre></div>

<p>The intention of the author of <code>good-enough?</code> is to determine if the
square of the first argument is within a given tolerance of the second
argument.  We see that the author of <code>good-enough?</code> used the name
<code>guess</code> to refer to the first argument and <code>x</code> to refer to the second
argument.  The argument of <code>square</code> is <code>guess</code>.  If the author of
<code>square</code> used <code>x</code> (as above) to refer to that argument, we see that
the <code>x</code> in <code>good-enough?</code> must be a different <code>x</code> than the one
in <code>square</code>.  Running the procedure <code>square</code> must not affect the
value of <code>x</code> that is used by <code>good-enough?</code>, because that value of
<code>x</code> may be needed by <code>good-enough?</code> after <code>square</code> is done
computing.
</p>
<p>If the parameters were not local to the bodies of their respective procedures,
then the parameter <code>x</code> in <code>square</code> could be confused with the
parameter <code>x</code> in <code>good-enough?</code>, and the behavior of
<code>good-enough?</code> would depend upon which version of <code>square</code> we used.
Thus, <code>square</code> would not be the black box we desired.
</p>
<p>A formal parameter of a procedure has a very special role in the procedure
definition, in that it doesn’t matter what name the formal parameter has.  Such
a name is called a <a id="index-bound-variable"></a>
<em>bound variable</em>, and we say that the procedure
definition <a id="index-binds"></a>
<em>binds</em> its formal parameters.  The meaning of a procedure
definition is unchanged if a bound variable is consistently renamed throughout
the definition.<sup><a class="footnote_link" id="DOCF26" href="#FOOT26" epub:type="noteref">26</a></sup>  If a variable is not bound, we say that it is <a id="index-free"></a>
<em>free</em>.
The set of expressions for which a binding defines a name is called the
<a id="index-scope"></a>
<em>scope</em> of that name.  In a procedure definition, the bound variables
declared as the formal parameters of the procedure have the body of the
procedure as their scope.
</p>
<p>In the definition of <code>good-enough?</code> above, <code>guess</code> and <code>x</code> are
bound variables but <code>&lt;</code>, <code>-</code>, <code>abs</code>, and <code>square</code> are free.
The meaning of <code>good-enough?</code> should be independent of the names we choose
for <code>guess</code> and <code>x</code> so long as they are distinct and different from
<code>&lt;</code>, <code>-</code>, <code>abs</code>, and <code>square</code>.  (If we renamed <code>guess</code>
to <code>abs</code> we would have introduced a bug by <a id="index-capturing"></a>
<em>capturing</em> the
variable <code>abs</code>.  It would have changed from free to bound.)  The meaning
of <code>good-enough?</code> is not independent of the names of its free variables,
however.  It surely depends upon the fact (external to this definition) that
the symbol <code>abs</code> names a procedure for computing the absolute value of a
number.  <code>good-enough?</code> will compute a different function if we substitute
<code>cos</code> for <code>abs</code> in its definition.
</p>
<a id="Internal-definitions-and-block-structure"></a>
<h5 class="subsubheading">Internal definitions and block structure</h5>

<p>We have one kind of name isolation available to us so far: The formal
parameters of a procedure are local to the body of the procedure.  The
square-root program illustrates another way in which we would like to control
the use of names.  The existing program consists of separate procedures:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">sqrt x</span><span class="clo">)</span><span class="pln"> 
  </span><span class="opn">(</span><span class="pln">sqrt-iter </span><span class="lit">1.0</span><span class="pln"> x</span><span class="clo">))</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">sqrt-iter guess x</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pln">good-enough? guess x</span><span class="clo">)</span><span class="pln">
      guess
      </span><span class="opn">(</span><span class="pln">sqrt-iter </span><span class="opn">(</span><span class="pln">improve guess x</span><span class="clo">)</span><span class="pln"> x</span><span class="clo">)))</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">good-enough? guess x</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pun">&lt;</span><span class="pln"> </span><span class="opn">(</span><span class="pln">abs </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> </span><span class="opn">(</span><span class="pln">square guess</span><span class="clo">)</span><span class="pln"> x</span><span class="clo">))</span><span class="pln"> </span><span class="lit">0.001</span><span class="clo">))</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">improve guess x</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">average guess </span><span class="opn">(</span><span class="pun">/</span><span class="pln"> x guess</span><span class="clo">)))</span></pre></div>

<p>The problem with this program is that the only procedure that is important to
users of <code>sqrt</code> is <code>sqrt</code>.  The other procedures (<code>sqrt-iter</code>,
<code>good-enough?</code>, and <code>improve</code>) only clutter up their minds.  They may
not define any other procedure called <code>good-enough?</code> as part of another
program to work together with the square-root program, because <code>sqrt</code>
needs it.  The problem is especially severe in the construction of large
systems by many separate programmers.  For example, in the construction of a
large library of numerical procedures, many numerical functions are computed as
successive approximations and thus might have procedures named
<code>good-enough?</code> and <code>improve</code> as auxiliary procedures.  We would like
to localize the subprocedures, hiding them inside <code>sqrt</code> so that
<code>sqrt</code> could coexist with other successive approximations, each having its
own private <code>good-enough?</code> procedure.  To make this possible, we allow a
procedure to have internal definitions that are local to that procedure.  For
example, in the square-root problem we can write
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">sqrt x</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">good-enough? guess x</span><span class="clo">)</span><span class="pln">
    </span><span class="opn">(</span><span class="pun">&lt;</span><span class="pln"> </span><span class="opn">(</span><span class="pln">abs </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> </span><span class="opn">(</span><span class="pln">square guess</span><span class="clo">)</span><span class="pln"> x</span><span class="clo">))</span><span class="pln"> </span><span class="lit">0.001</span><span class="clo">))</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">improve guess x</span><span class="clo">)</span><span class="pln">
    </span><span class="opn">(</span><span class="pln">average guess </span><span class="opn">(</span><span class="pun">/</span><span class="pln"> x guess</span><span class="clo">)))</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">sqrt-iter guess x</span><span class="clo">)</span><span class="pln">
    </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pln">good-enough? guess x</span><span class="clo">)</span><span class="pln">
        guess
        </span><span class="opn">(</span><span class="pln">sqrt-iter </span><span class="opn">(</span><span class="pln">improve guess x</span><span class="clo">)</span><span class="pln"> x</span><span class="clo">)))</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">sqrt-iter </span><span class="lit">1.0</span><span class="pln"> x</span><span class="clo">))</span></pre></div>

<p>Such nesting of definitions, called <a id="index-block-structure"></a>
<em>block structure</em>, is basically the
right solution to the simplest name-packaging problem.  But there is a better
idea lurking here.  In addition to internalizing the definitions of the
auxiliary procedures, we can simplify them.  Since <code>x</code> is bound in the
definition of <code>sqrt</code>, the procedures <code>good-enough?</code>, <code>improve</code>,
and <code>sqrt-iter</code>, which are defined internally to <code>sqrt</code>, are in the
scope of <code>x</code>.  Thus, it is not necessary to pass <code>x</code> explicitly to
each of these procedures.  Instead, we allow <code>x</code> to be a free variable in
the internal definitions, as shown below. Then <code>x</code> gets its value from the
argument with which the enclosing procedure <code>sqrt</code> is called.  This
discipline is called <a id="index-lexical-scoping"></a>
<em>lexical scoping</em>.<sup><a class="footnote_link" id="DOCF27" href="#FOOT27" epub:type="noteref">27</a></sup>
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">sqrt x</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">good-enough? guess</span><span class="clo">)</span><span class="pln">
    </span><span class="opn">(</span><span class="pun">&lt;</span><span class="pln"> </span><span class="opn">(</span><span class="pln">abs </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> </span><span class="opn">(</span><span class="pln">square guess</span><span class="clo">)</span><span class="pln"> x</span><span class="clo">))</span><span class="pln"> </span><span class="lit">0.001</span><span class="clo">))</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">improve guess</span><span class="clo">)</span><span class="pln">
    </span><span class="opn">(</span><span class="pln">average guess </span><span class="opn">(</span><span class="pun">/</span><span class="pln"> x guess</span><span class="clo">)))</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">sqrt-iter guess</span><span class="clo">)</span><span class="pln">
    </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pln">good-enough? guess</span><span class="clo">)</span><span class="pln">
        guess
        </span><span class="opn">(</span><span class="pln">sqrt-iter </span><span class="opn">(</span><span class="pln">improve guess</span><span class="clo">))))</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">sqrt-iter </span><span class="lit">1.0</span><span class="clo">))</span></pre></div>

<p>We will use block structure extensively to help us break up large
programs into tractable pieces.<sup><a class="footnote_link" id="DOCF28" href="#FOOT28" epub:type="noteref">28</a></sup>
The idea of block structure originated with the programming language
Algol 60. It appears in most advanced programming languages and is an
important tool for helping to organize the construction of large
programs.
</p>
<div class="footnote">
<h4 class="footnotes-heading">Footnotes</h4>

<div><p id="FOOT4" epub:type="footnote"><a class="footnote_backlink" href="#DOCF4"><sup>4</sup></a>
The characterization of numbers as “simple data” is a barefaced bluff.  In fact, the treatment of numbers is one of the trickiest and most confusing aspects of any programming language.  Some typical issues involved are these: Some computer systems distinguish <a id="index-integers"></a> <em>integers</em>, such as 2, from <a id="index-real-numbers"></a> <em>real numbers</em>, such as 2.71.  Is the real number 2.00 different from the integer 2?  Are the arithmetic operations used for integers the same as the operations used for real numbers?  Does 6 divided by 2 produce 3, or 3.0?  How large a number can we represent?  How many decimal places of accuracy can we represent?  Is the range of integers the same as the range of real numbers?  Above and beyond these questions, of course, lies a collection of issues concerning roundoff and truncation errors—the entire science of numerical analysis.  Since our focus in this book is on large-scale program design rather than on numerical techniques, we are going to ignore these problems.  The numerical examples in this chapter will exhibit the usual roundoff behavior that one observes when using arithmetic operations that preserve a limited number of decimal places of accuracy in noninteger operations.</p>
</div>
<div><p id="FOOT5" epub:type="footnote"><a class="footnote_backlink" href="#DOCF5"><sup>5</sup></a>
Throughout this book, when we wish to emphasize the distinction between the input typed by the user and the response printed by the interpreter, we will show the latter in slanted characters.</p>
</div>
<div><p id="FOOT6" epub:type="footnote"><a class="footnote_backlink" href="#DOCF6"><sup>6</sup></a>
Lisp systems typically provide features to aid the user in formatting expressions.  Two especially useful features are one that automatically indents to the proper pretty-print position whenever a new line is started and one that highlights the matching left parenthesis whenever a right parenthesis is typed.</p>
</div>
<div><p id="FOOT7" epub:type="footnote"><a class="footnote_backlink" href="#DOCF7"><sup>7</sup></a>
Lisp obeys the convention that every expression has a value. This convention, together with the old reputation of Lisp as an inefficient language, is the source of the quip by Alan Perlis (paraphrasing Oscar Wilde) that “Lisp programmers know the value of everything but the cost of nothing.”</p>
</div>
<div><p id="FOOT8" epub:type="footnote"><a class="footnote_backlink" href="#DOCF8"><sup>8</sup></a>
In this book, we do not show the interpreter’s response to evaluating definitions, since this is highly implementation-dependent.</p>
</div>
<div><p id="FOOT9" epub:type="footnote"><a class="footnote_backlink" href="#DOCF9"><sup>9</sup></a>
<a href="Chapter-3.xhtml#Chapter-3">Chapter 3</a> will show that this notion of environment is crucial, both for understanding how the interpreter works and for implementing interpreters.</p>
</div>
<div><p id="FOOT10" epub:type="footnote"><a class="footnote_backlink" href="#DOCF10"><sup>10</sup></a>
It may seem strange that the evaluation rule says, as part of the first step, that we should evaluate the leftmost element of a combination, since at this point that can only be an operator such as <code>+</code> or <code>*</code> representing a built-in primitive procedure such as addition or multiplication.  We will see later that it is useful to be able to work with combinations whose operators are themselves compound expressions.</p>
</div>
<div><p id="FOOT11" epub:type="footnote"><a class="footnote_backlink" href="#DOCF11"><sup>11</sup></a>
Special syntactic forms that are simply convenient alternative surface structures for things that can be written in more uniform ways are sometimes called <a id="index-syntactic-sugar"></a> <em>syntactic sugar</em>, to use a phrase coined by Peter Landin.  In comparison with users of other languages, Lisp programmers, as a rule, are less concerned with matters of syntax.  (By contrast, examine any Pascal manual and notice how much of it is devoted to descriptions of syntax.)  This disdain for syntax is due partly to the flexibility of Lisp, which makes it easy to change surface syntax, and partly to the observation that many “convenient” syntactic constructs, which make the language less uniform, end up causing more trouble than they are worth when programs become large and complex.  In the words of Alan Perlis, “Syntactic sugar causes cancer of the semicolon.”</p>
</div>
<div><p id="FOOT12" epub:type="footnote"><a class="footnote_backlink" href="#DOCF12"><sup>12</sup></a>
Observe that there are two different operations being combined here: we are creating the procedure, and we are giving it the name <code>square</code>.  It is possible, indeed important, to be able to separate these two notions—to create procedures without naming them, and to give names to procedures that have already been created.  We will see how to do this in <a href="1_002e3.xhtml#g_t1_002e3_002e2">1.3.2</a>.</p>
</div>
<div><p id="FOOT13" epub:type="footnote"><a class="footnote_backlink" href="#DOCF13"><sup>13</sup></a>
Throughout this book, we will describe the general syntax of expressions by using italic symbols delimited by angle brackets—e.g., <code>⟨</code><var>name</var><code>⟩</code>—to denote the “slots” in the expression to be filled in when such an expression is actually used.</p>
</div>
<div><p id="FOOT14" epub:type="footnote"><a class="footnote_backlink" href="#DOCF14"><sup>14</sup></a>
More generally, the body of the procedure can be a sequence of expressions.  In this case, the interpreter evaluates each expression in the sequence in turn and returns the value of the final expression as the value of the procedure application.</p>
</div>
<div><p id="FOOT15" epub:type="footnote"><a class="footnote_backlink" href="#DOCF15"><sup>15</sup></a>
Despite the simplicity of the substitution idea, it turns out to be surprisingly complicated to give a rigorous mathematical definition of the substitution process.  The problem arises from the possibility of confusion between the names used for the formal parameters of a procedure and the (possibly identical) names used in the expressions to which the procedure may be applied.  Indeed, there is a long history of erroneous definitions of <a id="index-substitution"></a> <em>substitution</em> in the literature of logic and programming semantics. See <a href="References.xhtml#Stoy-1977">Stoy 1977</a> for a careful discussion of substitution.</p>
</div>
<div><p id="FOOT16" epub:type="footnote"><a class="footnote_backlink" href="#DOCF16"><sup>16</sup></a>
In <a href="Chapter-3.xhtml#Chapter-3">Chapter 3</a> we will introduce <a id="index-stream-processing"></a> <em>stream processing</em>, which is a way of handling apparently “infinite” data structures by incorporating a limited form of normal-order evaluation.  In <a href="4_002e2.xhtml#g_t4_002e2">4.2</a> we will modify the Scheme interpreter to produce a normal-order variant of Scheme.</p>
</div>
<div><p id="FOOT17" epub:type="footnote"><a class="footnote_backlink" href="#DOCF17"><sup>17</sup></a>
“Interpreted as either true or false” means this: In Scheme, there are two distinguished values that are denoted by the constants <code>#t</code> and <code>#f</code>.  When the interpreter checks a predicate’s value, it interprets <code>#f</code> as false.  Any other value is treated as true. (Thus, providing <code>#t</code> is logically unnecessary, but it is convenient.)  In this book we will use names <code>true</code> and <code>false</code>, which are associated with the values <code>#t</code> and <code>#f</code> respectively.</p>
</div>
<div><p id="FOOT18" epub:type="footnote"><a class="footnote_backlink" href="#DOCF18"><sup>18</sup></a>
<code>Abs</code> also uses the “minus” operator <code>-</code>, which, when used with a single operand, as in <code>(- x)</code>, indicates negation.</p>
</div>
<div><p id="FOOT19" epub:type="footnote"><a class="footnote_backlink" href="#DOCF19"><sup>19</sup></a>
A minor difference between <code>if</code> and <code>cond</code> is that the <code>⟨</code><var>e</var><code>⟩</code> part of each <code>cond</code> clause may be a sequence of expressions.  If the corresponding <code>⟨</code><var>p</var><code>⟩</code> is found to be true, the expressions <code>⟨</code><var>e</var><code>⟩</code> are evaluated in sequence and the value of the final expression in the sequence is returned as the value of the <code>cond</code>.  In an <code>if</code> expression, however, the <code>⟨</code><var>consequent</var><code>⟩</code> and <code>⟨</code><var>alternative</var><code>⟩</code> must be single expressions.</p>
</div>
<div><p id="FOOT20" epub:type="footnote"><a class="footnote_backlink" href="#DOCF20"><sup>20</sup></a>
Declarative and imperative descriptions are intimately related, as indeed are mathematics and computer science.  For instance, to say that the answer produced by a program is “correct” is to make a declarative statement about the program. There is a large amount of research aimed at establishing techniques for proving that programs are correct, and much of the technical difficulty of this subject has to do with negotiating the transition between imperative statements (from which programs are constructed) and declarative statements (which can be used to deduce things).  In a related vein, an important current area in programming-language design is the exploration of so-called very high-level languages, in which one actually programs in terms of declarative statements. The idea is to make interpreters sophisticated enough so that, given “what is” knowledge specified by the programmer, they can generate “how to” knowledge automatically.  This cannot be done in general, but there are important areas where progress has been made.  We shall revisit this idea in <a href="Chapter-4.xhtml#Chapter-4">Chapter 4</a>.</p>
</div>
<div><p id="FOOT21" epub:type="footnote"><a class="footnote_backlink" href="#DOCF21"><sup>21</sup></a>
This square-root algorithm is actually a special case of Newton’s method, which is a general technique for finding roots of equations.  The square-root algorithm itself was developed by Heron of Alexandria in the first century <abbr>A.D.</abbr>  We will see how to express the general Newton’s method as a Lisp procedure in <a href="1_002e3.xhtml#g_t1_002e3_002e4">1.3.4</a>.</p>
</div>
<div><p id="FOOT22" epub:type="footnote"><a class="footnote_backlink" href="#DOCF22"><sup>22</sup></a>
We will usually give predicates names ending with question marks, to help us remember that they are predicates. This is just a stylistic convention.  As far as the interpreter is concerned, the question mark is just an ordinary character.</p>
</div>
<div><p id="FOOT23" epub:type="footnote"><a class="footnote_backlink" href="#DOCF23"><sup>23</sup></a>
Observe that we express our initial guess as 1.0 rather than 1.  This would not make any difference in many Lisp implementations.  <abbr>MIT</abbr> Scheme, however, distinguishes between exact integers and decimal values, and dividing two integers produces a rational number rather than a decimal.  For example, dividing 10 by 6 yields 5/3, while dividing 10.0 by 6.0 yields 1.6666666666666667.  (We will learn how to implement arithmetic on rational numbers in <a href="2_002e1.xhtml#g_t2_002e1_002e1">2.1.1</a>.)  If we start with an initial guess of 1 in our square-root program, and <img src="fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( x \)" /> is an exact integer, all subsequent values produced in the square-root computation will be rational numbers rather than decimals.  Mixed operations on rational numbers and decimals always yield decimals, so starting with an initial guess of 1.0 forces all subsequent values to be decimals.</p>
</div>
<div><p id="FOOT24" epub:type="footnote"><a class="footnote_backlink" href="#DOCF24"><sup>24</sup></a>
Readers who are worried about the efficiency issues involved in using procedure calls to implement iteration should note the remarks on “tail recursion” in  <a href="1_002e2.xhtml#g_t1_002e2_002e1">1.2.1</a>.</p>
</div>
<div><p id="FOOT25" epub:type="footnote"><a class="footnote_backlink" href="#DOCF25"><sup>25</sup></a>
It is not even clear which of these procedures is a more efficient implementation.  This depends upon the hardware available.  There are machines for which the “obvious” implementation is the less efficient one.  Consider a machine that has extensive tables of logarithms and antilogarithms stored in a very efficient manner.</p>
</div>
<div><p id="FOOT26" epub:type="footnote"><a class="footnote_backlink" href="#DOCF26"><sup>26</sup></a>
The concept of consistent renaming is actually subtle and difficult to define formally.  Famous logicians have made embarrassing errors here.</p>
</div>
<div><p id="FOOT27" epub:type="footnote"><a class="footnote_backlink" href="#DOCF27"><sup>27</sup></a>
Lexical scoping dictates  that free variables in a procedure are taken to refer to bindings made by enclosing  procedure definitions; that is, they are looked up in the environment in which the procedure was defined. We will see how this works in detail in chapter 3 when we study  environments and the detailed behavior of the interpreter.<a id="Footnote-28"></a></p>
</div>
<div><p id="FOOT28" epub:type="footnote"><a class="footnote_backlink" href="#DOCF28"><sup>28</sup></a>
Embedded definitions must come first in a procedure body. The management is not responsible for the consequences of running programs that intertwine definition and use.</p>
</div>
</div>
<nav class="header">
<p>
Next: <a href="1_002e2.xhtml#g_t1_002e2" accesskey="n" rel="next">1.2</a>, Prev: <a href="Chapter-1.xhtml#Chapter-1" accesskey="p" rel="prev">Chapter 1</a>, Up: <a href="#g_t1_002e1" accesskey="u" rel="prev">1.1</a>   [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>]</p>
</nav>


</section><span class="bottom jump" title="Jump to bottom"><a href="#pagebottom" accesskey="b">⇣</a></span><a id="pagebottom"></a>
</body>
</html>
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" xmlns:xml="http://www.w3.org/XML/1998/namespace" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Structure and Interpretation of Computer Programs, 2e: 1.2</title>

<meta name="description" content="Structure and Interpretation of Computer Programs, 2e: 1.2" />
<meta name="keywords" content="Structure and Interpretation of Computer Programs, 2e: 1.2" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="Generator" content="texi2any" />
<meta charset="utf-8" />
<link href="index.xhtml#Top" rel="start" title="Top" />
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index" />
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents" />
<link href="Chapter-1.xhtml#Chapter-1" rel="prev" title="Chapter 1" />
<link href="1_002e3.xhtml#g_t1_002e3" rel="next" title="1.3" />
<link href="1_002e1.xhtml#g_t1_002e1_002e8" rel="prev" title="1.1.8" />

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />



</head>

<body>
<section><span class="top jump" title="Jump to top"><a href="#pagetop" accesskey="t">⇡</a></span><a id="pagetop"></a><a id="g_t1_002e2"></a>
<nav class="header">
<p>
Next: <a href="1_002e3.xhtml#g_t1_002e3" accesskey="n" rel="next">1.3</a>, Prev: <a href="1_002e1.xhtml#g_t1_002e1" accesskey="p" rel="prev">1.1</a>, Up: <a href="Chapter-1.xhtml#Chapter-1" accesskey="u" rel="prev">Chapter 1</a>   [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>]</p>
</nav>
<a id="Procedures-and-the-Processes-They-Generate"></a>
<h3 class="section"><span class="secnum">1.2</span><span class="sectitle">Procedures and the Processes They Generate</span></h3>

<p>We have now considered the elements of programming: We have used primitive
arithmetic operations, we have combined these operations, and we have
abstracted these composite operations by defining them as compound procedures.
But that is not enough to enable us to say that we know how to program.  Our
situation is analogous to that of someone who has learned the rules for how the
pieces move in chess but knows nothing of typical openings, tactics, or
strategy.  Like the novice chess player, we don’t yet know the common patterns
of usage in the domain.  We lack the knowledge of which moves are worth making
(which procedures are worth defining).  We lack the experience to predict the
consequences of making a move (executing a procedure).
</p>
<p>The ability to visualize the consequences of the actions under consideration is
crucial to becoming an expert programmer, just as it is in any synthetic,
creative activity.  In becoming an expert photographer, for example, one must
learn how to look at a scene and know how dark each region will appear on a
print for each possible choice of exposure and development conditions.  Only
then can one reason backward, planning framing, lighting, exposure, and
development to obtain the desired effects.  So it is with programming, where we
are planning the course of action to be taken by a process and where we control
the process by means of a program.  To become experts, we must learn to
visualize the processes generated by various types of procedures.  Only after
we have developed such a skill can we learn to reliably construct programs that
exhibit the desired behavior.
</p>
<p>A procedure is a pattern for the <a id="index-local-evolution"></a>
<em>local evolution</em> of a computational
process.  It specifies how each stage of the process is built upon the previous
stage.  We would like to be able to make statements about the overall, or
<a id="index-global"></a>
<em>global</em>, behavior of a process whose local evolution has been
specified by a procedure.  This is very difficult to do in general, but we can
at least try to describe some typical patterns of process evolution.
</p>
<p>In this section we will examine some common “shapes” for processes generated
by simple procedures.  We will also investigate the rates at which these
processes consume the important computational resources of time and space.  The
procedures we will consider are very simple.  Their role is like that played by
test patterns in photography: as oversimplified prototypical patterns, rather
than practical examples in their own right.
</p>

<a id="g_t1_002e2_002e1"></a>
<a id="Linear-Recursion-and-Iteration"></a>
<h4 class="subsection"><span class="secnum">1.2.1</span><span class="sectitle">Linear Recursion and Iteration</span></h4>

<p>We begin by considering the factorial function, defined by

<img src="fig/math/d9a7ed457c5fc2db3708937f13e789da.svg" class="math-display" style="height: 0.901em;" alt="\[ % :5:&amp;#10;  n! \,=\, {n \cdot (n - 1)} \cdot {(n - 2)} \cdots {3 \cdot 2 \cdot 1.} \]" />

There are many ways to compute factorials.  One way is to make use of the
observation that <img src="fig/math/5fa3dbabdc4f880a425fd3b033864691.svg" class="math-inline" style="height: 0.702em; vertical-align: -0.009em;" alt="\( {n!} \)" /> is equal to <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> times <img src="fig/math/44fe5301c8e9c277481b220163a36838.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {(n - 1)!} \)" /> for any positive
integer <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />:

<img src="fig/math/84b2ed4ef8a69a37b4ae01ceb320dc1c.svg" class="math-display" style="height: 0.996em;" alt="\[ % :6:&amp;#10;  n! \,=\, {n \cdot [(n - 1)} \cdot {(n - 2)} \cdots {3 \cdot 2 \cdot 1]} \,=\, {n \cdot (n - 1)!.} \]" />

Thus, we can compute <img src="fig/math/5fa3dbabdc4f880a425fd3b033864691.svg" class="math-inline" style="height: 0.702em; vertical-align: -0.009em;" alt="\( {n!} \)" /> by computing <img src="fig/math/44fe5301c8e9c277481b220163a36838.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {(n - 1)!} \)" /> and multiplying the
result by <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />.  If we add the stipulation that 1! is equal to 1, this
observation translates directly into a procedure:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">factorial n</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pun">=</span><span class="pln"> n </span><span class="lit">1</span><span class="clo">)</span><span class="pln"> 
      </span><span class="lit">1</span><span class="pln"> 
      </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> n </span><span class="opn">(</span><span class="pln">factorial </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> n </span><span class="lit">1</span><span class="clo">)))))</span></pre></div>

<p>We can use the substitution model of <a href="1_002e1.xhtml#g_t1_002e1_002e5">1.1.5</a> to watch this
procedure in action computing 6!, as shown in <a href="#Figure-1_002e3">Figure 1.3</a>.
</p>
<figure class="float">
<a id="Figure-1_002e3"></a>
<img style="width: 52.58ex; max-width: 100%; display: inline;" src="fig/chap1/Fig1.3d.std.svg" />

<figcaption class="float-caption">
<p><strong>Figure 1.3:</strong> A linear recursive process for computing 6!.</p>
</figcaption>
</figure>

<p>Now let’s take a different perspective on computing factorials.  We could
describe a rule for computing <img src="fig/math/5fa3dbabdc4f880a425fd3b033864691.svg" class="math-inline" style="height: 0.702em; vertical-align: -0.009em;" alt="\( {n!} \)" /> by specifying that we first multiply 1 by
2, then multiply the result by 3, then by 4, and so on until we reach <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />.
More formally, we maintain a running product, together with a counter that
counts from 1 up to <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />.  We can describe the computation by saying that the
counter and the product simultaneously change from one step to the next
according to the rule
</p>
<div class="example">
<pre class="example">product <img src="fig/math/8a733dfd09fb25f18571920570c70be0.svg" class="math-inline" style="height: 0.467em;" alt="\( \gets \)" /> counter * product
counter <img src="fig/math/8a733dfd09fb25f18571920570c70be0.svg" class="math-inline" style="height: 0.467em;" alt="\( \gets \)" /> counter + 1
</pre></div>

<p>and stipulating that <img src="fig/math/5fa3dbabdc4f880a425fd3b033864691.svg" class="math-inline" style="height: 0.702em; vertical-align: -0.009em;" alt="\( {n!} \)" /> is the value of the product when the counter
exceeds <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />.
</p>
<p>Once again, we can recast our description as a procedure for computing
factorials:<sup><a class="footnote_link" id="DOCF29" href="#FOOT29" epub:type="noteref">29</a></sup>
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">factorial n</span><span class="clo">)</span><span class="pln"> 
  </span><span class="opn">(</span><span class="pln">fact-iter </span><span class="lit">1</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> n</span><span class="clo">))</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">fact-iter product counter max-count</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pun">&gt;</span><span class="pln"> counter max-count</span><span class="clo">)</span><span class="pln">
      product
      </span><span class="opn">(</span><span class="pln">fact-iter </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> counter product</span><span class="clo">)</span><span class="pln">
                 </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> counter </span><span class="lit">1</span><span class="clo">)</span><span class="pln">
                 max-count</span><span class="clo">)))</span></pre></div>

<p>As before, we can use the substitution model to visualize the process of
computing 6!, as shown in <a href="#Figure-1_002e4">Figure 1.4</a>.
</p>
<figure class="float">
<a id="Figure-1_002e4"></a>
<img style="width: 23.40ex; max-width: 100%; display: inline;" src="fig/chap1/Fig1.4d.std.svg" />

<figcaption class="float-caption">
<p><strong>Figure 1.4:</strong> A linear iterative process for computing 6!.</p>
</figcaption>
</figure>

<p>Compare the two processes.  From one point of view, they seem hardly different
at all.  Both compute the same mathematical function on the same domain, and
each requires a number of steps proportional to <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> to compute <img src="fig/math/5fa3dbabdc4f880a425fd3b033864691.svg" class="math-inline" style="height: 0.702em; vertical-align: -0.009em;" alt="\( {n!} \)" />.
Indeed, both processes even carry out the same sequence of multiplications,
obtaining the same sequence of partial products.  On the other hand, when we
consider the “shapes” of the two processes, we find that they evolve quite
differently.
</p>
<p>Consider the first process.  The substitution model reveals a shape of
expansion followed by contraction, indicated by the arrow in <a href="#Figure-1_002e3">Figure 1.3</a>.
The expansion occurs as the process builds up a chain of <a id="index-deferred-operations"></a>
<em>deferred operations</em> 
(in this case, a chain of multiplications).  The contraction occurs
as the operations are actually performed.  This type of process, characterized
by a chain of deferred operations, is called a <a id="index-recursive-process"></a>
<em>recursive process</em>.
Carrying out this process requires that the interpreter keep track of the
operations to be performed later on.  In the computation of <img src="fig/math/5fa3dbabdc4f880a425fd3b033864691.svg" class="math-inline" style="height: 0.702em; vertical-align: -0.009em;" alt="\( {n!} \)" />, the length
of the chain of deferred multiplications, and hence the amount of information
needed to keep track of it, grows linearly with <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> (is proportional to
<img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />), just like the number of steps.  Such a process is called a
<a id="index-linear-recursive-process"></a>
<em>linear recursive process</em>.
</p>
<p>By contrast, the second process does not grow and shrink.  At each step, all we
need to keep track of, for any <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />, are the current values of the variables
<code>product</code>, <code>counter</code>, and <code>max-count</code>.  We call this an
<a id="index-iterative-process"></a>
<em>iterative process</em>.  In general, an iterative process is one whose
state can be summarized by a fixed number of <a id="index-state-variables"></a>
<em>state variables</em>,
together with a fixed rule that describes how the state variables should be
updated as the process moves from state to state and an (optional) end test
that specifies conditions under which the process should terminate.  In
computing <img src="fig/math/5fa3dbabdc4f880a425fd3b033864691.svg" class="math-inline" style="height: 0.702em; vertical-align: -0.009em;" alt="\( {n!} \)" />, the number of steps required grows linearly with <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />.  Such
a process is called a <a id="index-linear-iterative-process"></a>
<em>linear iterative process</em>.
</p>
<p>The contrast between the two processes can be seen in another way.  In the
iterative case, the program variables provide a complete description of the
state of the process at any point.  If we stopped the computation between
steps, all we would need to do to resume the computation is to supply the
interpreter with the values of the three program variables.  Not so with the
recursive process.  In this case there is some additional “hidden”
information, maintained by the interpreter and not contained in the program
variables, which indicates “where the process is” in negotiating the chain of
deferred operations.  The longer the chain, the more information must be
maintained.<sup><a class="footnote_link" id="DOCF30" href="#FOOT30" epub:type="noteref">30</a></sup>
</p>
<p>In contrasting iteration and recursion, we must be careful not to confuse the
notion of a recursive <a id="index-process"></a>
<em>process</em> with the notion of a recursive
<a id="index-procedure"></a>
<em>procedure</em>.  When we describe a procedure as recursive, we are
referring to the syntactic fact that the procedure definition refers (either
directly or indirectly) to the procedure itself.  But when we describe a
process as following a pattern that is, say, linearly recursive, we are
speaking about how the process evolves, not about the syntax of how a procedure
is written.  It may seem disturbing that we refer to a recursive procedure such
as <code>fact-iter</code> as generating an iterative process.  However, the process
really is iterative: Its state is captured completely by its three state
variables, and an interpreter need keep track of only three variables in order
to execute the process.
</p>
<p>One reason that the distinction between process and procedure may be confusing
is that most implementations of common languages (including Ada, Pascal, and C)
are designed in such a way that the interpretation of any recursive procedure
consumes an amount of memory that grows with the number of procedure calls,
even when the process described is, in principle, iterative.  As a consequence,
these languages can describe iterative processes only by resorting to
special-purpose “looping constructs” such as <code>do</code>, <code>repeat</code>,
<code>until</code>, <code>for</code>, and <code>while</code>.  The implementation of Scheme we
shall consider in <a href="Chapter-5.xhtml#Chapter-5">Chapter 5</a> does not share this defect.  It will execute
an iterative process in constant space, even if the iterative process is
described by a recursive procedure.  An implementation with this property is
called <a id="index-tail_002drecursive"></a>
<em>tail-recursive</em>.  With a tail-recursive implementation,
iteration can be expressed using the ordinary procedure call mechanism, so that
special iteration constructs are useful only as syntactic sugar.<sup><a class="footnote_link" id="DOCF31" href="#FOOT31" epub:type="noteref">31</a></sup>
</p>
<blockquote>
<p><strong><a id="Exercise-1_002e9"></a>Exercise 1.9:</strong> Each of the following two
procedures defines a method for adding two positive integers in terms of the
procedures <code>inc</code>, which increments its argument by 1, and <code>dec</code>,
which decrements its argument by 1.
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> a b</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pun">=</span><span class="pln"> a </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> 
      b 
      </span><span class="opn">(</span><span class="pln">inc </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pln">dec a</span><span class="clo">)</span><span class="pln"> b</span><span class="clo">))))</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> a b</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pun">=</span><span class="pln"> a </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> 
      b 
      </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pln">dec a</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pln">inc b</span><span class="clo">))))</span></pre></div>

<p>Using the substitution model, illustrate the process generated by each
procedure in evaluating <code>(+ 4 5)</code>.  Are these processes iterative or
recursive?
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e10"></a>Exercise 1.10:</strong> The following procedure computes
a mathematical function called Ackermann’s function.
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">A x y</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">cond</span><span class="pln"> </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> y </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> </span><span class="lit">0</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> x </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="lit">2</span><span class="pln"> y</span><span class="clo">))</span><span class="pln">
        </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> y </span><span class="lit">1</span><span class="clo">)</span><span class="pln"> </span><span class="lit">2</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">(</span><span class="kwd">else</span><span class="pln"> </span><span class="opn">(</span><span class="pln">A </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> x </span><span class="lit">1</span><span class="clo">)</span><span class="pln">
                 </span><span class="opn">(</span><span class="pln">A x </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> y </span><span class="lit">1</span><span class="clo">))))))</span></pre></div>

<p>What are the values of the following expressions?
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pln">A </span><span class="lit">1</span><span class="pln"> </span><span class="lit">10</span><span class="clo">)</span><span class="pln">
</span><span class="opn">(</span><span class="pln">A </span><span class="lit">2</span><span class="pln"> </span><span class="lit">4</span><span class="clo">)</span><span class="pln">
</span><span class="opn">(</span><span class="pln">A </span><span class="lit">3</span><span class="pln"> </span><span class="lit">3</span><span class="clo">)</span></pre></div>

<p>Consider the following procedures, where <code>A</code> is the procedure
defined above:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">f n</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pln">A </span><span class="lit">0</span><span class="pln"> n</span><span class="clo">))</span><span class="pln">
</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">g n</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pln">A </span><span class="lit">1</span><span class="pln"> n</span><span class="clo">))</span><span class="pln">
</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">h n</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pln">A </span><span class="lit">2</span><span class="pln"> n</span><span class="clo">))</span><span class="pln">
</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">k n</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="lit">5</span><span class="pln"> n n</span><span class="clo">))</span></pre></div>

<p>Give concise mathematical definitions for the functions computed by the
procedures <code>f</code>, <code>g</code>, and <code>h</code> for positive integer values of
<img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />.  For example, <code>(k n)</code> computes <img src="fig/math/16a46df6d09d600cea1b52c1f70b1db4.svg" class="math-inline" style="height: 0.854em; vertical-align: -0.010em;" alt="\( {5n^2} \)" />.
</p></blockquote>

<a id="g_t1_002e2_002e2"></a>
<a id="Tree-Recursion"></a>
<h4 class="subsection"><span class="secnum">1.2.2</span><span class="sectitle">Tree Recursion</span></h4>

<p>Another common pattern of computation is called <a id="index-tree-recursion"></a>
<em>tree recursion</em>.  As
an example, consider computing the sequence of Fibonacci numbers, in which each
number is the sum of the preceding two:
</p>
<div style="text-align: center">0, 1, 1, 2, 3, 5, 8, 13, 21, ….
</div>
<p>In general, the Fibonacci numbers can be defined by the rule

<img src="fig/math/8225dec0d676b9c57da03597a3556d31.svg" class="math-display" style="height: 3.389em;" alt="\[ % :7:&amp;#10;   \text{Fib}(n) \; = \;   \left\{      \begin{array}{ll}           0 &amp;amp; \;\text{if} \;\; n = 0, \\       1 &amp;amp; \;\text{if} \;\; n = 1, \\       \text{Fib}(n-1) + \text{Fib}(n-2) &amp;amp; \;\text{otherwise}.      \end{array}    \right.  \]" />

We can immediately translate this definition into a recursive procedure for
computing Fibonacci numbers:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">fib n</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">cond</span><span class="pln"> </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> n </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> </span><span class="lit">0</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> n </span><span class="lit">1</span><span class="clo">)</span><span class="pln"> </span><span class="lit">1</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">(</span><span class="kwd">else</span><span class="pln"> </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pln">fib </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> n </span><span class="lit">1</span><span class="clo">))</span><span class="pln">
                 </span><span class="opn">(</span><span class="pln">fib </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> n </span><span class="lit">2</span><span class="clo">))))))</span></pre></div>

<p>Consider the pattern of this computation.  To compute <code>(fib 5)</code>, we
compute <code>(fib 4)</code> and <code>(fib 3)</code>.  To compute <code>(fib 4)</code>, we
compute <code>(fib 3)</code> and <code>(fib 2)</code>.  In general, the evolved process
looks like a tree, as shown in <a href="#Figure-1_002e5">Figure 1.5</a>.  Notice that the branches
split into two at each level (except at the bottom); this reflects the fact
that the <code>fib</code> procedure calls itself twice each time it is invoked.
</p>
<figure class="float">
<a id="Figure-1_002e5"></a>
<img style="width: 58.07ex; max-width: 100%; display: inline;" src="fig/chap1/Fig1.5d.std.svg" />

<figcaption class="float-caption">
<p><strong>Figure 1.5:</strong> The tree-recursive process generated in computing <code>(fib 5)</code>.</p>
</figcaption>
</figure>

<p>This procedure is instructive as a prototypical tree recursion, but it is a
terrible way to compute Fibonacci numbers because it does so much redundant
computation.  Notice in <a href="#Figure-1_002e5">Figure 1.5</a> that the entire computation of
<code>(fib 3)</code>—almost half the work—is duplicated.  In fact, it is not hard
to show that the number of times the procedure will compute <code>(fib 1)</code> or
<code>(fib 0)</code> (the number of leaves in the above tree, in general) is
precisely <img src="fig/math/455054e624823e0531cfd992817c1e2c.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\text{Fib}(n+1)} \)" />.  To get an idea of how bad this is, one can
show that the value of <img src="fig/math/606058a44581066eed9cf2309aee7b71.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\text{Fib}(n)} \)" /> grows exponentially with <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />.  More
precisely (see <a href="#Exercise-1_002e13">Exercise 1.13</a>), <img src="fig/math/606058a44581066eed9cf2309aee7b71.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\text{Fib}(n)} \)" /> is the closest integer
to <img src="fig/math/dd53f55e0a4674912e8a49cd871c795b.svg" class="math-inline" style="height: 1.118em; vertical-align: -0.180em;" alt="\( {\varphi^n / \sqrt{5}} \)" />, where

<img src="fig/math/196371d8fda930e2dcb771b35db1df9a.svg" class="math-display" style="height: 2.248em;" alt="\[ % :8:&amp;#10; \varphi \,=\, \frac{1 + \sqrt{5}}{2} \,\approx\, 1.6180 \]" />

is the <a id="index-golden-ratio"></a>
<em>golden ratio</em>, which satisfies the equation

<img src="fig/math/9726168de251dd7670ebb58eaca40d0d.svg" class="math-display" style="height: 1.128em;" alt="\[ % :9:&amp;#10;  \varphi^2 \,=\, {\varphi + 1.} \]" />

Thus, the process uses a number of steps that grows exponentially with the
input.  On the other hand, the space required grows only linearly with the
input, because we need keep track only of which nodes are above us in the tree
at any point in the computation.  In general, the number of steps required by a
tree-recursive process will be proportional to the number of nodes in the tree,
while the space required will be proportional to the maximum depth of the tree.
</p>
<p>We can also formulate an iterative process for computing the Fibonacci numbers.
The idea is to use a pair of integers <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> and <img src="fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( b \)" />, initialized to
<img src="fig/math/ba72d1746f7d257fd4f89f24c86a0e61.svg" class="math-inline" style="height: 0.996em; vertical-align: -0.247em;" alt="\( {\text{Fib(1) = 1}} \)" /> and <img src="fig/math/af6821f800a115ac3e33a8b02bb5c544.svg" class="math-inline" style="height: 0.996em; vertical-align: -0.247em;" alt="\( {\text{Fib(0) = 0}} \)" />, and to repeatedly apply the
simultaneous transformations
</p>

<img src="fig/math/d7bc6551cb534bc2372f5fe135fb8843.svg" class="math-display" style="height: 1.913em;" alt="\[ % :10:&amp;#10;  \begin{array}{l}   a \;\leftarrow\; a + b, \\    b \;\leftarrow\; a.  \end{array} \]" />

<p>It is not hard to show that, after applying this transformation <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> times,
<img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> and <img src="fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( b \)" /> will be equal, respectively, to <img src="fig/math/455054e624823e0531cfd992817c1e2c.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\text{Fib}(n+1)} \)" /> and
<img src="fig/math/606058a44581066eed9cf2309aee7b71.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\text{Fib}(n)} \)" />.  Thus, we can compute Fibonacci numbers iteratively using
the procedure
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">fib n</span><span class="clo">)</span><span class="pln"> 
  </span><span class="opn">(</span><span class="pln">fib-iter </span><span class="lit">1</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> n</span><span class="clo">))</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">fib-iter a b count</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pun">=</span><span class="pln"> count </span><span class="lit">0</span><span class="clo">)</span><span class="pln">
      b
      </span><span class="opn">(</span><span class="pln">fib-iter </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> a b</span><span class="clo">)</span><span class="pln"> a </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> count </span><span class="lit">1</span><span class="clo">))))</span></pre></div>

<p>This second method for computing <img src="fig/math/606058a44581066eed9cf2309aee7b71.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\text{Fib}(n)} \)" /> is a linear iteration.  The
difference in number of steps required by the two methods—one linear in
<img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />, one growing as fast as <img src="fig/math/606058a44581066eed9cf2309aee7b71.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\text{Fib}(n)} \)" /> itself—is enormous, even for
small inputs.
</p>
<p>One should not conclude from this that tree-recursive processes are useless.
When we consider processes that operate on hierarchically structured data
rather than numbers, we will find that tree recursion is a natural and powerful
tool.<sup><a class="footnote_link" id="DOCF32" href="#FOOT32" epub:type="noteref">32</a></sup> But
even in numerical operations, tree-recursive processes can be useful in helping
us to understand and design programs.  For instance, although the first
<code>fib</code> procedure is much less efficient than the second one, it is more
straightforward, being little more than a translation into Lisp of the
definition of the Fibonacci sequence.  To formulate the iterative algorithm
required noticing that the computation could be recast as an iteration with
three state variables.
</p>
<a id="Example_003a-Counting-change"></a>
<h5 class="subsubheading">Example: Counting change</h5>

<p>It takes only a bit of cleverness to come up with the iterative Fibonacci
algorithm.  In contrast, consider the following problem: How many different
ways can we make change of $1.00, given half-dollars, quarters, dimes,
nickels, and pennies?  More generally, can we write a procedure to compute the
number of ways to change any given amount of money?
</p>
<p>This problem has a simple solution as a recursive procedure.  Suppose we think
of the types of coins available as arranged in some order.  Then the following
relation holds:
</p>
<p>The number of ways to change amount <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> using <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> kinds of coins equals
</p>
<ul>
<li> the number of ways to change amount <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> using all but the first kind of coin,
plus

</li><li> the number of ways to change amount <img src="fig/math/300c23f60457a24b1e5ebe2eba416e7d.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( {a - d} \)" /> using all <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> kinds of
coins, where <img src="fig/math/94022487faed4226073f19cc394c11d0.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( d \)" /> is the denomination of the first kind of coin.

</li></ul>

<p>To see why this is true, observe that the ways to make change can be divided
into two groups: those that do not use any of the first kind of coin, and those
that do.  Therefore, the total number of ways to make change for some amount is
equal to the number of ways to make change for the amount without using any of
the first kind of coin, plus the number of ways to make change assuming that we
do use the first kind of coin.  But the latter number is equal to the number of
ways to make change for the amount that remains after using a coin of the first
kind.
</p>
<p>Thus, we can recursively reduce the problem of changing a given amount to the
problem of changing smaller amounts using fewer kinds of coins.  Consider this
reduction rule carefully, and convince yourself that we can use it to describe
an algorithm if we specify the following degenerate cases:<sup><a class="footnote_link" id="DOCF33" href="#FOOT33" epub:type="noteref">33</a></sup>
</p>
<ul>
<li> If <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> is exactly 0, we should count that as 1 way to make change.

</li><li> If <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> is less than 0, we should count that as 0 ways to make change.

</li><li> If <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> is 0, we should count that as 0 ways to make change.

</li></ul>

<p>We can easily translate this description into a recursive procedure:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">count-change amount</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">cc amount </span><span class="lit">5</span><span class="clo">))</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">cc amount kinds-of-coins</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">cond</span><span class="pln"> </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> amount </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> </span><span class="lit">1</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">((</span><span class="kwd">or</span><span class="pln"> </span><span class="opn">(</span><span class="pun">&lt;</span><span class="pln"> amount </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> 
             </span><span class="opn">(</span><span class="pun">=</span><span class="pln"> kinds-of-coins </span><span class="lit">0</span><span class="clo">))</span><span class="pln"> 
         </span><span class="lit">0</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">(</span><span class="kwd">else</span><span class="pln"> 
         </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pln">cc amount </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> kinds-of-coins </span><span class="lit">1</span><span class="clo">))</span><span class="pln">
            </span><span class="opn">(</span><span class="pln">cc </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> amount </span><span class="opn">(</span><span class="pln">first-denomination 
                           kinds-of-coins</span><span class="clo">))</span><span class="pln">
                kinds-of-coins</span><span class="clo">)))))</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">first-denomination kinds-of-coins</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">cond</span><span class="pln"> </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> kinds-of-coins </span><span class="lit">1</span><span class="clo">)</span><span class="pln"> </span><span class="lit">1</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> kinds-of-coins </span><span class="lit">2</span><span class="clo">)</span><span class="pln"> </span><span class="lit">5</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> kinds-of-coins </span><span class="lit">3</span><span class="clo">)</span><span class="pln"> </span><span class="lit">10</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> kinds-of-coins </span><span class="lit">4</span><span class="clo">)</span><span class="pln"> </span><span class="lit">25</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> kinds-of-coins </span><span class="lit">5</span><span class="clo">)</span><span class="pln"> </span><span class="lit">50</span><span class="clo">)))</span></pre></div>

<p>(The <code>first-denomination</code> procedure takes as input the number of kinds of
coins available and returns the denomination of the first kind.  Here we are
thinking of the coins as arranged in order from largest to smallest, but any
order would do as well.)  We can now answer our original question about
changing a dollar:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pln">count-change </span><span class="lit">100</span><span class="clo">)</span><span class="pln">
</span><i><span class="lit">292</span></i>
</pre></div>

<p><code>Count-change</code> generates a tree-recursive process with redundancies
similar to those in our first implementation of <code>fib</code>.  (It will take
quite a while for that 292 to be computed.)  On the other hand, it is not
obvious how to design a better algorithm for computing the result, and we leave
this problem as a challenge.  The observation that a tree-recursive process may
be highly inefficient but often easy to specify and understand has led people
to propose that one could get the best of both worlds by designing a “smart
compiler” that could transform tree-recursive procedures into more efficient
procedures that compute the same result.<sup><a class="footnote_link" id="DOCF34" href="#FOOT34" epub:type="noteref">34</a></sup>
</p>
<blockquote>
<p><strong><a id="Exercise-1_002e11"></a>Exercise 1.11:</strong> A function <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" /> is defined by
the rule that <img src="fig/math/858e97aa72fad42049bfdb3d966def85.svg" class="math-inline" style="height: 0.936em; vertical-align: -0.225em;" alt="\( {f(n) = n} \)" /> if <img src="fig/math/1a7101157ae461b511ffea0eacf7ce88.svg" class="math-inline" style="height: 0.652em; vertical-align: -0.009em;" alt="\( {n &amp;lt; 3} \)" /> and <img src="fig/math/3442878c66dcc4b6133e5ea2a2d10121.svg" class="math-inline" style="height: 0.936em; vertical-align: -0.225em;" alt="\( {f(n)} = {f(n-1)} + {2f(n-2)} + {3f(n-3)} \)" /> if <img src="fig/math/fd0bb2e5e2f01284bb7c8b8e23031c45.svg" class="math-inline" style="height: 0.699em; vertical-align: -0.055em;" alt="\( {n \ge 3} \)" />.  
Write a procedure that computes <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" /> by means of a recursive process.  Write a procedure that
computes <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" /> by means of an iterative process.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e12"></a>Exercise 1.12:</strong> The following pattern of numbers
is called <a id="index-Pascal_0027s-triangle"></a>
<em>Pascal’s triangle</em>.
</p>
<div class="example">
<pre class="example">         1
       1   1
     1   2   1
   1   3   3   1
 1   4   6   4   1
       . . .
</pre></div>

<p>The numbers at the edge of the triangle are all 1, and each number inside the
triangle is the sum of the two numbers above it.<sup><a class="footnote_link" id="DOCF35" href="#FOOT35" epub:type="noteref">35</a></sup> Write a procedure that computes elements of Pascal’s triangle by
means of a recursive process.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e13"></a>Exercise 1.13:</strong> Prove that <img src="fig/math/606058a44581066eed9cf2309aee7b71.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\text{Fib}(n)} \)" /> is
the closest integer to <img src="fig/math/dd53f55e0a4674912e8a49cd871c795b.svg" class="math-inline" style="height: 1.118em; vertical-align: -0.180em;" alt="\( {\varphi^n / \sqrt{5}} \)" />, where <img src="fig/math/82c54a67e55d18b10c1f9e31c4e345a8.svg" class="math-inline" style="height: 1.118em; vertical-align: -0.180em;" alt="\( \varphi = {(1 + \sqrt{5}) / 2} \)" />.  
Hint: Let <img src="fig/math/64827f834c027b41fcef22961c68e30f.svg" class="math-inline" style="height: 1.118em; vertical-align: -0.180em;" alt="\( \psi = {(1 - \sqrt{5}) / 2} \)" />.
Use induction and the definition of the Fibonacci numbers (see <a href="#g_t1_002e2_002e2">1.2.2</a>) 
to prove that <img src="fig/math/ccf94bce86e4d1eb28de0fe042b3b533.svg" class="math-inline" style="height: 1.118em; vertical-align: -0.180em;" alt="\( {\text{Fib}(n)} = {(\varphi^n - \psi^n) / \sqrt{5}} \)" />.
</p></blockquote>

<a id="g_t1_002e2_002e3"></a>
<a id="Orders-of-Growth"></a>
<h4 class="subsection"><span class="secnum">1.2.3</span><span class="sectitle">Orders of Growth</span></h4>

<p>The previous examples illustrate that processes can differ considerably in the
rates at which they consume computational resources.  One convenient way to
describe this difference is to use the notion of <a id="index-order-of-growth"></a>
<em>order of growth</em> to
obtain a gross measure of the resources required by a process as the inputs
become larger.
</p>
<p>Let <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> be a parameter that measures the size of the problem, and let
<img src="fig/math/ea7204bb6e90d2190e6edb6a241d8564.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {R(n)} \)" /> be the amount of resources the process requires for a problem of
size <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />.  In our previous examples we took <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> to be the number for which
a given function is to be computed, but there are other possibilities.  For
instance, if our goal is to compute an approximation to the square root of a
number, we might take <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> to be the number of digits accuracy required.  For
matrix multiplication we might take <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> to be the number of rows in the
matrices.  In general there are a number of properties of the problem with
respect to which it will be desirable to analyze a given process.  Similarly,
<img src="fig/math/ea7204bb6e90d2190e6edb6a241d8564.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {R(n)} \)" /> might measure the number of internal storage registers used, the
number of elementary machine operations performed, and so on.  In computers
that do only a fixed number of operations at a time, the time required will be
proportional to the number of elementary machine operations performed.
</p>
<p>We say that <img src="fig/math/ea7204bb6e90d2190e6edb6a241d8564.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {R(n)} \)" /> has order of growth <img src="fig/math/82dee58be97eb1c143e8307f9a952b48.svg" class="math-inline" style="height: 0.936em; vertical-align: -0.225em;" alt="\( {\Theta(f(n))} \)" />, written
<img src="fig/math/aca9328ad0b29190f05f348d1f42f4f9.svg" class="math-inline" style="height: 0.936em; vertical-align: -0.225em;" alt="\( {R(n)} = {\Theta(f(n))} \)" /> (pronounced “theta of
<img src="fig/math/84a6f8b825fdb354bca37ca2a5b854e1.svg" class="math-inline" style="height: 0.936em; vertical-align: -0.225em;" alt="\( {f(n)} \)" />”), if there are positive constants <img src="fig/math/9e40c899364b3a7bc648f5071c8e501c.svg" class="math-inline" style="height: 0.843em; vertical-align: -0.148em;" alt="\( k_1 \)" /> and <img src="fig/math/f770f36651db7f4958828f415118c5e8.svg" class="math-inline" style="height: 0.843em; vertical-align: -0.148em;" alt="\( k_2 \)" />
independent of <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> such that <img src="fig/math/06b1fbaa45f5769cd3de898eb76451b1.svg" class="math-inline" style="height: 0.936em; vertical-align: -0.225em;" alt="\( {k_1 f(n)} \le {R(n)} \le {k_2 f(n)} \)" /> 
for any sufficiently large value of <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />.  (In other words, for large <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />,
the value <img src="fig/math/ea7204bb6e90d2190e6edb6a241d8564.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {R(n)} \)" /> is sandwiched between <img src="fig/math/1b4ac2c0c1dd95f199d565e90b91e1ca.svg" class="math-inline" style="height: 0.936em; vertical-align: -0.225em;" alt="\( {k_1 f(n)} \)" /> and
<img src="fig/math/f683bd07b215182cd8c6df8573bb0513.svg" class="math-inline" style="height: 0.936em; vertical-align: -0.225em;" alt="\( {k_2 f(n)} \)" />.)
</p>
<p>For instance, with the linear recursive process for computing factorial
described in <a href="#g_t1_002e2_002e1">1.2.1</a> the number of steps grows proportionally to
the input <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />.  Thus, the steps required for this process grows as
<img src="fig/math/67f39a78859198da759c097b570842e8.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\Theta(n)} \)" />.  We also saw that the space required grows as
<img src="fig/math/67f39a78859198da759c097b570842e8.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\Theta(n)} \)" />.  For the iterative factorial, the number of steps is still
<img src="fig/math/67f39a78859198da759c097b570842e8.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\Theta(n)} \)" /> but the space is <img src="fig/math/d204133a45e3c82e46752ed335bc0373.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\Theta(1)} \)" />—that is,
constant.<sup><a class="footnote_link" id="DOCF36" href="#FOOT36" epub:type="noteref">36</a></sup> The
tree-recursive Fibonacci computation requires <img src="fig/math/52158564696e8ea2b148b091ec81e378.svg" class="math-inline" style="height: 0.933em; vertical-align: -0.225em;" alt="\( {\Theta(\varphi^n)} \)" />
steps and space <img src="fig/math/67f39a78859198da759c097b570842e8.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\Theta(n)} \)" />, where <img src="fig/math/dcc52b7b3e1a0a821032c2d16b198829.svg" class="math-inline" style="height: 0.672em; vertical-align: -0.238em;" alt="\( \varphi \)" /> is the golden ratio
described in <a href="#g_t1_002e2_002e2">1.2.2</a>.
</p>
<p>Orders of growth provide only a crude description of the behavior of a process.
For example, a process requiring <img src="fig/math/8749316e3d02c5d953690375757e639e.svg" class="math-inline" style="height: 0.854em; vertical-align: -0.010em;" alt="\( n^2 \)" /> steps and a process requiring
<img src="fig/math/27546935652e330bcf31c704436a103d.svg" class="math-inline" style="height: 0.854em; vertical-align: -0.010em;" alt="\( {1000n^2} \)" /> steps and a process requiring <img src="fig/math/95657bdb137c3a0202cdd427b4930ea3.svg" class="math-inline" style="height: 0.854em; vertical-align: -0.010em;" alt="\( {3n^2} + {10n} + 17 \)" /> steps all
have <img src="fig/math/e6194f553f4f8569bdbf476c2d7fbe3e.svg" class="math-inline" style="height: 1.046em; vertical-align: -0.199em;" alt="\( {\Theta(n^2)} \)" /> order of growth.  On the other hand, order of growth
provides a useful indication of how we may expect the behavior of the process
to change as we change the size of the problem.  For a <img src="fig/math/67f39a78859198da759c097b570842e8.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\Theta(n)} \)" />
(linear) process, doubling the size will roughly double the amount of resources
used.  For an exponential process, each increment in problem size will multiply
the resource utilization by a constant factor.  In the remainder of 
<a href="#g_t1_002e2">1.2</a> we will examine two algorithms whose order of growth is logarithmic,
so that doubling the problem size increases the resource requirement by a
constant amount.
</p>
<blockquote>
<p><strong><a id="Exercise-1_002e14"></a>Exercise 1.14:</strong> Draw the tree illustrating the
process generated by the <code>count-change</code> procedure of <a href="#g_t1_002e2_002e2">1.2.2</a>
in making change for 11 cents.  What are the orders of growth of the space and
number of steps used by this process as the amount to be changed increases?
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e15"></a>Exercise 1.15:</strong> The sine of an angle (specified
in radians) can be computed by making use of the approximation 
<img src="fig/math/5b5a58e4e6caabf48362f07299a6963f.svg" class="math-inline" style="height: 0.671em; vertical-align: -0.009em;" alt="\( {\sin x  \approx x} \)" /> if <img src="fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( x \)" /> is sufficiently small, and the trigonometric
identity

<img src="fig/math/c5d4c9fd61552087f2509120228486b5.svg" class="math-display" style="height: 1.797em;" alt="\[ % :12:&amp;#10;  {\sin x} \,=\, {3\sin \frac{x}{3}} \,-\, {4\sin^3 \frac{x}{3}} \]" />

to reduce the size of the argument of sin.  (For purposes of this
exercise an angle is considered “sufficiently small” if its magnitude is not
greater than 0.1 radians.) These ideas are incorporated in the following
procedures:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">cube x</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> x x x</span><span class="clo">))</span><span class="pln">
</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">p x</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="lit">3</span><span class="pln"> x</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="lit">4</span><span class="pln"> </span><span class="opn">(</span><span class="pln">cube x</span><span class="clo">))))</span><span class="pln">
</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">sine angle</span><span class="clo">)</span><span class="pln">
   </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pln">not </span><span class="opn">(</span><span class="pun">&gt;</span><span class="pln"> </span><span class="opn">(</span><span class="pln">abs angle</span><span class="clo">)</span><span class="pln"> </span><span class="lit">0.1</span><span class="clo">))</span><span class="pln">
       angle
       </span><span class="opn">(</span><span class="pln">p </span><span class="opn">(</span><span class="pln">sine </span><span class="opn">(</span><span class="pun">/</span><span class="pln"> angle </span><span class="lit">3.0</span><span class="clo">)))))</span></pre></div>

<ol>
<li> How many times is the procedure <code>p</code> applied when <code>(sine 12.15)</code> is
evaluated?

</li><li> What is the order of growth in space and number of steps (as a function of
<img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" />) used by the process generated by the <code>sine</code> procedure when
<code>(sine a)</code> is evaluated?

</li></ol>
</blockquote>

<a id="g_t1_002e2_002e4"></a>
<a id="Exponentiation"></a>
<h4 class="subsection"><span class="secnum">1.2.4</span><span class="sectitle">Exponentiation</span></h4>

<p>Consider the problem of computing the exponential of a given number.  We would
like a procedure that takes as arguments a base <img src="fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( b \)" /> and a positive integer
exponent <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> and computes <img src="fig/math/d6d83912c8ad9c60e8bb70e75a27a8ad.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( b^n \)" />.  One way to do this is via the
recursive definition

<img src="fig/math/7cdc301fe7e670dea20a8543c292a94b.svg" class="math-display" style="height: 2.193em;" alt="\[ % :13:&amp;#10;  \begin{array}{l}   b^n \,=\, b\cdot b^{n-1}, \\    b^0 \,=\, 1,  \end{array} \]" />

which translates readily into the procedure
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">expt b n</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pun">=</span><span class="pln"> n </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> 
      </span><span class="lit">1</span><span class="pln"> 
      </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> b </span><span class="opn">(</span><span class="pln">expt b </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> n </span><span class="lit">1</span><span class="clo">)))))</span></pre></div>

<p>This is a linear recursive process, which requires <img src="fig/math/67f39a78859198da759c097b570842e8.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\Theta(n)} \)" /> steps and
<img src="fig/math/67f39a78859198da759c097b570842e8.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\Theta(n)} \)" /> space.  Just as with factorial, we can readily formulate an
equivalent linear iteration:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">expt b n</span><span class="clo">)</span><span class="pln"> 
  </span><span class="opn">(</span><span class="pln">expt-iter b n </span><span class="lit">1</span><span class="clo">))</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">expt-iter b counter product</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pun">=</span><span class="pln"> counter </span><span class="lit">0</span><span class="clo">)</span><span class="pln">
      product
      </span><span class="opn">(</span><span class="pln">expt-iter b
                 </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> counter </span><span class="lit">1</span><span class="clo">)</span><span class="pln">
                 </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> b product</span><span class="clo">))))</span></pre></div>

<p>This version requires <img src="fig/math/67f39a78859198da759c097b570842e8.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\Theta(n)} \)" /> steps and <img src="fig/math/d204133a45e3c82e46752ed335bc0373.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\Theta(1)} \)" /> space.
</p>
<p>We can compute exponentials in fewer steps by using successive squaring.  For
instance, rather than computing <img src="fig/math/283d552b882dc58695d55ae691cc39ec.svg" class="math-inline" style="height: 0.854em; vertical-align: -0.010em;" alt="\( b^8 \)" /> as

<img src="fig/math/0af40e2c1e29ab7e2b5c30a9a3626d86.svg" class="math-display" style="height: 0.901em;" alt="\[ % :14:&amp;#10;   {b\cdot (b\cdot (b}\cdot {(b\cdot (b\cdot (b}\cdot {(b\cdot b)))))),} \]" />

we can compute it using three multiplications:

<img src="fig/math/3d315a20de1eb7a81e1755603ff7fba8.svg" class="math-display" style="height: 3.275em;" alt="\[ % :15:&amp;#10;  \begin{array}{l}   b^2 \,=\, b\cdot b, \\    b^4 \,=\, b^2\cdot b^2, \\   b^8 \,=\, b^4\cdot b^4. \end{array} \]" />

This method works fine for exponents that are powers of 2.  We can also take
advantage of successive squaring in computing exponentials in general if we use
the rule

<img src="fig/math/6c35b5f12bc3e025345212de641cff2c.svg" class="math-display" style="height: 2.074em;" alt="\[ % :16:&amp;#10;  \begin{array}{ll}   b^n \,=\, (b^{n / 2})^2   &amp;amp; \text{if} \; n \; \text{is even}, \\   b^n \,=\, b\cdot b^{n-1}  &amp;amp; \text{if} \; n \; \text{is odd}. \end{array} \]" />

We can express this method as a procedure:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">fast-expt b n</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">cond</span><span class="pln"> </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> n </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> 
         </span><span class="lit">1</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">((</span><span class="pln">even? n</span><span class="clo">)</span><span class="pln"> 
         </span><span class="opn">(</span><span class="pln">square </span><span class="opn">(</span><span class="pln">fast-expt b </span><span class="opn">(</span><span class="pun">/</span><span class="pln"> n </span><span class="lit">2</span><span class="clo">))))</span><span class="pln">
        </span><span class="opn">(</span><span class="kwd">else</span><span class="pln"> 
         </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> b </span><span class="opn">(</span><span class="pln">fast-expt b </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> n </span><span class="lit">1</span><span class="clo">))))))</span></pre></div>

<p>where the predicate to test whether an integer is even is defined in terms of
the primitive procedure <code>remainder</code> by
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">even? n</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pun">=</span><span class="pln"> </span><span class="opn">(</span><span class="pln">remainder n </span><span class="lit">2</span><span class="clo">)</span><span class="pln"> </span><span class="lit">0</span><span class="clo">))</span></pre></div>

<p>The process evolved by <code>fast-expt</code> grows logarithmically with <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> in
both space and number of steps.  To see this, observe that computing
<img src="fig/math/02fd4a93757c080c7a4513c86141b1ca.svg" class="math-inline" style="height: 0.854em; vertical-align: -0.010em;" alt="\( b^{2n} \)" /> using <code>fast-expt</code> requires only one more multiplication
than computing <img src="fig/math/d6d83912c8ad9c60e8bb70e75a27a8ad.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( b^n \)" />.  The size of the exponent we can compute therefore
doubles (approximately) with every new multiplication we are allowed.  Thus,
the number of multiplications required for an exponent of <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> grows about as
fast as the logarithm of <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> to the base 2.  The process has
<img src="fig/math/48be6efaded27da68b3a4aa70713c562.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\Theta(\log n)} \)" /> growth.<sup><a class="footnote_link" id="DOCF37" href="#FOOT37" epub:type="noteref">37</a></sup>
</p>
<p>The difference between <img src="fig/math/48be6efaded27da68b3a4aa70713c562.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\Theta(\log n)} \)" /> growth and
<img src="fig/math/67f39a78859198da759c097b570842e8.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\Theta(n)} \)" /> growth becomes striking as <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> becomes large.  For
example, <code>fast-expt</code> for <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> = 1000 requires only 14
multiplications.<sup><a class="footnote_link" id="DOCF38" href="#FOOT38" epub:type="noteref">38</a></sup> It is also possible to
use the idea of successive squaring to devise an iterative algorithm that
computes exponentials with a logarithmic number of steps (see <a href="#Exercise-1_002e16">Exercise 1.16</a>), 
although, as is often the case with iterative algorithms, this is not
written down so straightforwardly as the recursive algorithm.<sup><a class="footnote_link" id="DOCF39" href="#FOOT39" epub:type="noteref">39</a></sup>
</p>
<blockquote>
<p><strong><a id="Exercise-1_002e16"></a>Exercise 1.16:</strong> Design a procedure that evolves
an iterative exponentiation process that uses successive squaring and uses a
logarithmic number of steps, as does <code>fast-expt</code>.  (Hint: Using the
observation that <img src="fig/math/2200ff350e68ec776850ac2446796cf2.svg" class="math-inline" style="height: 1.054em; vertical-align: -0.195em;" alt="\( {(b^{n / 2})^2} = {(b^2)^{n / 2}} \)" />, keep, along with
the exponent <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> and the base <img src="fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( b \)" />, an additional state variable <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" />, and
define the state transformation in such a way that the product <img src="fig/math/c6cb8af9049ad4ef353f37f56c7dd679.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( {ab^n} \)" /> 
is unchanged from state to state.  At the beginning of the process
<img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> is taken to be 1, and the answer is given by the value of <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> at the
end of the process.  In general, the technique of defining an
<a id="index-invariant-quantity"></a>
<em>invariant quantity</em> that remains unchanged from state to state is a
powerful way to think about the design of iterative algorithms.)
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e17"></a>Exercise 1.17:</strong> The exponentiation algorithms in
this section are based on performing exponentiation by means of repeated
multiplication.  In a similar way, one can perform integer multiplication by
means of repeated addition.  The following multiplication procedure (in which
it is assumed that our language can only add, not multiply) is analogous to the
<code>expt</code> procedure:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> a b</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pun">=</span><span class="pln"> b </span><span class="lit">0</span><span class="clo">)</span><span class="pln">
      </span><span class="lit">0</span><span class="pln">
      </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> a </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> a </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> b </span><span class="lit">1</span><span class="clo">)))))</span></pre></div>

<p>This algorithm takes a number of steps that is linear in <code>b</code>.  Now suppose
we include, together with addition, operations <code>double</code>, which doubles an
integer, and <code>halve</code>, which divides an (even) integer by 2.  Using these,
design a multiplication procedure analogous to <code>fast-expt</code> that uses a
logarithmic number of steps.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e18"></a>Exercise 1.18:</strong> Using the results of
<a href="#Exercise-1_002e16">Exercise 1.16</a> and <a href="#Exercise-1_002e17">Exercise 1.17</a>, devise a procedure that generates
an iterative process for multiplying two integers in terms of adding, doubling,
and halving and uses a logarithmic number of steps.<sup><a class="footnote_link" id="DOCF40" href="#FOOT40" epub:type="noteref">40</a></sup>
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e19"></a>Exercise 1.19:</strong> There is a clever algorithm for
computing the Fibonacci numbers in a logarithmic number of steps.  Recall the
transformation of the state variables <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> and <img src="fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( b \)" /> in the <code>fib-iter</code>
process of <a href="#g_t1_002e2_002e2">1.2.2</a>: <img src="fig/math/d39194a0d1c178733eb244d69b55684e.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( a \gets a + b \)" /> and <img src="fig/math/3b380e5e7cb6eaec3d24987d57155346.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( b \gets a \)" />.
Call this transformation <img src="fig/math/f06926aab0bc0e9f47ee2cd90f581bb2.svg" class="math-inline" style="height: 0.656em; vertical-align: -0.004em;" alt="\( T \)" />, and observe that applying <img src="fig/math/f06926aab0bc0e9f47ee2cd90f581bb2.svg" class="math-inline" style="height: 0.656em; vertical-align: -0.004em;" alt="\( T \)" /> over and over
again <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> times, starting with 1 and 0, produces the pair <img src="fig/math/455054e624823e0531cfd992817c1e2c.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\text{Fib}(n+1)} \)" /> and 
<img src="fig/math/606058a44581066eed9cf2309aee7b71.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\text{Fib}(n)} \)" />.  In other words, the Fibonacci numbers are produced
by applying <img src="fig/math/97bb73b53bd84890ebced415bc5b713b.svg" class="math-inline" style="height: 0.683em; vertical-align: -0.000em;" alt="\( T^n \)" />, the <img src="fig/math/3b6c232f796b2d291446b22cb38c933e.svg" class="math-inline" style="height: 0.892em; vertical-align: -0.010em;" alt="\( n^{\text{th}} \)" /> power of the transformation <img src="fig/math/f06926aab0bc0e9f47ee2cd90f581bb2.svg" class="math-inline" style="height: 0.656em; vertical-align: -0.004em;" alt="\( T \)" />,
starting with the pair (1, 0).  Now consider <img src="fig/math/f06926aab0bc0e9f47ee2cd90f581bb2.svg" class="math-inline" style="height: 0.656em; vertical-align: -0.004em;" alt="\( T \)" /> to be the special case of
<img src="fig/math/cb1bd43764938dd0d271b5c7810257d2.svg" class="math-inline" style="height: 0.878em; vertical-align: -0.234em;" alt="\( {p=0} \)" /> and <img src="fig/math/07135faa5399dbe9425185586bd6242d.svg" class="math-inline" style="height: 0.878em; vertical-align: -0.234em;" alt="\( {q=1} \)" /> in a family of transformations <img src="fig/math/27485fa57aac362c12f3cb2fcd66342a.svg" class="math-inline" style="height: 0.977em; vertical-align: -0.325em;" alt="\( T_{pq} \)" />,
where <img src="fig/math/27485fa57aac362c12f3cb2fcd66342a.svg" class="math-inline" style="height: 0.977em; vertical-align: -0.325em;" alt="\( T_{pq} \)" /> transforms the pair <img src="fig/math/ea2319b50d39f07528935586077fff92.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {(a, b)} \)" /> according to 
<img src="fig/math/5abe8ae895e31cd7ab1160ddf92add64.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( a \gets {bq} + {aq} + {ap} \)" /> and <img src="fig/math/232e9f2a41f754a7c0551325a3e01f05.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( b \gets {bp} + {aq} \)" />.
Show that if we apply such a transformation <img src="fig/math/27485fa57aac362c12f3cb2fcd66342a.svg" class="math-inline" style="height: 0.977em; vertical-align: -0.325em;" alt="\( T_{pq} \)" /> twice, the
effect is the same as using a single transformation <img src="fig/math/4f694b2fe4e4719aa0dac2d674d0b3a0.svg" class="math-inline" style="height: 0.977em; vertical-align: -0.325em;" alt="\( T_{p'q'} \)" /> of the
same form, and compute <img src="fig/math/57e75abf57b8dff6be94ebb3d668a101.svg" class="math-inline" style="height: 0.942em; vertical-align: -0.234em;" alt="\( p'\! \)" /> and <img src="fig/math/64e83566bd37cbe1c40549eab5aa5f33.svg" class="math-inline" style="height: 0.942em; vertical-align: -0.234em;" alt="\( q'\! \)" /> in terms of <img src="fig/math/cce39738a2208cea750f01366fd29144.svg" class="math-inline" style="height: 0.724em; vertical-align: -0.232em;" alt="\( p \)" /> and <img src="fig/math/55e71917aae71d65907116d02f07c8f8.svg" class="math-inline" style="height: 0.678em; vertical-align: -0.241em;" alt="\( q \)" />.  This
gives us an explicit way to square these transformations, and thus we can
compute <img src="fig/math/97bb73b53bd84890ebced415bc5b713b.svg" class="math-inline" style="height: 0.683em; vertical-align: -0.000em;" alt="\( T^n \)" /> using successive squaring, as in the <code>fast-expt</code>
procedure.  Put this all together to complete the following procedure, which
runs in a logarithmic number of steps:<sup><a class="footnote_link" id="DOCF41" href="#FOOT41" epub:type="noteref">41</a></sup>
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">fib n</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">fib-iter </span><span class="lit">1</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> n</span><span class="clo">))</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">fib-iter a b p q count</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">cond</span><span class="pln"> </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> count </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> 
         b</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">((</span><span class="pln">even? count</span><span class="clo">)</span><span class="pln">
         </span><span class="opn">(</span><span class="pln">fib-iter a
                   b
                   ⟨</span><span class="pun">??</span><span class="pln">⟩  </span><span class="com">;compute </span><var><span class="com">p'</span></var><span class="pln">
                   ⟨</span><span class="pun">??</span><span class="pln">⟩  </span><span class="com">;compute </span><var><span class="com">q'</span></var><span class="pln">
                   </span><span class="opn">(</span><span class="pun">/</span><span class="pln"> count </span><span class="lit">2</span><span class="clo">)))</span><span class="pln">
        </span><span class="opn">(</span><span class="kwd">else</span><span class="pln"> 
         </span><span class="opn">(</span><span class="pln">fib-iter </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> b q</span><span class="clo">)</span><span class="pln"> 
                      </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> a q</span><span class="clo">)</span><span class="pln"> 
                      </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> a p</span><span class="clo">))</span><span class="pln">
                   </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> b p</span><span class="clo">)</span><span class="pln"> 
                      </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> a q</span><span class="clo">))</span><span class="pln">
                   p
                   q
                   </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> count </span><span class="lit">1</span><span class="clo">)))))</span></pre></div>
</blockquote>

<a id="g_t1_002e2_002e5"></a>
<a id="Greatest-Common-Divisors"></a>
<h4 class="subsection"><span class="secnum">1.2.5</span><span class="sectitle">Greatest Common Divisors</span></h4>

<p>The greatest common divisor (<abbr>GCD</abbr>) of two integers <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> and <img src="fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( b \)" /> is
defined to be the largest integer that divides both <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> and <img src="fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( b \)" /> with no
remainder.  For example, the <abbr>GCD</abbr> of 16 and 28 is 4.  In <a href="Chapter-2.xhtml#Chapter-2">Chapter 2</a>, when we investigate how to implement rational-number arithmetic, we will
need to be able to compute <abbr>GCD</abbr>s in order to reduce rational numbers
to lowest terms.  (To reduce a rational number to lowest terms, we must divide
both the numerator and the denominator by their <abbr>GCD</abbr>.  For example,
16/28 reduces to 4/7.)  One way to find the <abbr>GCD</abbr> of two integers is to
factor them and search for common factors, but there is a famous algorithm that
is much more efficient.
</p>
<p>The idea of the algorithm is based on the observation that, if <img src="fig/math/506c25753e5f5225576484e427d17c9b.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( r \)" /> is the
remainder when <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> is divided by <img src="fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( b \)" />, then the common divisors of <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> and
<img src="fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( b \)" /> are precisely the same as the common divisors of <img src="fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( b \)" /> and <img src="fig/math/506c25753e5f5225576484e427d17c9b.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( r \)" />.  Thus,
we can use the equation
</p>
<div class="example">
<pre class="example">GCD(a,b) = GCD(b,r)
</pre></div>

<p>to successively reduce the problem of computing a <abbr>GCD</abbr> to the problem
of computing the <abbr>GCD</abbr> of smaller and smaller pairs of integers.  For
example,
</p>
<div class="example">
<pre class="example">GCD(206,40) = GCD(40,6)
            = GCD(6,4)
            = GCD(4,2)
            = GCD(2,0) = 2
</pre></div>

<p>reduces <abbr>GCD</abbr>(206, 40) to <abbr>GCD</abbr>(2, 0), which is 2.  It is
possible to show that starting with any two positive integers and performing
repeated reductions will always eventually produce a pair where the second
number is 0.  Then the <abbr>GCD</abbr> is the other number in the pair.  This
method for computing the <abbr>GCD</abbr> is known as 
<a id="index-Euclid_0027s-Algorithm"></a>
<em>Euclid’s Algorithm</em>.<sup><a class="footnote_link" id="DOCF42" href="#FOOT42" epub:type="noteref">42</a></sup>
</p>
<p>It is easy to express Euclid’s Algorithm as a procedure:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">gcd a b</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pun">=</span><span class="pln"> b </span><span class="lit">0</span><span class="clo">)</span><span class="pln">
      a
      </span><span class="opn">(</span><span class="pln">gcd b </span><span class="opn">(</span><span class="pln">remainder a b</span><span class="clo">))))</span></pre></div>

<p>This generates an iterative process, whose number of steps grows as the
logarithm of the numbers involved.
</p>
<p>The fact that the number of steps required by Euclid’s Algorithm has
logarithmic growth bears an interesting relation to the Fibonacci numbers:
</p>
<blockquote>
<p><strong>Lamé’s Theorem:</strong> If Euclid’s Algorithm requires <img src="fig/math/83054be07bea98353c7cda3290903d5e.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( k \)" /> steps to
compute the <abbr>GCD</abbr> of some pair, then the smaller number in the pair
must be greater than or equal to the <img src="fig/math/a99501773dcc30d9f89e17ff1338d1eb.svg" class="math-inline" style="height: 0.892em; vertical-align: -0.010em;" alt="\( k^{\text{th}} \)" /> Fibonacci number.<sup><a class="footnote_link" id="DOCF43" href="#FOOT43" epub:type="noteref">43</a></sup>
</p></blockquote>

<p>We can use this theorem to get an order-of-growth estimate for Euclid’s
Algorithm.  Let <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> be the smaller of the two inputs to the procedure.  If
the process takes <img src="fig/math/83054be07bea98353c7cda3290903d5e.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( k \)" /> steps, then we must have 
<img src="fig/math/4dc3a31cbb87672a5f199a4a57784b3c.svg" class="math-inline" style="height: 1.118em; vertical-align: -0.180em;" alt="\( n \ge {\text{Fib}(k)} \approx {\varphi^k / \sqrt{5}} \)" />.  Therefore the number of steps <img src="fig/math/83054be07bea98353c7cda3290903d5e.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( k \)" />
grows as the logarithm (to the base <img src="fig/math/dcc52b7b3e1a0a821032c2d16b198829.svg" class="math-inline" style="height: 0.672em; vertical-align: -0.238em;" alt="\( \varphi \)" />) of <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />.  Hence, the order of
growth is <img src="fig/math/48be6efaded27da68b3a4aa70713c562.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\Theta(\log n)} \)" />.
</p>
<blockquote>
<p><strong><a id="Exercise-1_002e20"></a>Exercise 1.20:</strong> The process that a procedure
generates is of course dependent on the rules used by the interpreter.  As an
example, consider the iterative <code>gcd</code> procedure given above.  Suppose we
were to interpret this procedure using normal-order evaluation, as discussed in
<a href="1_002e1.xhtml#g_t1_002e1_002e5">1.1.5</a>.  (The normal-order-evaluation rule for <code>if</code> is
described in <a href="1_002e1.xhtml#Exercise-1_002e5">Exercise 1.5</a>.)  Using the substitution method (for normal
order), illustrate the process generated in evaluating <code>(gcd 206 40)</code> and
indicate the <code>remainder</code> operations that are actually performed.  How many
<code>remainder</code> operations are actually performed in the normal-order
evaluation of <code>(gcd 206 40)</code>?  In the applicative-order evaluation?
</p></blockquote>

<a id="g_t1_002e2_002e6"></a>
<a id="Example_003a-Testing-for-Primality"></a>
<h4 class="subsection"><span class="secnum">1.2.6</span><span class="sectitle">Example: Testing for Primality</span></h4>

<p>This section describes two methods for checking the primality of an integer
<img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />, one with order of growth <img src="fig/math/0b326d311946d63cd799ea924304ca88.svg" class="math-inline" style="height: 0.993em; vertical-align: -0.168em;" alt="\( {\Theta(\sqrt{n})} \)" />, and a
“probabilistic” algorithm with order of growth <img src="fig/math/48be6efaded27da68b3a4aa70713c562.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\Theta(\log n)} \)" />.
The exercises at the end of this section suggest programming projects based on
these algorithms.
</p>
<a id="Searching-for-divisors"></a>
<h5 class="subsubheading">Searching for divisors</h5>

<p>Since ancient times, mathematicians have been fascinated by problems concerning
prime numbers, and many people have worked on the problem of determining ways
to test if numbers are prime.  One way to test if a number is prime is to find
the number’s divisors.  The following program finds the smallest integral
divisor (greater than 1) of a given number <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />.  It does this in a
straightforward way, by testing <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> for divisibility by successive integers
starting with 2.
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">smallest-divisor n</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">find-divisor n </span><span class="lit">2</span><span class="clo">))</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">find-divisor n test-divisor</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">cond</span><span class="pln"> </span><span class="opn">((</span><span class="pun">&gt;</span><span class="pln"> </span><span class="opn">(</span><span class="pln">square test-divisor</span><span class="clo">)</span><span class="pln"> n</span><span class="clo">)</span><span class="pln"> 
         n</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">((</span><span class="pln">divides? test-divisor n</span><span class="clo">)</span><span class="pln"> 
         test-divisor</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">(</span><span class="kwd">else</span><span class="pln"> </span><span class="opn">(</span><span class="pln">find-divisor 
               n 
               </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> test-divisor </span><span class="lit">1</span><span class="clo">)))))</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">divides? a b</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pun">=</span><span class="pln"> </span><span class="opn">(</span><span class="pln">remainder b a</span><span class="clo">)</span><span class="pln"> </span><span class="lit">0</span><span class="clo">))</span></pre></div>

<p>We can test whether a number is prime as follows: <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> is prime if and only if
<img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> is its own smallest divisor.
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">prime? n</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pun">=</span><span class="pln"> n </span><span class="opn">(</span><span class="pln">smallest-divisor n</span><span class="clo">)))</span></pre></div>

<p>The end test for <code>find-divisor</code> is based on the fact that if <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> is not
prime it must have a divisor less than or equal to
<img src="fig/math/6401acda6e40516e261b2a2cd409285f.svg" class="math-inline" style="height: 0.993em; vertical-align: -0.168em;" alt="\( \sqrt{n} \)" />.<sup><a class="footnote_link" id="DOCF44" href="#FOOT44" epub:type="noteref">44</a></sup>  This means that the algorithm need only test divisors
between 1 and <img src="fig/math/6401acda6e40516e261b2a2cd409285f.svg" class="math-inline" style="height: 0.993em; vertical-align: -0.168em;" alt="\( \sqrt{n} \)" />.  Consequently, the number of steps required
to identify <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> as prime will have order of growth
<img src="fig/math/0b326d311946d63cd799ea924304ca88.svg" class="math-inline" style="height: 0.993em; vertical-align: -0.168em;" alt="\( {\Theta(\sqrt{n})} \)" />.
</p>
<a id="The-Fermat-test"></a>
<h5 class="subsubheading">The Fermat test</h5>

<p>The <img src="fig/math/48be6efaded27da68b3a4aa70713c562.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\Theta(\log n)} \)" /> primality test is based on a result from
number theory known as Fermat’s Little Theorem.<sup><a class="footnote_link" id="DOCF45" href="#FOOT45" epub:type="noteref">45</a></sup>
</p>
<blockquote>
<p><strong>Fermat’s Little Theorem:</strong> If <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> is a prime number and <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> is any
positive integer less than <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />, then <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> raised to the <img src="fig/math/3b6c232f796b2d291446b22cb38c933e.svg" class="math-inline" style="height: 0.892em; vertical-align: -0.010em;" alt="\( n^{\text{th}} \)" /> power is
congruent to <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> modulo <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />.
</p></blockquote>

<p>(Two numbers are said to be <a id="index-congruent-modulo"></a>
<em>congruent modulo</em> <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> if they both have
the same remainder when divided by <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />.  The remainder of a number <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> when
divided by <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> is also referred to as the <a id="index-remainder-of"></a>
<em>remainder of</em> <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" />
<a id="index-modulo"></a>
<em>modulo</em> <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />, or simply as <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> <a id="index-modulo-1"></a>
<em>modulo</em> <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />.)
</p>
<p>If <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> is not prime, then, in general, most of the numbers <img src="fig/math/fe5e256d86f2ab36533fbb225c24f80c.svg" class="math-inline" style="height: 0.519em; vertical-align: -0.005em;" alt="\( {a &amp;lt; n} \)" /> will
not satisfy the above relation.  This leads to the following algorithm for
testing primality: Given a number <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />, pick a random number <img src="fig/math/fe5e256d86f2ab36533fbb225c24f80c.svg" class="math-inline" style="height: 0.519em; vertical-align: -0.005em;" alt="\( {a &amp;lt; n} \)" /> and
compute the remainder of <img src="fig/math/105ea6d3173ee81b75f470740a59e52a.svg" class="math-inline" style="height: 0.691em; vertical-align: -0.009em;" alt="\( a^n \)" /> modulo <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />.  If the result is not equal
to <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" />, then <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> is certainly not prime.  If it is <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" />, then chances are
good that <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> is prime.  Now pick another random number <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> and test it
with the same method.  If it also satisfies the equation, then we can be even
more confident that <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> is prime.  By trying more and more values of <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" />,
we can increase our confidence in the result.  This algorithm is known as the
Fermat test.
</p>
<p>To implement the Fermat test, we need a procedure that computes the exponential
of a number modulo another number:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">expmod base exp m</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">cond</span><span class="pln"> </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> exp </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> </span><span class="lit">1</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">((</span><span class="pln">even? exp</span><span class="clo">)</span><span class="pln">
         </span><span class="opn">(</span><span class="pln">remainder 
          </span><span class="opn">(</span><span class="pln">square </span><span class="opn">(</span><span class="pln">expmod base </span><span class="opn">(</span><span class="pun">/</span><span class="pln"> exp </span><span class="lit">2</span><span class="clo">)</span><span class="pln"> m</span><span class="clo">))</span><span class="pln">
          m</span><span class="clo">))</span><span class="pln">
        </span><span class="opn">(</span><span class="kwd">else</span><span class="pln">
         </span><span class="opn">(</span><span class="pln">remainder 
          </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> base </span><span class="opn">(</span><span class="pln">expmod base </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> exp </span><span class="lit">1</span><span class="clo">)</span><span class="pln"> m</span><span class="clo">))</span><span class="pln">
          m</span><span class="clo">))))</span></pre></div>

<p>This is very similar to the <code>fast-expt</code> procedure of <a href="#g_t1_002e2_002e4">1.2.4</a>.
It uses successive squaring, so that the number of steps grows logarithmically
with the exponent.<sup><a class="footnote_link" id="DOCF46" href="#FOOT46" epub:type="noteref">46</a></sup>
</p>
<p>The Fermat test is performed by choosing at random a number <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> between 1 and
<img src="fig/math/1aeb2237b7777768e88172586e76ee37.svg" class="math-inline" style="height: 0.652em; vertical-align: -0.009em;" alt="\( {n-1} \)" /> inclusive and checking whether the remainder modulo <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> of the
<img src="fig/math/3b6c232f796b2d291446b22cb38c933e.svg" class="math-inline" style="height: 0.892em; vertical-align: -0.010em;" alt="\( n^{\text{th}} \)" /> power of <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> is equal to <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" />.  The random number <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> is chosen
using the procedure <code>random</code>, which we assume is included as a primitive
in Scheme. <code>Random</code> returns a nonnegative integer less than its integer
input.  Hence, to obtain a random number between 1 and <img src="fig/math/1aeb2237b7777768e88172586e76ee37.svg" class="math-inline" style="height: 0.652em; vertical-align: -0.009em;" alt="\( {n-1} \)" />, we call
<code>random</code> with an input of <img src="fig/math/1aeb2237b7777768e88172586e76ee37.svg" class="math-inline" style="height: 0.652em; vertical-align: -0.009em;" alt="\( {n-1} \)" /> and add 1 to the result:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">fermat-test n</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">try-it a</span><span class="clo">)</span><span class="pln">
    </span><span class="opn">(</span><span class="pun">=</span><span class="pln"> </span><span class="opn">(</span><span class="pln">expmod a n n</span><span class="clo">)</span><span class="pln"> a</span><span class="clo">))</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">try-it </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="opn">(</span><span class="pln">random </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> n </span><span class="lit">1</span><span class="clo">)))))</span></pre></div>

<p>The following procedure runs the test a given number of times, as specified by
a parameter.  Its value is true if the test succeeds every time, and false
otherwise.
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">fast-prime? n times</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">cond</span><span class="pln"> </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> times </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> true</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">((</span><span class="pln">fermat-test n</span><span class="clo">)</span><span class="pln"> 
         </span><span class="opn">(</span><span class="pln">fast-prime? n </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> times </span><span class="lit">1</span><span class="clo">)))</span><span class="pln">
        </span><span class="opn">(</span><span class="kwd">else</span><span class="pln"> false</span><span class="clo">)))</span></pre></div>

<a id="Probabilistic-methods"></a>
<h5 class="subsubheading">Probabilistic methods</h5>

<p>The Fermat test differs in character from most familiar algorithms, in which
one computes an answer that is guaranteed to be correct.  Here, the answer
obtained is only probably correct.  More precisely, if <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> ever fails the
Fermat test, we can be certain that <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> is not prime.  But the fact that
<img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> passes the test, while an extremely strong indication, is still not a
guarantee that <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> is prime.  What we would like to say is that for any
number <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />, if we perform the test enough times and find that <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> always
passes the test, then the probability of error in our primality test can be
made as small as we like.
</p>
<p>Unfortunately, this assertion is not quite correct.  There do exist numbers
that fool the Fermat test: numbers <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> that are not prime and yet have the
property that <img src="fig/math/105ea6d3173ee81b75f470740a59e52a.svg" class="math-inline" style="height: 0.691em; vertical-align: -0.009em;" alt="\( a^n \)" /> is congruent to <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> modulo <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> for all integers
<img src="fig/math/fe5e256d86f2ab36533fbb225c24f80c.svg" class="math-inline" style="height: 0.519em; vertical-align: -0.005em;" alt="\( {a &amp;lt; n} \)" />.  Such numbers are extremely rare, so the Fermat test is quite
reliable in practice.<sup><a class="footnote_link" id="DOCF47" href="#FOOT47" epub:type="noteref">47</a></sup>
</p>
<p>There are variations of the Fermat test that cannot be fooled.  In these tests,
as with the Fermat method, one tests the primality of an integer <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> by
choosing a random integer <img src="fig/math/fe5e256d86f2ab36533fbb225c24f80c.svg" class="math-inline" style="height: 0.519em; vertical-align: -0.005em;" alt="\( {a &amp;lt; n} \)" /> and checking some condition that depends
upon <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> and <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" />.  (See <a href="#Exercise-1_002e28">Exercise 1.28</a> for an example of such a test.)
On the other hand, in contrast to the Fermat test, one can prove that, for any
<img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />, the condition does not hold for most of the integers <img src="fig/math/fe5e256d86f2ab36533fbb225c24f80c.svg" class="math-inline" style="height: 0.519em; vertical-align: -0.005em;" alt="\( {a &amp;lt; n} \)" /> unless
<img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> is prime.  Thus, if <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> passes the test for some random choice of
<img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" />, the chances are better than even that <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> is prime.  If <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> passes
the test for two random choices of <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" />, the chances are better than 3 out of
4 that <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> is prime. By running the test with more and more randomly chosen
values of <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> we can make the probability of error as small as we like.
</p>
<p>The existence of tests for which one can prove that the chance of error becomes
arbitrarily small has sparked interest in algorithms of this type, which have
come to be known as <a id="index-probabilistic-algorithms"></a>
<em>probabilistic algorithms</em>.  There is a great deal
of research activity in this area, and probabilistic algorithms have been
fruitfully applied to many fields.<sup><a class="footnote_link" id="DOCF48" href="#FOOT48" epub:type="noteref">48</a></sup>
</p>
<blockquote>
<p><strong><a id="Exercise-1_002e21"></a>Exercise 1.21:</strong> Use the <code>smallest-divisor</code>
procedure to find the smallest divisor of each of the following numbers: 199,
1999, 19999.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e22"></a>Exercise 1.22:</strong> Most Lisp implementations include
a primitive called <code>runtime</code> that returns an integer that specifies the
amount of time the system has been running (measured, for example, in
microseconds).  The following <code>timed-prime-test</code> procedure, when called
with an integer <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />, prints <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> and checks to see if <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> is prime.  If
<img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> is prime, the procedure prints three asterisks followed by the amount of
time used in performing the test.
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">timed-prime-test n</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">newline</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">display n</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">start-prime-test n </span><span class="opn">(</span><span class="pln">runtime</span><span class="clo">)))</span></pre></div>

<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">start-prime-test n start-time</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pln">prime? n</span><span class="clo">)</span><span class="pln">
      </span><span class="opn">(</span><span class="pln">report-prime </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> </span><span class="opn">(</span><span class="pln">runtime</span><span class="clo">)</span><span class="pln"> 
                       start-time</span><span class="clo">))))</span></pre></div>

<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">report-prime elapsed-time</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">display </span><span class="str">" *** "</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">display elapsed-time</span><span class="clo">))</span></pre></div>

<p>Using this procedure, write a procedure <code>search-for-primes</code> that checks
the primality of consecutive odd integers in a specified range.  Use your
procedure to find the three smallest primes larger than 1000; larger than
10,000; larger than 100,000; larger than 1,000,000.  Note the time needed to
test each prime.  Since the testing algorithm has order of growth of
<img src="fig/math/0b326d311946d63cd799ea924304ca88.svg" class="math-inline" style="height: 0.993em; vertical-align: -0.168em;" alt="\( {\Theta(\sqrt{n})} \)" />, you should expect that testing for primes
around 10,000 should take about <img src="fig/math/791dda34684aa76ee72ce36deacb06ee.svg" class="math-inline" style="height: 0.993em; vertical-align: -0.059em;" alt="\( \sqrt{10} \)" /> times as long as testing for
primes around 1000.  Do your timing data bear this out?  How well do the data
for 100,000 and 1,000,000 support the <img src="fig/math/0b326d311946d63cd799ea924304ca88.svg" class="math-inline" style="height: 0.993em; vertical-align: -0.168em;" alt="\( {\Theta(\sqrt{n})} \)" /> prediction?  Is your
result compatible with the notion that programs on your machine run in time
proportional to the number of steps required for the computation?
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e23"></a>Exercise 1.23:</strong> The <code>smallest-divisor</code>
procedure shown at the start of this section does lots of needless testing:
After it checks to see if the number is divisible by 2 there is no point in
checking to see if it is divisible by any larger even numbers.  This suggests
that the values used for <code>test-divisor</code> should not be 2, 3, 4, 5, 6,
…, but rather 2, 3, 5, 7, 9, ….  To implement this change, define a
procedure <code>next</code> that returns 3 if its input is equal to 2 and otherwise
returns its input plus 2.  Modify the <code>smallest-divisor</code> procedure to use
<code>(next test-divisor)</code> instead of <code>(+ test-divisor 1)</code>.  With
<code>timed-prime-test</code> incorporating this modified version of
<code>smallest-divisor</code>, run the test for each of the 12 primes found in
<a href="#Exercise-1_002e22">Exercise 1.22</a>.  Since this modification halves the number of test steps,
you should expect it to run about twice as fast.  Is this expectation
confirmed?  If not, what is the observed ratio of the speeds of the two
algorithms, and how do you explain the fact that it is different from 2?
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e24"></a>Exercise 1.24:</strong> Modify the
<code>timed-prime-test</code> procedure of <a href="#Exercise-1_002e22">Exercise 1.22</a> to use
<code>fast-prime?</code> (the Fermat method), and test each of the 12 primes you
found in that exercise.  Since the Fermat test has <img src="fig/math/48be6efaded27da68b3a4aa70713c562.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\Theta(\log n)} \)" />
growth, how would you expect the time to test primes near 1,000,000 to
compare with the time needed to test primes near 1000?  Do your data bear this
out?  Can you explain any discrepancy you find?
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e25"></a>Exercise 1.25:</strong> Alyssa P. Hacker complains that
we went to a lot of extra work in writing <code>expmod</code>.  After all, she says,
since we already know how to compute exponentials, we could have simply written
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">expmod base exp m</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">remainder </span><span class="opn">(</span><span class="pln">fast-expt base exp</span><span class="clo">)</span><span class="pln"> m</span><span class="clo">))</span></pre></div>

<p>Is she correct?  Would this procedure serve as well for our fast prime tester?
Explain.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e26"></a>Exercise 1.26:</strong> Louis Reasoner is having great
difficulty doing <a href="#Exercise-1_002e24">Exercise 1.24</a>.  His <code>fast-prime?</code> test seems to run
more slowly than his <code>prime?</code> test.  Louis calls his friend Eva Lu Ator
over to help.  When they examine Louis’s code, they find that he has rewritten
the <code>expmod</code> procedure to use an explicit multiplication, rather than
calling <code>square</code>:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">expmod base exp m</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">cond</span><span class="pln"> </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> exp </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> </span><span class="lit">1</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">((</span><span class="pln">even? exp</span><span class="clo">)</span><span class="pln">
         </span><span class="opn">(</span><span class="pln">remainder 
          </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="opn">(</span><span class="pln">expmod base </span><span class="opn">(</span><span class="pun">/</span><span class="pln"> exp </span><span class="lit">2</span><span class="clo">)</span><span class="pln"> m</span><span class="clo">)</span><span class="pln">
             </span><span class="opn">(</span><span class="pln">expmod base </span><span class="opn">(</span><span class="pun">/</span><span class="pln"> exp </span><span class="lit">2</span><span class="clo">)</span><span class="pln"> m</span><span class="clo">))</span><span class="pln">
          m</span><span class="clo">))</span><span class="pln">
        </span><span class="opn">(</span><span class="kwd">else</span><span class="pln">
         </span><span class="opn">(</span><span class="pln">remainder 
          </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> base 
             </span><span class="opn">(</span><span class="pln">expmod base </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> exp </span><span class="lit">1</span><span class="clo">)</span><span class="pln"> m</span><span class="clo">))</span><span class="pln">
          m</span><span class="clo">))))</span></pre></div>

<p>“I don’t see what difference that could make,” says Louis.  “I do.”<!-- /@w -->  says
Eva.  “By writing the procedure like that, you have transformed the
<img src="fig/math/48be6efaded27da68b3a4aa70713c562.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\Theta(\log n)} \)" /> process into a <img src="fig/math/67f39a78859198da759c097b570842e8.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\Theta(n)} \)" /> process.”
Explain.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e27"></a>Exercise 1.27:</strong> Demonstrate that the Carmichael
numbers listed in <a href="#Footnote-47">Footnote 47</a> really do fool the Fermat test.  That is,
write a procedure that takes an integer <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> and tests whether <img src="fig/math/105ea6d3173ee81b75f470740a59e52a.svg" class="math-inline" style="height: 0.691em; vertical-align: -0.009em;" alt="\( a^n \)" /> is
congruent to <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> modulo <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> for every <img src="fig/math/fe5e256d86f2ab36533fbb225c24f80c.svg" class="math-inline" style="height: 0.519em; vertical-align: -0.005em;" alt="\( {a &amp;lt; n} \)" />, and try your procedure
on the given Carmichael numbers.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e28"></a>Exercise 1.28:</strong> One variant of the Fermat test
that cannot be fooled is called the <a id="index-Miller_002dRabin-test"></a>
<em>Miller-Rabin test</em> (<a href="References.xhtml#Miller-1976">Miller 1976</a>;
<a href="References.xhtml#Rabin-1980">Rabin 1980</a>).  This starts from an alternate form of Fermat’s Little Theorem,
which states that if <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> is a prime number and <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> is any positive integer
less than <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />, then <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> raised to the <img src="fig/math/c8beea704f256f9704f3db4847b94c52.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {(n-1)} \)" />-st power is congruent to 1
modulo <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />.  To test the primality of a number <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> by the Miller-Rabin
test, we pick a random number <img src="fig/math/fe5e256d86f2ab36533fbb225c24f80c.svg" class="math-inline" style="height: 0.519em; vertical-align: -0.005em;" alt="\( {a &amp;lt; n} \)" /> and raise <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> to the <img src="fig/math/c8beea704f256f9704f3db4847b94c52.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {(n-1)} \)" />-st
power modulo <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> using the <code>expmod</code> procedure.  However, whenever we
perform the squaring step in <code>expmod</code>, we check to see if we have
discovered a “nontrivial square root of 1 modulo <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />,” that is, a number
not equal to 1 or <img src="fig/math/1aeb2237b7777768e88172586e76ee37.svg" class="math-inline" style="height: 0.652em; vertical-align: -0.009em;" alt="\( {n-1} \)" /> whose square is equal to 1 modulo <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />.  It is
possible to prove that if such a nontrivial square root of 1 exists, then <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />
is not prime.  It is also possible to prove that if <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> is an odd number that
is not prime, then, for at least half the numbers <img src="fig/math/fe5e256d86f2ab36533fbb225c24f80c.svg" class="math-inline" style="height: 0.519em; vertical-align: -0.005em;" alt="\( {a &amp;lt; n} \)" />, computing
<img src="fig/math/8eb6a52f0a1b2964cd27430784f25ad9.svg" class="math-inline" style="height: 0.854em; vertical-align: -0.010em;" alt="\( a^{n-1} \)" /> in this way will reveal a nontrivial square root of 1 modulo
<img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />.  (This is why the Miller-Rabin test cannot be fooled.)  Modify the
<code>expmod</code> procedure to signal if it discovers a nontrivial square root of
1, and use this to implement the Miller-Rabin test with a procedure analogous
to <code>fermat-test</code>.  Check your procedure by testing various known primes
and non-primes.  Hint: One convenient way to make <code>expmod</code> signal is to
have it return 0.
</p></blockquote>

<div class="footnote">
<h4 class="footnotes-heading">Footnotes</h4>

<div><p id="FOOT29" epub:type="footnote"><a class="footnote_backlink" href="#DOCF29"><sup>29</sup></a>
In a real program we would probably use the block structure introduced in the last section to hide the definition of <code>fact-iter</code>: </p>
<div class="lisp"> <pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">factorial n</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">iter product counter</span><span class="clo">)</span><span class="pln">
    </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pun">&gt;</span><span class="pln"> counter n</span><span class="clo">)</span><span class="pln">
        product
        </span><span class="opn">(</span><span class="pln">iter </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> counter product</span><span class="clo">)</span><span class="pln">
              </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> counter </span><span class="lit">1</span><span class="clo">))))</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">iter </span><span class="lit">1</span><span class="pln"> </span><span class="lit">1</span><span class="clo">))</span></pre></div> 
<p>We avoided doing this here so as to minimize the number of things to think about at once.</p>
</div>
<div><p id="FOOT30" epub:type="footnote"><a class="footnote_backlink" href="#DOCF30"><sup>30</sup></a>
When we discuss the implementation of procedures on register machines in <a href="Chapter-5.xhtml#Chapter-5">Chapter 5</a>, we will see that any iterative process can be realized “in hardware” as a machine that has a fixed set of registers and no auxiliary memory.  In contrast, realizing a recursive process requires a machine that uses an auxiliary data structure known as a <a id="index-stack"></a> <em>stack</em>.</p>
</div>
<div><p id="FOOT31" epub:type="footnote"><a class="footnote_backlink" href="#DOCF31"><sup>31</sup></a>
Tail recursion has long been known as a compiler optimization trick.  A coherent semantic basis for tail recursion was provided by Carl <a href="References.xhtml#Hewitt-_00281977_0029">Hewitt (1977)</a>, who explained it in terms of the “message-passing” model of computation that we shall discuss in <a href="Chapter-3.xhtml#Chapter-3">Chapter 3</a>.  Inspired by this, Gerald Jay Sussman and Guy Lewis Steele Jr. (see <a href="References.xhtml#Steele-and-Sussman-1975">Steele and Sussman 1975</a>) constructed a tail-recursive interpreter for Scheme.  Steele later showed how tail recursion is a consequence of the natural way to compile procedure calls (<a href="References.xhtml#Steele-1977">Steele 1977</a>).  The <abbr>IEEE</abbr> standard for Scheme requires that Scheme implementations be tail-recursive.</p>
</div>
<div><p id="FOOT32" epub:type="footnote"><a class="footnote_backlink" href="#DOCF32"><sup>32</sup></a>
An example of this was hinted at in <a href="1_002e1.xhtml#g_t1_002e1_002e3">1.1.3</a>. The interpreter itself evaluates expressions using a tree-recursive process.</p>
</div>
<div><p id="FOOT33" epub:type="footnote"><a class="footnote_backlink" href="#DOCF33"><sup>33</sup></a>
For example, work through in detail how the reduction rule applies to the problem of making change for 10 cents using pennies and nickels.</p>
</div>
<div><p id="FOOT34" epub:type="footnote"><a class="footnote_backlink" href="#DOCF34"><sup>34</sup></a>
One approach to coping with redundant computations is to arrange matters so that we automatically construct a table of values as they are computed.  Each time we are asked to apply the procedure to some argument, we first look to see if the value is already stored in the table, in which case we avoid performing the redundant computation. This strategy, known as <a id="index-tabulation"></a> <em>tabulation</em> or <a id="index-memoization"></a> <em>memoization</em>, can be implemented in a straightforward way.  Tabulation can sometimes be used to transform processes that require an exponential number of steps (such as <code>count-change</code>) into processes whose space and time requirements grow linearly with the input.  See <a href="3_002e3.xhtml#Exercise-3_002e27">Exercise 3.27</a>.</p>
</div>
<div><p id="FOOT35" epub:type="footnote"><a class="footnote_backlink" href="#DOCF35"><sup>35</sup></a>
The elements of Pascal’s triangle are called the <a id="index-binomial-coefficients"></a> <em>binomial coefficients</em>, because the <img src="fig/math/1d26333e30d7ef6a556179ea33325d48.svg" class="math-inline" style="height: 0.892em; vertical-align: -0.010em;" alt="\( {n^{\text{th}}} \)" /> row consists of the coefficients of the terms in the expansion of <img src="fig/math/1d548631d553cb5c93d658f0f25d296c.svg" class="math-inline" style="height: 0.933em; vertical-align: -0.225em;" alt="\( {(x + y)^n} \)" />.  This pattern for computing the coefficients appeared in Blaise Pascal’s 1653 seminal work on probability theory, <cite>Traité du triangle arithmétique</cite>.  According to <a href="References.xhtml#Knuth-_00281973_0029">Knuth (1973)</a>, the same pattern appears in the <cite>Szu-yuen Yü-chien</cite> (“The Precious Mirror of the Four Elements”), published by the Chinese mathematician Chu Shih-chieh in 1303, in the works of the twelfth-century Persian poet and mathematician Omar Khayyam, and in the works of the twelfth-century Hindu mathematician Bháscara Áchárya.</p>
</div>
<div><p id="FOOT36" epub:type="footnote"><a class="footnote_backlink" href="#DOCF36"><sup>36</sup></a>
These statements mask a great deal of oversimplification. For instance, if we count process steps as “machine operations” we are making the assumption that the number of machine operations needed to perform, say, a multiplication is independent of the size of the numbers to be multiplied, which is false if the numbers are sufficiently large.  Similar remarks hold for the estimates of space.  Like the design and description of a process, the analysis of a process can be carried out at various levels of abstraction.</p>
</div>
<div><p id="FOOT37" epub:type="footnote"><a class="footnote_backlink" href="#DOCF37"><sup>37</sup></a>
More precisely, the number of multiplications required is equal to 1 less than the log base 2 of <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> plus the number of ones in the binary representation of <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />.  This total is always less than twice the log base 2 of <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />.  The arbitrary constants <img src="fig/math/9e40c899364b3a7bc648f5071c8e501c.svg" class="math-inline" style="height: 0.843em; vertical-align: -0.148em;" alt="\( k_1 \)" /> and <img src="fig/math/f770f36651db7f4958828f415118c5e8.svg" class="math-inline" style="height: 0.843em; vertical-align: -0.148em;" alt="\( k_2 \)" /> in the definition of order notation imply that, for a logarithmic process, the base to which logarithms are taken does not matter, so all such processes are described as <img src="fig/math/48be6efaded27da68b3a4aa70713c562.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\Theta(\log n)} \)" />.</p>
</div>
<div><p id="FOOT38" epub:type="footnote"><a class="footnote_backlink" href="#DOCF38"><sup>38</sup></a>
You may wonder why anyone would care about raising numbers to the 1000th power.  See <a href="#g_t1_002e2_002e6">1.2.6</a>.</p>
</div>
<div><p id="FOOT39" epub:type="footnote"><a class="footnote_backlink" href="#DOCF39"><sup>39</sup></a>
This iterative algorithm is ancient.  It appears in the <cite>Chandah-sutra</cite> by Áchárya Pingala, written before 200 <abbr>B.C.</abbr> See <a href="References.xhtml#Knuth-1981">Knuth 1981</a>, section 4.6.3, for a full discussion and analysis of this and other methods of exponentiation.</p>
</div>
<div><p id="FOOT40" epub:type="footnote"><a class="footnote_backlink" href="#DOCF40"><sup>40</sup></a>
This algorithm, which is sometimes known as the “Russian peasant method” of multiplication, is ancient.  Examples of its use are found in the Rhind Papyrus, one of the two oldest mathematical documents in existence, written about 1700 <abbr>B.C.</abbr> (and copied from an even older document) by an Egyptian scribe named A’h-mose.</p>
</div>
<div><p id="FOOT41" epub:type="footnote"><a class="footnote_backlink" href="#DOCF41"><sup>41</sup></a>
This exercise was suggested to us by Joe Stoy, based on an example in <a href="References.xhtml#Kaldewaij-1990">Kaldewaij 1990</a>.</p>
</div>
<div><p id="FOOT42" epub:type="footnote"><a class="footnote_backlink" href="#DOCF42"><sup>42</sup></a>
Euclid’s Algorithm is so called because  it appears in Euclid’s <cite>Elements</cite> (Book 7, ca. 300 <abbr>B.C.</abbr>).   According to <a href="References.xhtml#Knuth-_00281973_0029">Knuth (1973)</a>, it can be considered the oldest known nontrivial  algorithm.  The ancient Egyptian method of multiplication (<a href="#Exercise-1_002e18">Exercise 1.18</a>) is  surely older, but, as Knuth explains, Euclid’s algorithm is the oldest known to  have been presented as a general algorithm, rather than as a set of illustrative examples.</p>
</div>
<div><p id="FOOT43" epub:type="footnote"><a class="footnote_backlink" href="#DOCF43"><sup>43</sup></a>
This theorem was proved in 1845 by Gabriel Lamé, a French mathematician and engineer known chiefly for his contributions to mathematical physics.  To prove the theorem, we consider pairs <img src="fig/math/4f4d9d2c178554d258955b5882886b71.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {(a_k, b_k)} \)" />, where <img src="fig/math/c2b388f46177fef311a426f168e037d0.svg" class="math-inline" style="height: 0.857em; vertical-align: -0.163em;" alt="\( {a_k \ge b_k} \)" />,  for which Euclid’s Algorithm terminates in <img src="fig/math/83054be07bea98353c7cda3290903d5e.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( k \)" /> steps.  The proof is based on the claim that, if <img src="fig/math/f91a2e4e97b6d4a9352d940625decdc0.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {(a_{k+1}, b_{k+1})} \to {(a_k, b_k)} \to {(a_{k-1}, b_{k-1})} \)" />  are three successive pairs  in the reduction process, then we must have <img src="fig/math/c02eacd6ed941e61dd6627af23507a75.svg" class="math-inline" style="height: 0.857em; vertical-align: -0.163em;" alt="\( b_{k+1} \ge b_k + b_{k-1} \)" />.   To verify the claim, consider that a reduction step is defined by applying the  transformation <img src="fig/math/7913884e304c591ea6986727d9c56e66.svg" class="math-inline" style="height: 0.857em; vertical-align: -0.163em;" alt="\( {a_{k-1} = b_k} \)" />, <img src="fig/math/3cc38c0fc219be9688662626a0b0c48b.svg" class="math-inline" style="height: 0.857em; vertical-align: -0.163em;" alt="\( {b_{k-1} =} \)" /> remainder of <img src="fig/math/07febb67a15c456e95ebbdb91c5910b7.svg" class="math-inline" style="height: 0.598em; vertical-align: -0.162em;" alt="\( a_k \)" />  divided by <img src="fig/math/7b7c05b32ae65e232eca6bbe10d21ea1.svg" class="math-inline" style="height: 0.857em; vertical-align: -0.163em;" alt="\( b_k \)" />.  The second equation means that <img src="fig/math/d6d4e2bcb9ab1e420b2a77bdb19d8fb3.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( a_k = {qb_k} + {b_{k-1}} \)" />  for some positive integer <img src="fig/math/55e71917aae71d65907116d02f07c8f8.svg" class="math-inline" style="height: 0.678em; vertical-align: -0.241em;" alt="\( q \)" />.  And since <img src="fig/math/55e71917aae71d65907116d02f07c8f8.svg" class="math-inline" style="height: 0.678em; vertical-align: -0.241em;" alt="\( q \)" /> must be at least 1 we have  <img src="fig/math/938e4d2065401215ca379761b3a64e9d.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( a_k = {qb_k} + b_{k-1} \ge b_k + b_{k-1} \)" />.  But in the previous reduction  step we have <img src="fig/math/438f8ebb132c2cec5e4312a20d21e1b6.svg" class="math-inline" style="height: 0.857em; vertical-align: -0.163em;" alt="\( b_{k+1} = a_k \)" />.  Therefore, <img src="fig/math/88677bf9dcc1a761dc146cb860233562.svg" class="math-inline" style="height: 0.857em; vertical-align: -0.163em;" alt="\( b_{k+1} = a_k \ge b_k + b_{k-1} \)" />. This verifies the claim.  Now we can prove the theorem by induction on <img src="fig/math/83054be07bea98353c7cda3290903d5e.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( k \)" />,  the number of steps that the algorithm requires to terminate.  The result is true for  <img src="fig/math/bb08cea3f77bfdf5d4c5dd747eeb776d.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( {k = 1} \)" />, since this merely requires that <img src="fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( b \)" /> be at least as large as <img src="fig/math/45b5ef7d699444ab210b863170b7461a.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\text{Fib}(1) = 1} \)" />.   Now, assume that the result is true for all integers less than or equal to <img src="fig/math/83054be07bea98353c7cda3290903d5e.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( k \)" /> and establish the result for <img src="fig/math/17d112fd6f44f2145c3129b029e7ac8b.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( {k + 1} \)" />.   Let <img src="fig/math/f91a2e4e97b6d4a9352d940625decdc0.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {(a_{k+1}, b_{k+1})} \to {(a_k, b_k)} \to {(a_{k-1}, b_{k-1})} \)" />  be successive pairs in the reduction  process.  By our induction hypotheses, we have <img src="fig/math/3ef36ea21d5611df87ff2c3d91236e32.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( b_{k-1} \ge {\text{Fib}(k - 1)} \)" />  and <img src="fig/math/1133dbc7a8bdab0aaed8b78933faac11.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( b_k \ge {\text{Fib}(k)} \)" />.  Thus, applying the claim we just proved together with  the definition of the Fibonacci numbers gives  <img src="fig/math/b54c123a3fd5277f0165afffbbc74c83.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( b_{k+1} \ge b_k + b_{k-1} \ge {\text{Fib}(k)} + {\text{Fib}(k-1)} = {\text{Fib}(k+1)} \)" />,  which completes the proof of Lamé’s Theorem.</p>
</div>
<div><p id="FOOT44" epub:type="footnote"><a class="footnote_backlink" href="#DOCF44"><sup>44</sup></a>
If <img src="fig/math/94022487faed4226073f19cc394c11d0.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( d \)" /> is a divisor of <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />, then so is <img src="fig/math/9101f115e5e93ec5cec5de214927fb7f.svg" class="math-inline" style="height: 0.852em; vertical-align: -0.159em;" alt="\( {n \,/\, d} \)" />.  But <img src="fig/math/94022487faed4226073f19cc394c11d0.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( d \)" /> and <img src="fig/math/9101f115e5e93ec5cec5de214927fb7f.svg" class="math-inline" style="height: 0.852em; vertical-align: -0.159em;" alt="\( {n \,/\, d} \)" /> cannot both be greater than <img src="fig/math/6401acda6e40516e261b2a2cd409285f.svg" class="math-inline" style="height: 0.993em; vertical-align: -0.168em;" alt="\( \sqrt{n} \)" />.</p>
</div>
<div><p id="FOOT45" epub:type="footnote"><a class="footnote_backlink" href="#DOCF45"><sup>45</sup></a>
Pierre de Fermat (1601-1665) is considered to be the founder of modern number theory.  He obtained many important number-theoretic results, but he usually announced just the results, without providing his proofs.  Fermat’s Little Theorem was stated in a letter he wrote in 1640.  The first published proof was given by Euler in 1736 (and an earlier, identical proof was discovered in the unpublished manuscripts of Leibniz).  The most famous of Fermat’s results—known as Fermat’s Last Theorem—was jotted down in 1637 in his copy of the book <cite>Arithmetic</cite> (by the third-century Greek mathematician Diophantus) with the remark “I have discovered a truly remarkable proof, but this margin is too small to contain it.”  Finding a proof of Fermat’s Last Theorem became one of the most famous challenges in number theory.  A complete solution was finally given in 1995 by Andrew Wiles of Princeton University.</p>
</div>
<div><p id="FOOT46" epub:type="footnote"><a class="footnote_backlink" href="#DOCF46"><sup>46</sup></a>
The reduction steps in the cases where the exponent <img src="fig/math/debcc3e84db401938012afdc2ced88f1.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( e \)" /> is greater than 1 are based on the fact that, for any integers <img src="fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( x \)" />, <img src="fig/math/05e4cdb2f26a4f66b68c167423907fea.svg" class="math-inline" style="height: 0.669em; vertical-align: -0.235em;" alt="\( y \)" />, and <img src="fig/math/d87e6d0d6a9513640fdd6193cde8b6a3.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( m \)" />, we can find the remainder of <img src="fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( x \)" /> times <img src="fig/math/05e4cdb2f26a4f66b68c167423907fea.svg" class="math-inline" style="height: 0.669em; vertical-align: -0.235em;" alt="\( y \)" /> modulo <img src="fig/math/d87e6d0d6a9513640fdd6193cde8b6a3.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( m \)" /> by computing separately the remainders of <img src="fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( x \)" /> modulo <img src="fig/math/d87e6d0d6a9513640fdd6193cde8b6a3.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( m \)" /> and <img src="fig/math/05e4cdb2f26a4f66b68c167423907fea.svg" class="math-inline" style="height: 0.669em; vertical-align: -0.235em;" alt="\( y \)" /> modulo <img src="fig/math/d87e6d0d6a9513640fdd6193cde8b6a3.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( m \)" />, multiplying these, and then taking the remainder of the result modulo <img src="fig/math/d87e6d0d6a9513640fdd6193cde8b6a3.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( m \)" />.  For instance, in the case where <img src="fig/math/debcc3e84db401938012afdc2ced88f1.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( e \)" /> is even, we compute the remainder of <img src="fig/math/074fefd2a5f678baa3f4dfd220035e99.svg" class="math-inline" style="height: 0.862em; vertical-align: -0.006em;" alt="\( b^{e / 2} \)" /> modulo <img src="fig/math/d87e6d0d6a9513640fdd6193cde8b6a3.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( m \)" />, square this, and take the remainder modulo <img src="fig/math/d87e6d0d6a9513640fdd6193cde8b6a3.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( m \)" />.  This technique is useful because it means we can perform our computation without ever having to deal with numbers much larger than <img src="fig/math/d87e6d0d6a9513640fdd6193cde8b6a3.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( m \)" />. (Compare <a href="#Exercise-1_002e25">Exercise 1.25</a>.)</p>
</div>
<div><p id="FOOT47" epub:type="footnote"><a class="footnote_backlink" href="#DOCF47"><sup>47</sup></a>
<a id="Footnote-47"></a>Numbers that fool the Fermat test are called <a id="index-Carmichael-numbers"></a> <em>Carmichael numbers</em>, and little is known about them other than that they are extremely rare.  There are 255 Carmichael numbers below 100,000,000.  The smallest few are 561, 1105, 1729, 2465, 2821, and 6601.  In testing primality of very large numbers chosen at random, the chance of stumbling upon a value that fools the Fermat test is less than the chance that cosmic radiation will cause the computer to make an error in carrying out a “correct” algorithm.  Considering an algorithm to be inadequate for the first reason but not for the second illustrates the difference between mathematics and engineering.</p>
</div>
<div><p id="FOOT48" epub:type="footnote"><a class="footnote_backlink" href="#DOCF48"><sup>48</sup></a>
One of the most striking applications of probabilistic prime testing has been to the field of cryptography.  Although it is now computationally infeasible to factor an arbitrary 200-digit number, the primality of such a number can be checked in a few seconds with the Fermat test.  This fact forms the basis of a technique for constructing “unbreakable codes” suggested by <a href="References.xhtml#Rivest-et-al_002e-_00281977_0029">Rivest et al. (1977)</a>.   The resulting <a id="index-RSA-algorithm"></a> <em>RSA algorithm</em> has become a widely used technique for enhancing the security of electronic communications.  Because of this and related developments, the study of prime numbers, once considered the epitome of a topic in “pure” mathematics to be studied only for its own sake, now turns out to have important practical applications to cryptography, electronic funds transfer, and information retrieval.</p>
</div>
</div>
<nav class="header">
<p>
Next: <a href="1_002e3.xhtml#g_t1_002e3" accesskey="n" rel="next">1.3</a>, Prev: <a href="1_002e1.xhtml#g_t1_002e1" accesskey="p" rel="prev">1.1</a>, Up: <a href="#g_t1_002e2" accesskey="u" rel="prev">1.2</a>   [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>]</p>
</nav>


</section><span class="bottom jump" title="Jump to bottom"><a href="#pagebottom" accesskey="b">⇣</a></span><a id="pagebottom"></a>
</body>
</html>
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" xmlns:xml="http://www.w3.org/XML/1998/namespace" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Structure and Interpretation of Computer Programs, 2e: 1.3</title>

<meta name="description" content="Structure and Interpretation of Computer Programs, 2e: 1.3" />
<meta name="keywords" content="Structure and Interpretation of Computer Programs, 2e: 1.3" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="Generator" content="texi2any" />
<meta charset="utf-8" />
<link href="index.xhtml#Top" rel="start" title="Top" />
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index" />
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents" />
<link href="Chapter-1.xhtml#Chapter-1" rel="prev" title="Chapter 1" />
<link href="Chapter-2.xhtml#Chapter-2" rel="next" title="Chapter 2" />
<link href="1_002e2.xhtml#g_t1_002e2_002e6" rel="prev" title="1.2.6" />

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />



</head>

<body>
<section><span class="top jump" title="Jump to top"><a href="#pagetop" accesskey="t">⇡</a></span><a id="pagetop"></a><a id="g_t1_002e3"></a>
<nav class="header">
<p>
Next: <a href="Chapter-2.xhtml#Chapter-2" accesskey="n" rel="next">Chapter 2</a>, Prev: <a href="1_002e2.xhtml#g_t1_002e2" accesskey="p" rel="prev">1.2</a>, Up: <a href="Chapter-1.xhtml#Chapter-1" accesskey="u" rel="prev">Chapter 1</a>   [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>]</p>
</nav>
<a id="Formulating-Abstractions-with-Higher_002dOrder-Procedures"></a>
<h3 class="section"><span class="secnum">1.3</span><span class="sectitle">Formulating Abstractions with Higher-Order Procedures</span></h3>

<p>We have seen that procedures are, in effect, abstractions that describe
compound operations on numbers independent of the particular numbers.  For
example, when we
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">cube x</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> x x x</span><span class="clo">))</span></pre></div>

<p>we are not talking about the cube of a particular number, but rather about a
method for obtaining the cube of any number.  Of course we could get along
without ever defining this procedure, by always writing expressions such as
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="lit">3</span><span class="pln"> </span><span class="lit">3</span><span class="pln"> </span><span class="lit">3</span><span class="clo">)</span><span class="pln">
</span><span class="opn">(</span><span class="pun">*</span><span class="pln"> x x x</span><span class="clo">)</span><span class="pln">
</span><span class="opn">(</span><span class="pun">*</span><span class="pln"> y y y</span><span class="clo">)</span></pre></div>

<p>and never mentioning <code>cube</code> explicitly.  This would place us at a serious
disadvantage, forcing us to work always at the level of the particular
operations that happen to be primitives in the language (multiplication, in
this case) rather than in terms of higher-level operations.  Our programs would
be able to compute cubes, but our language would lack the ability to express
the concept of cubing.  One of the things we should demand from a powerful
programming language is the ability to build abstractions by assigning names to
common patterns and then to work in terms of the abstractions directly.
Procedures provide this ability.  This is why all but the most primitive
programming languages include mechanisms for defining procedures.
</p>
<p>Yet even in numerical processing we will be severely limited in our ability to
create abstractions if we are restricted to procedures whose parameters must be
numbers.  Often the same programming pattern will be used with a number of
different procedures.  To express such patterns as concepts, we will need to
construct procedures that can accept procedures as arguments or return
procedures as values.  Procedures that manipulate procedures are called
<a id="index-higher_002dorder-procedures"></a>
<em>higher-order procedures</em>.  This section shows how higher-order
procedures can serve as powerful abstraction mechanisms, vastly increasing the
expressive power of our language.
</p>

<a id="g_t1_002e3_002e1"></a>
<a id="Procedures-as-Arguments"></a>
<h4 class="subsection"><span class="secnum">1.3.1</span><span class="sectitle">Procedures as Arguments</span></h4>

<p>Consider the following three procedures.  The first computes the sum of the
integers from <code>a</code> through <code>b</code>:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">sum-integers a b</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pun">&gt;</span><span class="pln"> a b</span><span class="clo">)</span><span class="pln"> 
      </span><span class="lit">0</span><span class="pln"> 
      </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> a </span><span class="opn">(</span><span class="pln">sum-integers </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> a </span><span class="lit">1</span><span class="clo">)</span><span class="pln"> b</span><span class="clo">))))</span></pre></div>

<p>The second computes the sum of the cubes of the integers in the given range:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">sum-cubes a b</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pun">&gt;</span><span class="pln"> a b</span><span class="clo">)</span><span class="pln"> 
      </span><span class="lit">0</span><span class="pln"> 
      </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pln">cube a</span><span class="clo">)</span><span class="pln"> 
         </span><span class="opn">(</span><span class="pln">sum-cubes </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> a </span><span class="lit">1</span><span class="clo">)</span><span class="pln"> b</span><span class="clo">))))</span></pre></div>

<p>The third computes the sum of a sequence of terms in the series

<img src="fig/math/f316427b55b2cae99386cc31549fae9d.svg" class="math-display" style="height: 2.005em;" alt="\[ % :17:&amp;#10;   \frac{1}{1\cdot 3} +  \frac{1}{5\cdot 7} + \frac{1}{9\cdot 11} + {\dots,} \]" />

which converges to <img src="fig/math/7036f8c43b937dd94b8729faff8921d8.svg" class="math-inline" style="height: 0.827em; vertical-align: -0.153em;" alt="\( {\pi / 8} \)" /> (very slowly):<sup><a class="footnote_link" id="DOCF49" href="#FOOT49" epub:type="noteref">49</a></sup>
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">pi-sum a b</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pun">&gt;</span><span class="pln"> a b</span><span class="clo">)</span><span class="pln">
      </span><span class="lit">0</span><span class="pln">
      </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pun">/</span><span class="pln"> </span><span class="lit">1.0</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> a </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> a </span><span class="lit">2</span><span class="clo">)))</span><span class="pln"> 
         </span><span class="opn">(</span><span class="pln">pi-sum </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> a </span><span class="lit">4</span><span class="clo">)</span><span class="pln"> b</span><span class="clo">))))</span></pre></div>

<p>These three procedures clearly share a common underlying pattern.  They are for
the most part identical, differing only in the name of the procedure, the
function of <code>a</code> used to compute the term to be added, and the function
that provides the next value of <code>a</code>.  We could generate each of the
procedures by filling in slots in the same template:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">⟨</span><var><span class="pln">name</span></var><span class="pln">⟩ a b</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pun">&gt;</span><span class="pln"> a b</span><span class="clo">)</span><span class="pln">
      </span><span class="lit">0</span><span class="pln">
      </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pln">⟨</span><var><span class="pln">term</span></var><span class="pln">⟩ a</span><span class="clo">)</span><span class="pln"> 
         </span><span class="opn">(</span><span class="pln">⟨</span><var><span class="pln">name</span></var><span class="pln">⟩ </span><span class="opn">(</span><span class="pln">⟨</span><var><span class="pln">next</span></var><span class="pln">⟩ a</span><span class="clo">)</span><span class="pln"> b</span><span class="clo">))))</span></pre></div>

<p>The presence of such a common pattern is strong evidence that there is a useful
abstraction waiting to be brought to the surface.  Indeed, mathematicians long
ago identified the abstraction of <a id="index-summation-of-a-series"></a>
<em>summation of a series</em> and invented
“sigma notation,” for example

<img src="fig/math/0eb2995b6eef64f53cec0011a7a1bf0a.svg" class="math-display" style="height: 2.847em;" alt="\[ % :18:&amp;#10;  {\sum_{n = a}^b f(n)} \,=\, {f(a)} + \dots + {f(b),} \]" />

to express this concept.  The power of sigma notation is that it allows
mathematicians to deal with the concept of summation itself rather than only
with particular sums—for example, to formulate general results about sums
that are independent of the particular series being summed.
</p>
<p>Similarly, as program designers, we would like our language to be powerful
enough so that we can write a procedure that expresses the concept of summation
itself rather than only procedures that compute particular sums.  We can do so
readily in our procedural language by taking the common template shown above
and transforming the “slots” into formal parameters:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">sum term a next b</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pun">&gt;</span><span class="pln"> a b</span><span class="clo">)</span><span class="pln">
      </span><span class="lit">0</span><span class="pln">
      </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pln">term a</span><span class="clo">)</span><span class="pln">
         </span><span class="opn">(</span><span class="pln">sum term </span><span class="opn">(</span><span class="pln">next a</span><span class="clo">)</span><span class="pln"> next b</span><span class="clo">))))</span></pre></div>

<p>Notice that <code>sum</code> takes as its arguments the lower and upper bounds
<code>a</code> and <code>b</code> together with the procedures <code>term</code> and <code>next</code>.
We can use <code>sum</code> just as we would any procedure.  For example, we can use
it (along with a procedure <code>inc</code> that increments its argument by 1) to
define <code>sum-cubes</code>:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">inc n</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> n </span><span class="lit">1</span><span class="clo">))</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">sum-cubes a b</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">sum cube a inc b</span><span class="clo">))</span></pre></div>

<p>Using this, we can compute the sum of the cubes of the integers from 1 to 10:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pln">sum-cubes </span><span class="lit">1</span><span class="pln"> </span><span class="lit">10</span><span class="clo">)</span><span class="pln">
</span><i><span class="lit">3025</span></i>
</pre></div>

<p>With the aid of an identity procedure to compute the term, we can define
<code>sum-integers</code> in terms of <code>sum</code>:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">identity x</span><span class="clo">)</span><span class="pln"> x</span><span class="clo">)</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">sum-integers a b</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">sum identity a inc b</span><span class="clo">))</span></pre></div>

<p>Then we can add up the integers from 1 to 10:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pln">sum-integers </span><span class="lit">1</span><span class="pln"> </span><span class="lit">10</span><span class="clo">)</span><span class="pln">
</span><i><span class="lit">55</span></i>
</pre></div>

<p>We can also define <code>pi-sum</code> in the same way:<sup><a class="footnote_link" id="DOCF50" href="#FOOT50" epub:type="noteref">50</a></sup>
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">pi-sum a b</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">pi-term x</span><span class="clo">)</span><span class="pln">
    </span><span class="opn">(</span><span class="pun">/</span><span class="pln"> </span><span class="lit">1.0</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> x </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> x </span><span class="lit">2</span><span class="clo">))))</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">pi-next x</span><span class="clo">)</span><span class="pln">
    </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> x </span><span class="lit">4</span><span class="clo">))</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">sum pi-term a pi-next b</span><span class="clo">))</span></pre></div>

<p>Using these procedures, we can compute an approximation to <img src="fig/math/c25469cd205e957b38b51203870f48af.svg" class="math-inline" style="height: 0.438em; vertical-align: -0.000em;" alt="\( \pi \)" />:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="lit">8</span><span class="pln"> </span><span class="opn">(</span><span class="pln">pi-sum </span><span class="lit">1</span><span class="pln"> </span><span class="lit">1000</span><span class="clo">))</span><span class="pln">
</span><i><span class="lit">3.139592655589783</span></i>
</pre></div>

<p>Once we have <code>sum</code>, we can use it as a building block in formulating
further concepts.  For instance, the definite integral of a function <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" />
between the limits <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> and <img src="fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( b \)" /> can be approximated numerically using the
formula

<img src="fig/math/86184e563a55746a1b5c8780393ed522.svg" class="math-display" style="height: 2.527em;" alt="\[ % :19:&amp;#10;  {\int_a^b \kern-0.3em f}   \;=\; {\left[\;f\left(a + \frac{d x}{2}\right)\right.}   \,+\, {f\left(a + dx + \frac{dx}{2}\right)}   \,+\, {\left. f\left(a + 2dx + \frac{dx}{2}\right)   \,+\, \dots \;\right] dx} \]" />

for small values of <img src="fig/math/a999758b4fd8ccd10d6eda8234629d51.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( {dx} \)" />.  We can express this directly as a procedure:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">integral f a b dx</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">add-dx x</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> x dx</span><span class="clo">))</span><span class="pln">
  </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="opn">(</span><span class="pln">sum f </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> a </span><span class="opn">(</span><span class="pun">/</span><span class="pln"> dx </span><span class="lit">2.0</span><span class="clo">))</span><span class="pln"> add-dx b</span><span class="clo">)</span><span class="pln"> 
     dx</span><span class="clo">))</span><span class="pln">

</span><span class="opn">(</span><span class="pln">integral cube </span><span class="lit">0</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="lit">0.01</span><span class="clo">)</span><span class="pln">
</span><i><span class="lit">.24998750000000042</span></i><span class="pln">

</span><span class="opn">(</span><span class="pln">integral cube </span><span class="lit">0</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="lit">0.001</span><span class="clo">)</span><span class="pln">
</span><i><span class="lit">.249999875000001</span></i>
</pre></div>

<p>(The exact value of the integral of <code>cube</code> between 0 and 1 is 1/4.)
</p>
<blockquote>
<p><strong><a id="Exercise-1_002e29"></a>Exercise 1.29:</strong> Simpson’s Rule is a more accurate
method of numerical integration than the method illustrated above.  Using
Simpson’s Rule, the integral of a function <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" /> between <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> and <img src="fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( b \)" /> is
approximated as

<img src="fig/math/70b79a35895e03d4b7cc28af18f33f90.svg" class="math-display" style="height: 2.056em;" alt="\[ % :20:&amp;#10;   \frac{h}{3}(y_0 + {4y_1} + {2y_2} + {4y_3} + {2y_4} + \dots + {2y_{n-2}} + {4y_{n-1} + y_n),} \]" />

where <img src="fig/math/f332fb41588030f2e0de99b4c5635ece.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {h = (b - a)/n} \)" />, for some even integer <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" />, and
<img src="fig/math/43c753cbc8190f8b7514dfaf32a74cbb.svg" class="math-inline" style="height: 0.936em; vertical-align: -0.225em;" alt="\( y_k = {f(a + kh)} \)" />.  (Increasing <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> increases the
accuracy of the approximation.)  Define a procedure that takes as arguments
<img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" />, <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" />, <img src="fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( b \)" />, and <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> and returns the value of the integral, computed
using Simpson’s Rule.  Use your procedure to integrate <code>cube</code> between 0
and 1 (with <img src="fig/math/c2a31743664bc36d2792884a3692b1f5.svg" class="math-inline" style="height: 0.652em; vertical-align: -0.009em;" alt="\( {n = 100} \)" /> and <img src="fig/math/21e6a0a663b7bb714ef3eded3affb64d.svg" class="math-inline" style="height: 0.652em; vertical-align: -0.009em;" alt="\( {n = 1000} \)" />), and compare the results to those of
the <code>integral</code> procedure shown above.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e30"></a>Exercise 1.30:</strong> The <code>sum</code> procedure above
generates a linear recursion.  The procedure can be rewritten so that the sum
is performed iteratively.  Show how to do this by filling in the missing
expressions in the following definition:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">sum term a next b</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">iter a result</span><span class="clo">)</span><span class="pln">
    </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> ⟨</span><span class="pun">??</span><span class="pln">⟩
        ⟨</span><span class="pun">??</span><span class="pln">⟩
        </span><span class="opn">(</span><span class="pln">iter ⟨</span><span class="pun">??</span><span class="pln">⟩ ⟨</span><span class="pun">??</span><span class="pln">⟩</span><span class="clo">)))</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">iter ⟨</span><span class="pun">??</span><span class="pln">⟩ ⟨</span><span class="pun">??</span><span class="pln">⟩</span><span class="clo">))</span></pre></div>
</blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e31"></a>Exercise 1.31:</strong> 
</p>
<ol>
<li> The <code>sum</code> procedure is only the simplest of a vast number of similar
abstractions that can be captured as higher-order procedures.<sup><a class="footnote_link" id="DOCF51" href="#FOOT51" epub:type="noteref">51</a></sup>  Write an analogous
procedure called <code>product</code> that returns the product of the values of a
function at points over a given range.  Show how to define <code>factorial</code> in
terms of <code>product</code>.  Also use <code>product</code> to compute approximations to
<img src="fig/math/c25469cd205e957b38b51203870f48af.svg" class="math-inline" style="height: 0.438em; vertical-align: -0.000em;" alt="\( \pi \)" /> using the formula<sup><a class="footnote_link" id="DOCF52" href="#FOOT52" epub:type="noteref">52</a></sup>

<img src="fig/math/8e07cb198382e08868967e370efa5f84.svg" class="math-display" style="height: 2.005em;" alt="\[ % :21:&amp;#10;   \frac{\pi}{4} \,=\, {\frac{2\cdot 4\cdot 4\cdot 6\cdot 6\cdot 8\cdot\cdots}                      {3\cdot 3\cdot 5\cdot 5\cdot 7\cdot 7\cdot\cdots}.} \]" />

</li><li> If your <code>product</code> procedure generates a recursive process, write one that
generates an iterative process.  If it generates an iterative process, write
one that generates a recursive process.

</li></ol>
</blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e32"></a>Exercise 1.32:</strong> 
</p>
<ol>
<li> Show that <code>sum</code> and <code>product</code> (<a href="#Exercise-1_002e31">Exercise 1.31</a>) are both special
cases of a still more general notion called <code>accumulate</code> that combines a
collection of terms, using some general accumulation function:

<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pln">accumulate 
 combiner null-value term a next b</span><span class="clo">)</span></pre></div>

<p><code>Accumulate</code> takes as arguments the same term and range specifications as
<code>sum</code> and <code>product</code>, together with a <code>combiner</code> procedure (of
two arguments) that specifies how the current term is to be combined with the
accumulation of the preceding terms and a <code>null-value</code> that specifies what
base value to use when the terms run out.  Write <code>accumulate</code> and show how
<code>sum</code> and <code>product</code> can both be defined as simple calls to
<code>accumulate</code>.
</p>
</li><li> If your <code>accumulate</code> procedure generates a recursive process, write one
that generates an iterative process.  If it generates an iterative process,
write one that generates a recursive process.

</li></ol>
</blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e33"></a>Exercise 1.33:</strong> You can obtain an even more
general version of <code>accumulate</code> (<a href="#Exercise-1_002e32">Exercise 1.32</a>) by introducing the
notion of a <a id="index-filter"></a>
<em>filter</em> on the terms to be combined.  That is, combine
only those terms derived from values in the range that satisfy a specified
condition.  The resulting <code>filtered-accumulate</code> abstraction takes the same
arguments as accumulate, together with an additional predicate of one argument
that specifies the filter.  Write <code>filtered-accumulate</code> as a procedure.
Show how to express the following using <code>filtered-accumulate</code>:
</p>
<ol>
<li> the sum of the squares of the prime numbers in the interval <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> to <img src="fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( b \)" />
(assuming that you have a <code>prime?</code> predicate already written)

</li><li> the product of all the positive integers less than <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> that are relatively
prime to <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> (i.e., all positive integers <img src="fig/math/9ab46f9df27bbac5cdde0d8abca405eb.svg" class="math-inline" style="height: 0.623em; vertical-align: -0.010em;" alt="\( {i &amp;lt; n} \)" /> such that
<img src="fig/math/10a7615c5fa63cfa8614ad9a685f9b49.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\text{GCD}(i, n) = 1} \)" />).

</li></ol>
</blockquote>

<a id="g_t1_002e3_002e2"></a>
<a id="Constructing-Procedures-Using-Lambda"></a>
<h4 class="subsection"><span class="secnum">1.3.2</span><span class="sectitle">Constructing Procedures Using <code>Lambda</code></span></h4>

<p>In using <code>sum</code> as in <a href="#g_t1_002e3_002e1">1.3.1</a>, it seems terribly awkward to
have to define trivial procedures such as <code>pi-term</code> and <code>pi-next</code>
just so we can use them as arguments to our higher-order procedure.  Rather
than define <code>pi-next</code> and <code>pi-term</code>, it would be more convenient to
have a way to directly specify “the procedure that returns its input
incremented by 4” and “the procedure that returns the reciprocal of its input
times its input plus 2.”  We can do this by introducing the special form
<code>lambda</code>, which creates procedures.  Using <code>lambda</code> we can describe
what we want as
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">lambda</span><span class="pln"> </span><span class="opn">(</span><span class="pln">x</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> x </span><span class="lit">4</span><span class="clo">))</span></pre></div>

<p>and
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">lambda</span><span class="pln"> </span><span class="opn">(</span><span class="pln">x</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">/</span><span class="pln"> </span><span class="lit">1.0</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> x </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> x </span><span class="lit">2</span><span class="clo">))))</span></pre></div>

<p>Then our <code>pi-sum</code> procedure can be expressed without defining any
auxiliary procedures as
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">pi-sum a b</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">sum </span><span class="opn">(</span><span class="kwd">lambda</span><span class="pln"> </span><span class="opn">(</span><span class="pln">x</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">/</span><span class="pln"> </span><span class="lit">1.0</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> x </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> x </span><span class="lit">2</span><span class="clo">))))</span><span class="pln">
       a
       </span><span class="opn">(</span><span class="kwd">lambda</span><span class="pln"> </span><span class="opn">(</span><span class="pln">x</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> x </span><span class="lit">4</span><span class="clo">))</span><span class="pln">
       b</span><span class="clo">))</span></pre></div>

<p>Again using <code>lambda</code>, we can write the <code>integral</code> procedure without
having to define the auxiliary procedure <code>add-dx</code>:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">integral f a b dx</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="opn">(</span><span class="pln">sum f </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> a </span><span class="opn">(</span><span class="pun">/</span><span class="pln"> dx </span><span class="lit">2.0</span><span class="clo">))</span><span class="pln">
            </span><span class="opn">(</span><span class="kwd">lambda</span><span class="pln"> </span><span class="opn">(</span><span class="pln">x</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> x dx</span><span class="clo">))</span><span class="pln">
            b</span><span class="clo">)</span><span class="pln">
     dx</span><span class="clo">))</span></pre></div>

<p>In general, <code>lambda</code> is used to create procedures in the same way as
<code>define</code>, except that no name is specified for the procedure:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">lambda</span><span class="pln"> </span><span class="opn">(</span><span class="pln">⟨</span><var><span class="pln">formal-parameters</span></var><span class="pln">⟩</span><span class="clo">)</span><span class="pln"> ⟨</span><var><span class="pln">body</span></var><span class="pln">⟩</span><span class="clo">)</span></pre></div>

<p>The resulting procedure is just as much a procedure as one that is created
using <code>define</code>.  The only difference is that it has not been associated
with any name in the environment.  In fact,
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">plus4 x</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> x </span><span class="lit">4</span><span class="clo">))</span></pre></div>

<p>is equivalent to
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> plus4 </span><span class="opn">(</span><span class="kwd">lambda</span><span class="pln"> </span><span class="opn">(</span><span class="pln">x</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> x </span><span class="lit">4</span><span class="clo">)))</span></pre></div>

<p>We can read a <code>lambda</code> expression as follows:
</p>
<div class="example">
<pre class="example">(lambda                     (x)     (+   x     4))
    |                        |       |   |     |
the procedure of an argument x that adds x and 4
</pre></div>

<p>Like any expression that has a procedure as its value, a <code>lambda</code>
expression can be used as the operator in a combination such as
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">((</span><span class="kwd">lambda</span><span class="pln"> </span><span class="opn">(</span><span class="pln">x y z</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> x y </span><span class="opn">(</span><span class="pln">square z</span><span class="clo">)))</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="lit">2</span><span class="pln"> </span><span class="lit">3</span><span class="clo">)</span><span class="pln">
</span><i><span class="lit">12</span></i>
</pre></div>

<p>or, more generally, in any context where we would normally use a procedure
name.<sup><a class="footnote_link" id="DOCF53" href="#FOOT53" epub:type="noteref">53</a></sup>
</p>
<a id="Using-let-to-create-local-variables"></a>
<h5 class="subsubheading">Using <code>let</code> to create local variables</h5>

<p>Another use of <code>lambda</code> is in creating local variables.  We often need
local variables in our procedures other than those that have been bound as
formal parameters.  For example, suppose we wish to compute the function

<img src="fig/math/fe77b247f1b571631311f5e0e0a8559d.svg" class="math-display" style="height: 1.131em;" alt="\[ % :22:&amp;#10;   {f(x,y)} \,=\, {x(1 + xy)^2} + {y(1 - y)} + {(1 + xy)(1 - y),} \]" />

which we could also express as

<img src="fig/math/19531eed609e9a8dd489a1e7f8434630.svg" class="math-display" style="height: 3.913em;" alt="\[ % :23:&amp;#10;  \begin{eqnarray}   a                     &amp;amp;=&amp;amp;   {1 + xy,}  \\   \hphantom{(x,y)} b    &amp;amp;=&amp;amp;   {1 - y,}   \\   {f(x,y)}              &amp;amp;=&amp;amp;   {xa^2} + {yb} + {ab.} \end{eqnarray} \]" />

In writing a procedure to compute <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" />, we would like to include as local
variables not only <img src="fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( x \)" /> and <img src="fig/math/05e4cdb2f26a4f66b68c167423907fea.svg" class="math-inline" style="height: 0.669em; vertical-align: -0.235em;" alt="\( y \)" /> but also the names of intermediate
quantities like <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> and <img src="fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( b \)" />.  One way to accomplish this is to use an
auxiliary procedure to bind the local variables:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">f x y</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">f-helper a b</span><span class="clo">)</span><span class="pln">
    </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> x </span><span class="opn">(</span><span class="pln">square a</span><span class="clo">))</span><span class="pln">
       </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> y b</span><span class="clo">)</span><span class="pln">
       </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> a b</span><span class="clo">)))</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">f-helper </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> x y</span><span class="clo">))</span><span class="pln"> 
            </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> y</span><span class="clo">)))</span></pre></div>

<p>Of course, we could use a <code>lambda</code> expression to specify an anonymous
procedure for binding our local variables.  The body of <code>f</code> then becomes a
single call to that procedure:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">f x y</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">((</span><span class="kwd">lambda</span><span class="pln"> </span><span class="opn">(</span><span class="pln">a b</span><span class="clo">)</span><span class="pln">
     </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> x </span><span class="opn">(</span><span class="pln">square a</span><span class="clo">))</span><span class="pln"> 
        </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> y b</span><span class="clo">)</span><span class="pln"> 
        </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> a b</span><span class="clo">)))</span><span class="pln">
   </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> x y</span><span class="clo">))</span><span class="pln">
   </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> y</span><span class="clo">)))</span></pre></div>

<p>This construct is so useful that there is a special form called <code>let</code> to
make its use more convenient.  Using <code>let</code>, the <code>f</code> procedure could
be written as
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">f x y</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">let</span><span class="pln"> </span><span class="opn">((</span><span class="pln">a </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> x y</span><span class="clo">)))</span><span class="pln">
        </span><span class="opn">(</span><span class="pln">b </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> y</span><span class="clo">)))</span><span class="pln">
    </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> x </span><span class="opn">(</span><span class="pln">square a</span><span class="clo">))</span><span class="pln">
       </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> y b</span><span class="clo">)</span><span class="pln">
       </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> a b</span><span class="clo">))))</span></pre></div>

<p>The general form of a <code>let</code> expression is
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">let</span><span class="pln"> </span><span class="opn">((</span><span class="pln">⟨</span><var><span class="pln">var</span><span class="pun">₁</span></var><span class="pln">⟩ ⟨</span><var><span class="pln">exp</span><span class="pun">₁</span></var><span class="pln">⟩</span><span class="clo">)</span><span class="pln">
      </span><span class="opn">(</span><span class="pln">⟨</span><var><span class="pln">var</span><span class="pun">₂</span></var><span class="pln">⟩ ⟨</span><var><span class="pln">exp</span><span class="pun">₂</span></var><span class="pln">⟩</span><span class="clo">)</span><span class="pln">
      </span><span class="roman"><span class="pun">…</span></span><span class="pln">
      </span><span class="opn">(</span><span class="pln">⟨</span><var><span class="pln">var</span><span class="pun">ₙ</span></var><span class="pln">⟩ ⟨</span><var><span class="pln">exp</span><span class="pun">ₙ</span></var><span class="pln">⟩</span><span class="clo">))</span><span class="pln">
  ⟨</span><var><span class="pln">body</span></var><span class="pln">⟩</span><span class="clo">)</span></pre></div>

<p>which can be thought of as saying
</p>
<div class="example">
<pre class="example">let ⟨<var>var₁</var>⟩ <span class="roman">have the value</span> ⟨<var>exp₁</var>⟩ <span class="roman">and</span>
    ⟨<var>var₂</var>⟩ <span class="roman">have the value</span> ⟨<var>exp₂</var>⟩ <span class="roman">and</span>
    <span class="roman">…</span>
    ⟨<var>varₙ</var>⟩ <span class="roman">have the value</span> ⟨<var>expₙ</var>⟩
  <span class="roman">in</span> ⟨<var>body</var>⟩
</pre></div>

<p>The first part of the <code>let</code> expression is a list of name-expression pairs.
When the <code>let</code> is evaluated, each name is associated with the value of the
corresponding expression.  The body of the <code>let</code> is evaluated with these
names bound as local variables.  The way this happens is that the <code>let</code>
expression is interpreted as an alternate syntax for
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">((</span><span class="kwd">lambda</span><span class="pln"> </span><span class="opn">(</span><span class="pln">⟨</span><var><span class="pln">var</span><span class="pun">₁</span></var><span class="pln">⟩ </span><span class="roman"><span class="pun">…</span></span><span class="pln"> ⟨</span><var><span class="pln">var</span><span class="pun">ₙ</span></var><span class="pln">⟩</span><span class="clo">)</span><span class="pln">
   ⟨</span><var><span class="pln">body</span></var><span class="pln">⟩</span><span class="clo">)</span><span class="pln">
 ⟨</span><var><span class="pln">exp</span><span class="pun">₁</span></var><span class="pln">⟩
 </span><span class="roman"><span class="pun">…</span></span><span class="pln">
 ⟨</span><var><span class="pln">exp</span><span class="pun">ₙ</span></var><span class="pln">⟩</span><span class="clo">)</span></pre></div>

<p>No new mechanism is required in the interpreter in order to provide local
variables.  A <code>let</code> expression is simply syntactic sugar for the
underlying <code>lambda</code> application.
</p>
<p>We can see from this equivalence that the scope of a variable specified by a
<code>let</code> expression is the body of the <code>let</code>.  This implies that:
</p>
<ul>
<li> <code>Let</code> allows one to bind variables as locally as possible to where they
are to be used.  For example, if the value of <code>x</code> is 5, the value of the
expression

<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="kwd">let</span><span class="pln"> </span><span class="opn">((</span><span class="pln">x </span><span class="lit">3</span><span class="clo">))</span><span class="pln">
     </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> x </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> x </span><span class="lit">10</span><span class="clo">)))</span><span class="pln">
   x</span><span class="clo">)</span></pre></div>

<p>is 38.  Here, the <code>x</code> in the body of the <code>let</code> is 3, so the value of
the <code>let</code> expression is 33.  On the other hand, the <code>x</code> that is the
second argument to the outermost <code>+</code> is still 5.
</p>
</li><li> The variables’ values are computed outside the <code>let</code>.  This matters when
the expressions that provide the values for the local variables depend upon
variables having the same names as the local variables themselves.  For
example, if the value of <code>x</code> is 2, the expression

<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">let</span><span class="pln"> </span><span class="opn">((</span><span class="pln">x </span><span class="lit">3</span><span class="clo">)</span><span class="pln">
      </span><span class="opn">(</span><span class="pln">y </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> x </span><span class="lit">2</span><span class="clo">)))</span><span class="pln">
  </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> x y</span><span class="clo">))</span></pre></div>

<p>will have the value 12 because, inside the body of the <code>let</code>, <code>x</code>
will be 3 and <code>y</code> will be 4 (which is the outer <code>x</code> plus 2).
</p>
</li></ul>

<p>Sometimes we can use internal definitions to get the same effect as with
<code>let</code>.  For example, we could have defined the procedure <code>f</code> above as
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">f x y</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> a 
    </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> x y</span><span class="clo">)))</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> b </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> y</span><span class="clo">))</span><span class="pln">
  </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> x </span><span class="opn">(</span><span class="pln">square a</span><span class="clo">))</span><span class="pln">
     </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> y b</span><span class="clo">)</span><span class="pln">
     </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> a b</span><span class="clo">)))</span></pre></div>

<p>We prefer, however, to use <code>let</code> in situations like this and to use
internal <code>define</code> only for internal procedures.<sup><a class="footnote_link" id="DOCF54" href="#FOOT54" epub:type="noteref">54</a></sup>
</p>
<blockquote>
<p><strong><a id="Exercise-1_002e34"></a>Exercise 1.34:</strong> Suppose we define the procedure
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">f g</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pln">g </span><span class="lit">2</span><span class="clo">))</span></pre></div>

<p>Then we have
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pln">f square</span><span class="clo">)</span><span class="pln">
</span><i><span class="lit">4</span></i><span class="pln">

</span><span class="opn">(</span><span class="pln">f </span><span class="opn">(</span><span class="kwd">lambda</span><span class="pln"> </span><span class="opn">(</span><span class="pln">z</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> z </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> z </span><span class="lit">1</span><span class="clo">))))</span><span class="pln">
</span><i><span class="lit">6</span></i>
</pre></div>

<p>What happens if we (perversely) ask the interpreter to evaluate the combination
<code>(f f)</code>?  Explain.
</p></blockquote>

<a id="g_t1_002e3_002e3"></a>
<a id="Procedures-as-General-Methods"></a>
<h4 class="subsection"><span class="secnum">1.3.3</span><span class="sectitle">Procedures as General Methods</span></h4>

<p>We introduced compound procedures in <a href="1_002e1.xhtml#g_t1_002e1_002e4">1.1.4</a> as a mechanism for
abstracting patterns of numerical operations so as to make them independent of
the particular numbers involved.  With higher-order procedures, such as the
<code>integral</code> procedure of <a href="#g_t1_002e3_002e1">1.3.1</a>, we began to see a more
powerful kind of abstraction: procedures used to express general methods of
computation, independent of the particular functions involved.  In this section
we discuss two more elaborate examples—general methods for finding zeros and
fixed points of functions—and show how these methods can be expressed
directly as procedures.
</p>
<a id="Finding-roots-of-equations-by-the-half_002dinterval-method"></a>
<h5 class="subsubheading">Finding roots of equations by the half-interval method</h5>

<p>The <a id="index-half_002dinterval-method"></a>
<em>half-interval method</em> is a simple but powerful technique for
finding roots of an equation <img src="fig/math/21b19556ea4f8df5b5bdbfea09d37ce1.svg" class="math-inline" style="height: 0.936em; vertical-align: -0.225em;" alt="\( {f(x) = 0} \)" />, where <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" /> is a continuous
function.  The idea is that, if we are given points <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> and <img src="fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( b \)" /> such that
<img src="fig/math/2ebbda41ddf9bbce8a5cf027170ce10d.svg" class="math-inline" style="height: 0.936em; vertical-align: -0.225em;" alt="\( {f(a) &amp;lt; 0 &amp;lt; f(b)} \)" />, then <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" /> must have at least one zero between
<img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> and <img src="fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( b \)" />.  To locate a zero, let <img src="fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( x \)" /> be the average of <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> and <img src="fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( b \)" />,
and compute <img src="fig/math/b057a8e52b609c9d7031fbe3992972ef.svg" class="math-inline" style="height: 0.936em; vertical-align: -0.225em;" alt="\( {f(x)} \)" />.  If <img src="fig/math/45a3fd031ce7e15eac4c6477cdc6a3a1.svg" class="math-inline" style="height: 0.936em; vertical-align: -0.225em;" alt="\( {f(x) &amp;gt; 0} \)" />, then <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" /> must have a zero
between <img src="fig/math/09009cdd5fc245e05305bc574dcdc97d.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( a \)" /> and <img src="fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( x \)" />.  If <img src="fig/math/7f0eaa927815e7643164bd4538441b42.svg" class="math-inline" style="height: 0.936em; vertical-align: -0.225em;" alt="\( {f(x) &amp;lt; 0} \)" />, then <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" /> must have a zero
between <img src="fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( x \)" /> and <img src="fig/math/3e92f417ccfc1f59b0ee22d034c85747.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( b \)" />.  Continuing in this way, we can identify smaller and
smaller intervals on which <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" /> must have a zero.  When we reach a point where
the interval is small enough, the process stops.  Since the interval of
uncertainty is reduced by half at each step of the process, the number of steps
required grows as <img src="fig/math/0965cc2fcc7d9b8980211f23a76a1ee5.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\Theta(\log(L\, /\, T))} \)" />, where <img src="fig/math/a23a2cd0225c802f8f86942524b01811.svg" class="math-inline" style="height: 0.645em;" alt="\( L \)" /> is the
length of the original interval and <img src="fig/math/f06926aab0bc0e9f47ee2cd90f581bb2.svg" class="math-inline" style="height: 0.656em; vertical-align: -0.004em;" alt="\( T \)" /> is the error tolerance (that is, the
size of the interval we will consider “small enough”).  Here is a procedure
that implements this strategy:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">search f neg-point pos-point</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">let</span><span class="pln"> </span><span class="opn">((</span><span class="pln">midpoint 
         </span><span class="opn">(</span><span class="pln">average neg-point pos-point</span><span class="clo">)))</span><span class="pln">
    </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pln">close-enough? neg-point pos-point</span><span class="clo">)</span><span class="pln">
        midpoint
        </span><span class="opn">(</span><span class="kwd">let</span><span class="pln"> </span><span class="opn">((</span><span class="pln">test-value </span><span class="opn">(</span><span class="pln">f midpoint</span><span class="clo">)))</span><span class="pln">
          </span><span class="opn">(</span><span class="kwd">cond</span><span class="pln"> 
           </span><span class="opn">((</span><span class="pln">positive? test-value</span><span class="clo">)</span><span class="pln">
            </span><span class="opn">(</span><span class="pln">search f neg-point midpoint</span><span class="clo">))</span><span class="pln">
           </span><span class="opn">((</span><span class="pln">negative? test-value</span><span class="clo">)</span><span class="pln">
            </span><span class="opn">(</span><span class="pln">search f midpoint pos-point</span><span class="clo">))</span><span class="pln">
           </span><span class="opn">(</span><span class="kwd">else</span><span class="pln"> midpoint</span><span class="clo">))))))</span></pre></div>

<p>We assume that we are initially given the function <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" /> together with points
at which its values are negative and positive.  We first compute the midpoint
of the two given points.  Next we check to see if the given interval is small
enough, and if so we simply return the midpoint as our answer.  Otherwise, we
compute as a test value the value of <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" /> at the midpoint.  If the test value
is positive, then we continue the process with a new interval running from the
original negative point to the midpoint.  If the test value is negative, we
continue with the interval from the midpoint to the positive point.  Finally,
there is the possibility that the test value is 0, in which case the midpoint
is itself the root we are searching for.
</p>
<p>To test whether the endpoints are “close enough” we can use a procedure
similar to the one used in <a href="1_002e1.xhtml#g_t1_002e1_002e7">1.1.7</a> for computing square
roots:<sup><a class="footnote_link" id="DOCF55" href="#FOOT55" epub:type="noteref">55</a></sup>
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">close-enough? x y</span><span class="clo">)</span><span class="pln"> 
  </span><span class="opn">(</span><span class="pun">&lt;</span><span class="pln"> </span><span class="opn">(</span><span class="pln">abs </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> x y</span><span class="clo">))</span><span class="pln"> </span><span class="lit">0.001</span><span class="clo">))</span></pre></div>

<p><code>Search</code> is awkward to use directly, because we can accidentally give it
points at which <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" />’s values do not have the required sign, in which case we
get a wrong answer.  Instead we will use <code>search</code> via the following
procedure, which checks to see which of the endpoints has a negative function
value and which has a positive value, and calls the <code>search</code> procedure
accordingly.  If the function has the same sign on the two given points, the
half-interval method cannot be used, in which case the procedure signals an
error.<sup><a class="footnote_link" id="DOCF56" href="#FOOT56" epub:type="noteref">56</a></sup>
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">half-interval-method f a b</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">let</span><span class="pln"> </span><span class="opn">((</span><span class="pln">a-value </span><span class="opn">(</span><span class="pln">f a</span><span class="clo">))</span><span class="pln">
        </span><span class="opn">(</span><span class="pln">b-value </span><span class="opn">(</span><span class="pln">f b</span><span class="clo">)))</span><span class="pln">
    </span><span class="opn">(</span><span class="kwd">cond</span><span class="pln"> </span><span class="opn">((</span><span class="kwd">and</span><span class="pln"> </span><span class="opn">(</span><span class="pln">negative? a-value</span><span class="clo">)</span><span class="pln"> 
                </span><span class="opn">(</span><span class="pln">positive? b-value</span><span class="clo">))</span><span class="pln">
           </span><span class="opn">(</span><span class="pln">search f a b</span><span class="clo">))</span><span class="pln">
          </span><span class="opn">((</span><span class="kwd">and</span><span class="pln"> </span><span class="opn">(</span><span class="pln">negative? b-value</span><span class="clo">)</span><span class="pln"> 
                </span><span class="opn">(</span><span class="pln">positive? a-value</span><span class="clo">))</span><span class="pln">
           </span><span class="opn">(</span><span class="pln">search f b a</span><span class="clo">))</span><span class="pln">
          </span><span class="opn">(</span><span class="kwd">else</span><span class="pln">
           </span><span class="opn">(</span><span class="err">error</span><span class="pln"> </span><span class="str">"Values are not of 
                   opposite sign"</span><span class="pln"> a b</span><span class="clo">)))))</span></pre></div>

<p>The following example uses the half-interval method to approximate <img src="fig/math/c25469cd205e957b38b51203870f48af.svg" class="math-inline" style="height: 0.438em; vertical-align: -0.000em;" alt="\( \pi \)" /> as
the root between 2 and 4 of <img src="fig/math/ad0e0850039670aca59110f6561f4e0b.svg" class="math-inline" style="height: 0.671em; vertical-align: -0.009em;" alt="\( {\sin x = 0} \)" />:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pln">half-interval-method sin </span><span class="lit">2.0</span><span class="pln"> </span><span class="lit">4.0</span><span class="clo">)</span><span class="pln">
</span><i><span class="lit">3.14111328125</span></i>
</pre></div>

<p>Here is another example, using the half-interval method to search for a root of
the equation <img src="fig/math/f90ea7a26cce410633c1e74e88344c3d.svg" class="math-inline" style="height: 0.854em; vertical-align: -0.010em;" alt="\( {x^3 - 2x - 3 = 0} \)" /> between 1 and 2:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pln">half-interval-method 
 </span><span class="opn">(</span><span class="kwd">lambda</span><span class="pln"> </span><span class="opn">(</span><span class="pln">x</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> x x x</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="lit">2</span><span class="pln"> x</span><span class="clo">)</span><span class="pln"> </span><span class="lit">3</span><span class="clo">))</span><span class="pln">
 </span><span class="lit">1.0</span><span class="pln">
 </span><span class="lit">2.0</span><span class="clo">)</span><span class="pln">
</span><i><span class="lit">1.89306640625</span></i>
</pre></div>

<a id="Finding-fixed-points-of-functions"></a>
<h5 class="subsubheading">Finding fixed points of functions</h5>

<p>A number <img src="fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( x \)" /> is called a <a id="index-fixed-point"></a>
<em>fixed point</em> of a function <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" /> if <img src="fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( x \)" />
satisfies the equation <img src="fig/math/6973ec387c2ca776b59c0e24f3854033.svg" class="math-inline" style="height: 0.936em; vertical-align: -0.225em;" alt="\( {f(x) = x} \)" />.  For some functions <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" /> we can
locate a fixed point by beginning with an initial guess and applying <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" />
repeatedly,

<img src="fig/math/e4fa5e281403a0f9850cfc9651238cbe.svg" class="math-display" style="height: 0.936em;" alt="\[ % :24:&amp;#10;   {f(x),}\quad {f(f(x)),}\quad {f(f(f(x))),} \quad{\dots,} \]" />

until the value does not change very much.  Using this idea, we can devise a
procedure <code>fixed-point</code> that takes as inputs a function and an initial
guess and produces an approximation to a fixed point of the function.  We apply
the function repeatedly until we find two successive values whose difference is
less than some prescribed tolerance:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> tolerance </span><span class="lit">0.00001</span><span class="clo">)</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">fixed-point f first-guess</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">close-enough? v1 v2</span><span class="clo">)</span><span class="pln">
    </span><span class="opn">(</span><span class="pun">&lt;</span><span class="pln"> </span><span class="opn">(</span><span class="pln">abs </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> v1 v2</span><span class="clo">))</span><span class="pln"> 
       tolerance</span><span class="clo">))</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">try guess</span><span class="clo">)</span><span class="pln">
    </span><span class="opn">(</span><span class="kwd">let</span><span class="pln"> </span><span class="opn">((</span><span class="pln">next </span><span class="opn">(</span><span class="pln">f guess</span><span class="clo">)))</span><span class="pln">
      </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pln">close-enough? guess next</span><span class="clo">)</span><span class="pln">
          next
          </span><span class="opn">(</span><span class="pln">try next</span><span class="clo">))))</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">try first-guess</span><span class="clo">))</span></pre></div>

<p>For example, we can use this method to approximate the fixed point of the
cosine function, starting with 1 as an initial approximation:<sup><a class="footnote_link" id="DOCF57" href="#FOOT57" epub:type="noteref">57</a></sup>
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pln">fixed-point cos </span><span class="lit">1.0</span><span class="clo">)</span><span class="pln">
</span><i><span class="lit">.7390822985224023</span></i>
</pre></div>

<p>Similarly, we can find a solution to the equation 
<img src="fig/math/0aa55add0239835caa875b8d063befab.svg" class="math-inline" style="height: 0.894em; vertical-align: -0.234em;" alt="\( {y = \sin y + \cos y} \)" />:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pln">fixed-point </span><span class="opn">(</span><span class="kwd">lambda</span><span class="pln"> </span><span class="opn">(</span><span class="pln">y</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pln">sin y</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pln">cos y</span><span class="clo">)))</span><span class="pln">
             </span><span class="lit">1.0</span><span class="clo">)</span><span class="pln">
</span><i><span class="lit">1.2587315962971173</span></i>
</pre></div>

<p>The fixed-point process is reminiscent of the process we used for finding
square roots in <a href="1_002e1.xhtml#g_t1_002e1_002e7">1.1.7</a>.  Both are based on the idea of repeatedly
improving a guess until the result satisfies some criterion.  In fact, we can
readily formulate the square-root computation as a fixed-point search.
Computing the square root of some number <img src="fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( x \)" /> requires finding a <img src="fig/math/05e4cdb2f26a4f66b68c167423907fea.svg" class="math-inline" style="height: 0.669em; vertical-align: -0.235em;" alt="\( y \)" /> such
that <img src="fig/math/437588ce11e8725cc98d93e391d57fb8.svg" class="math-inline" style="height: 1.078em; vertical-align: -0.235em;" alt="\( {y^2 = x} \)" />.  Putting this equation into the equivalent form 
<img src="fig/math/aef045715ec76889ad7e84fd30b5a3da.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.229em;" alt="\( {y = x / y} \)" />, we recognize that we are looking for a fixed point of the
function<sup><a class="footnote_link" id="DOCF58" href="#FOOT58" epub:type="noteref">58</a></sup> <img src="fig/math/c4888039e8855b22c0b35c8152532a53.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.229em;" alt="\( {y \mapsto x / y} \)" />, 
and we can therefore try to compute square roots as
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">sqrt x</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">fixed-point </span><span class="opn">(</span><span class="kwd">lambda</span><span class="pln"> </span><span class="opn">(</span><span class="pln">y</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">/</span><span class="pln"> x y</span><span class="clo">))</span><span class="pln">
               </span><span class="lit">1.0</span><span class="clo">))</span></pre></div>

<p>Unfortunately, this fixed-point search does not converge.  Consider an initial
guess <img src="fig/math/c5f215b61ceace6c2622b08df19fb269.svg" class="math-inline" style="height: 0.669em; vertical-align: -0.235em;" alt="\( y_1 \)" />.  The next guess is <img src="fig/math/3a5198b6c94fee8a5e5da16dea15f2c1.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.229em;" alt="\( {y_2 = x / y_1} \)" /> and the next guess is
<img src="fig/math/ef078e24ed6d43614dbc6ec03136667b.svg" class="math-inline" style="height: 0.933em; vertical-align: -0.225em;" alt="\( y_3 = {x / y_2} = {x / (x / y_1)} = y_1 \)" />.  This results in an
infinite loop in which the two guesses <img src="fig/math/c5f215b61ceace6c2622b08df19fb269.svg" class="math-inline" style="height: 0.669em; vertical-align: -0.235em;" alt="\( y_1 \)" /> and <img src="fig/math/a920968ff08c279a310e14973392bff2.svg" class="math-inline" style="height: 0.669em; vertical-align: -0.235em;" alt="\( y_2 \)" /> repeat over and
over, oscillating about the answer.
</p>
<p>One way to control such oscillations is to prevent the guesses from changing so
much.  Since the answer is always between our guess <img src="fig/math/05e4cdb2f26a4f66b68c167423907fea.svg" class="math-inline" style="height: 0.669em; vertical-align: -0.235em;" alt="\( y \)" /> and <img src="fig/math/c243e54e1f37c985a92584d386f5fc01.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.229em;" alt="\( {x / y} \)" />, we
can make a new guess that is not as far from <img src="fig/math/05e4cdb2f26a4f66b68c167423907fea.svg" class="math-inline" style="height: 0.669em; vertical-align: -0.235em;" alt="\( y \)" /> as <img src="fig/math/c243e54e1f37c985a92584d386f5fc01.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.229em;" alt="\( {x / y} \)" /> by averaging
<img src="fig/math/05e4cdb2f26a4f66b68c167423907fea.svg" class="math-inline" style="height: 0.669em; vertical-align: -0.235em;" alt="\( y \)" /> with <img src="fig/math/c243e54e1f37c985a92584d386f5fc01.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.229em;" alt="\( {x / y} \)" />, so that the next guess after <img src="fig/math/05e4cdb2f26a4f66b68c167423907fea.svg" class="math-inline" style="height: 0.669em; vertical-align: -0.235em;" alt="\( y \)" /> is 
<img src="fig/math/e0b5c0d3af60453a97c1ebc178392557.svg" class="math-inline" style="height: 1.221em; vertical-align: -0.343em;" alt="\( {{1\over2}(y + x / y)} \)" /> 
instead of <img src="fig/math/c243e54e1f37c985a92584d386f5fc01.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.229em;" alt="\( {x / y} \)" />.  The process of making such a sequence of
guesses is simply the process of looking for a fixed point of 
<img src="fig/math/d90156d1aee4bac4abaecee76393e388.svg" class="math-inline" style="height: 1.221em; vertical-align: -0.343em;" alt="\( y \mapsto {{1\over2}(y + x / y)} \)" />: 
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">sqrt x</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">fixed-point 
   </span><span class="opn">(</span><span class="kwd">lambda</span><span class="pln"> </span><span class="opn">(</span><span class="pln">y</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pln">average y </span><span class="opn">(</span><span class="pun">/</span><span class="pln"> x y</span><span class="clo">)))</span><span class="pln">
   </span><span class="lit">1.0</span><span class="clo">))</span></pre></div>

<p>(Note that <img src="fig/math/27ff6df3c794eeaefd63a451e9c8b048.svg" class="math-inline" style="height: 1.221em; vertical-align: -0.343em;" alt="\( y = {{1\over2}(y + x / y)} \)" /> is a simple transformation of the
equation <img src="fig/math/de826a8541eddb4099cf005d61b5a8b5.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.229em;" alt="\( {y = x / y;} \)" /> to derive it, add <img src="fig/math/05e4cdb2f26a4f66b68c167423907fea.svg" class="math-inline" style="height: 0.669em; vertical-align: -0.235em;" alt="\( y \)" /> to both sides of the
equation and divide by 2.)
</p>
<p>With this modification, the square-root procedure works.  In fact, if we
unravel the definitions, we can see that the sequence of approximations to the
square root generated here is precisely the same as the one generated by our
original square-root procedure of <a href="1_002e1.xhtml#g_t1_002e1_002e7">1.1.7</a>.  This approach of
averaging successive approximations to a solution, a technique that we call
<a id="index-average-damping"></a>
<em>average damping</em>, often aids the convergence of fixed-point searches.
</p>
<blockquote>
<p><strong><a id="Exercise-1_002e35"></a>Exercise 1.35:</strong> Show that the golden ratio
<img src="fig/math/dcc52b7b3e1a0a821032c2d16b198829.svg" class="math-inline" style="height: 0.672em; vertical-align: -0.238em;" alt="\( \varphi \)" /> (<a href="1_002e2.xhtml#g_t1_002e2_002e2">1.2.2</a>) is a fixed point of the transformation 
<img src="fig/math/0c2646560025915db6aa50ad3b0ada81.svg" class="math-inline" style="height: 0.827em; vertical-align: -0.153em;" alt="\( {x \mapsto 1 + 1 / x} \)" />, and use this fact to compute <img src="fig/math/dcc52b7b3e1a0a821032c2d16b198829.svg" class="math-inline" style="height: 0.672em; vertical-align: -0.238em;" alt="\( \varphi \)" /> by means 
of the <code>fixed-point</code> procedure.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e36"></a>Exercise 1.36:</strong> Modify <code>fixed-point</code> so that
it prints the sequence of approximations it generates, using the <code>newline</code>
and <code>display</code> primitives shown in <a href="1_002e2.xhtml#Exercise-1_002e22">Exercise 1.22</a>.  Then find a
solution to <img src="fig/math/2e6611949fea7c5c1f17561763cc8ab1.svg" class="math-inline" style="height: 0.691em; vertical-align: -0.009em;" alt="\( {x^x = 1000} \)" /> by finding a fixed point of <img src="fig/math/62d8a7bc76798a647a3a8185e88c2d59.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( x \mapsto&amp;#10;{\log(1000) / \log(x)} \)" />.  (Use Scheme’s primitive <code>log</code>
procedure, which computes natural logarithms.)  Compare the number of steps
this takes with and without average damping.  (Note that you cannot start
<code>fixed-point</code> with a guess of 1, as this would cause division by
<img src="fig/math/6f031aa94619263eace21d29b6630539.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.189em;" alt="\( {\log(1) = 0} \)" />.)
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e37"></a>Exercise 1.37:</strong> 
</p>
<ol>
<li> An infinite <a id="index-continued-fraction"></a>
<em>continued fraction</em> is an expression of the form

<img src="fig/math/63b5eb39f15b6aca9997b1e5ced51472.svg" class="math-display" style="height: 3.249em;" alt="\[ % :25:&amp;#10;   f \,=\, {\frac{N_1}{D_1 + \frac{N_2}{D_2 + \frac{N_3}{D_3 + \dots}}}.} \]" />

As an example, one can show that the infinite continued fraction expansion with
the <img src="fig/math/303acbd84dbe1f7f07841932b03ce776.svg" class="math-inline" style="height: 0.800em; vertical-align: -0.149em;" alt="\( N_i \)" /> and the <img src="fig/math/83e1229ed935793e9e1d4255ab83cc6c.svg" class="math-inline" style="height: 0.800em; vertical-align: -0.149em;" alt="\( D_i \)" /> all equal to 1 produces <img src="fig/math/38a2250f7050470c4577ebeb6665faae.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.229em;" alt="\( {1 / \varphi} \)" />, where
<img src="fig/math/dcc52b7b3e1a0a821032c2d16b198829.svg" class="math-inline" style="height: 0.672em; vertical-align: -0.238em;" alt="\( \varphi \)" /> is the golden ratio (described in <a href="1_002e2.xhtml#g_t1_002e2_002e2">1.2.2</a>).  One way to
approximate an infinite continued fraction is to truncate the expansion after a
given number of terms.  Such a truncation—a so-called <a id="index-k_002dterm"></a>
finite continued fraction
<em><i>k</i>-term
finite continued fraction</em>—has the form

<img src="fig/math/1898ca495be2ad558018dc3b0c632948.svg" class="math-display" style="height: 3.744em;" alt="\[ % :26:&amp;#10;   {\frac{N_1}{D_1 + \frac{N_2}{\ddots + \frac{N_k}{D_k}}}.} \]" />

Suppose that <code>n</code> and <code>d</code> are procedures of one argument (the term
index <img src="fig/math/aa5dfb3bb62785181553d83502ccb9ec.svg" class="math-inline" style="height: 0.623em; vertical-align: -0.010em;" alt="\( i \)" />) that return the <img src="fig/math/303acbd84dbe1f7f07841932b03ce776.svg" class="math-inline" style="height: 0.800em; vertical-align: -0.149em;" alt="\( N_i \)" /> and <img src="fig/math/83e1229ed935793e9e1d4255ab83cc6c.svg" class="math-inline" style="height: 0.800em; vertical-align: -0.149em;" alt="\( D_i \)" /> of the terms of the
continued fraction.  Define a procedure <code>cont-frac</code> such that evaluating
<code>(cont-frac n d k)</code> computes the value of the <img src="fig/math/83054be07bea98353c7cda3290903d5e.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( k \)" />-term finite continued
fraction.  Check your procedure by approximating <img src="fig/math/38a2250f7050470c4577ebeb6665faae.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.229em;" alt="\( {1 / \varphi} \)" /> using

<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pln">cont-frac </span><span class="opn">(</span><span class="kwd">lambda</span><span class="pln"> </span><span class="opn">(</span><span class="pln">i</span><span class="clo">)</span><span class="pln"> </span><span class="lit">1.0</span><span class="clo">)</span><span class="pln">
           </span><span class="opn">(</span><span class="kwd">lambda</span><span class="pln"> </span><span class="opn">(</span><span class="pln">i</span><span class="clo">)</span><span class="pln"> </span><span class="lit">1.0</span><span class="clo">)</span><span class="pln">
           k</span><span class="clo">)</span></pre></div>

<p>for successive values of <code>k</code>.  How large must you make <code>k</code> in order
to get an approximation that is accurate to 4 decimal places?
</p>
</li><li> If your <code>cont-frac</code> procedure generates a recursive process, write one
that generates an iterative process.  If it generates an iterative process,
write one that generates a recursive process.

</li></ol>
</blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e38"></a>Exercise 1.38:</strong> In 1737, the Swiss mathematician
Leonhard Euler published a memoir <cite>De Fractionibus Continuis</cite>, which
included a continued fraction expansion for <img src="fig/math/f5a7333426389ca45f94c1de568c155f.svg" class="math-inline" style="height: 0.652em; vertical-align: -0.009em;" alt="\( {e - 2} \)" />, where <img src="fig/math/debcc3e84db401938012afdc2ced88f1.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( e \)" /> is the base
of the natural logarithms.  In this fraction, the <img src="fig/math/303acbd84dbe1f7f07841932b03ce776.svg" class="math-inline" style="height: 0.800em; vertical-align: -0.149em;" alt="\( N_i \)" /> are all 1, and
the <img src="fig/math/83e1229ed935793e9e1d4255ab83cc6c.svg" class="math-inline" style="height: 0.800em; vertical-align: -0.149em;" alt="\( D_i \)" /> are successively 1, 2, 1, 1, 4, 1, 1, 6, 1, 1, 8, ….
Write a program that uses your <code>cont-frac</code> procedure from <a href="#Exercise-1_002e37">Exercise 1.37</a> 
to approximate <img src="fig/math/debcc3e84db401938012afdc2ced88f1.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( e \)" />, based on Euler’s expansion.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e39"></a>Exercise 1.39:</strong> A continued fraction
representation of the tangent function was published in 1770 by the German
mathematician J.H. Lambert:

<img src="fig/math/6f23127a12721d874d61c5de026cddc1.svg" class="math-display" style="height: 2.942em;" alt="\[ % :27:&amp;#10;   {\tan x} \,=\, {\frac{x}{1 - \frac{x^2}{3 - \frac{x^2}{5 - \dots}}}\,,} \]" />

where <img src="fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( x \)" /> is in radians.  Define a procedure <code>(tan-cf x k)</code> that
computes an approximation to the tangent function based on Lambert’s formula.
<code>k</code> specifies the number of terms to compute, as in <a href="#Exercise-1_002e37">Exercise 1.37</a>.
</p></blockquote>

<a id="g_t1_002e3_002e4"></a>
<a id="Procedures-as-Returned-Values"></a>
<h4 class="subsection"><span class="secnum">1.3.4</span><span class="sectitle">Procedures as Returned Values</span></h4>

<p>The above examples demonstrate how the ability to pass procedures as arguments
significantly enhances the expressive power of our programming language.  We
can achieve even more expressive power by creating procedures whose returned
values are themselves procedures.
</p>
<p>We can illustrate this idea by looking again at the fixed-point example
described at the end of <a href="#g_t1_002e3_002e3">1.3.3</a>.  We formulated a new version of
the square-root procedure as a fixed-point search, starting with the
observation that <img src="fig/math/f23ea9ccf69a299490e5f1e45389dbb0.svg" class="math-inline" style="height: 0.993em; vertical-align: -0.168em;" alt="\( \sqrt{x} \)" /> is a fixed-point of the function <img src="fig/math/ddef7e56a0f80929eef40b1233f2c0d6.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.229em;" alt="\( {y \mapsto&amp;#10;x / y} \)" />.  Then we used average damping to make the approximations converge.
Average damping is a useful general technique in itself.  Namely, given a
function <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" />, we consider the function whose value at <img src="fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( x \)" /> is equal to the
average of <img src="fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( x \)" /> and <img src="fig/math/b057a8e52b609c9d7031fbe3992972ef.svg" class="math-inline" style="height: 0.936em; vertical-align: -0.225em;" alt="\( {f(x)} \)" />.
</p>
<p>We can express the idea of average damping by means of the following procedure:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">average-damp f</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">lambda</span><span class="pln"> </span><span class="opn">(</span><span class="pln">x</span><span class="clo">)</span><span class="pln"> 
    </span><span class="opn">(</span><span class="pln">average x </span><span class="opn">(</span><span class="pln">f x</span><span class="clo">))))</span></pre></div>

<p><code>Average-damp</code> is a procedure that takes as its argument a procedure
<code>f</code> and returns as its value a procedure (produced by the <code>lambda</code>)
that, when applied to a number <code>x</code>, produces the average of <code>x</code> and
<code>(f x)</code>.  For example, applying <code>average-damp</code> to the <code>square</code>
procedure produces a procedure whose value at some number <img src="fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( x \)" /> is the average
of <img src="fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( x \)" /> and <img src="fig/math/4067ede5e74e99831d02a03c863d4f61.svg" class="math-inline" style="height: 0.854em; vertical-align: -0.010em;" alt="\( x^2 \)" />.  Applying this resulting procedure to 10 returns the
average of 10 and 100, or 55:<sup><a class="footnote_link" id="DOCF59" href="#FOOT59" epub:type="noteref">59</a></sup>
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">((</span><span class="pln">average-damp square</span><span class="clo">)</span><span class="pln"> </span><span class="lit">10</span><span class="clo">)</span><span class="pln">
</span><i><span class="lit">55</span></i>
</pre></div>

<p>Using <code>average-damp</code>, we can reformulate the square-root procedure as
follows:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">sqrt x</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">fixed-point 
   </span><span class="opn">(</span><span class="pln">average-damp 
    </span><span class="opn">(</span><span class="kwd">lambda</span><span class="pln"> </span><span class="opn">(</span><span class="pln">y</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">/</span><span class="pln"> x y</span><span class="clo">)))</span><span class="pln">
   </span><span class="lit">1.0</span><span class="clo">))</span></pre></div>

<p>Notice how this formulation makes explicit the three ideas in the method:
fixed-point search, average damping, and the function <img src="fig/math/c4888039e8855b22c0b35c8152532a53.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.229em;" alt="\( {y \mapsto x / y} \)" />.
It is instructive to compare this formulation of the square-root method with
the original version given in <a href="1_002e1.xhtml#g_t1_002e1_002e7">1.1.7</a>.  Bear in mind that these
procedures express the same process, and notice how much clearer the idea
becomes when we express the process in terms of these abstractions.  In
general, there are many ways to formulate a process as a procedure.
Experienced programmers know how to choose procedural formulations that are
particularly perspicuous, and where useful elements of the process are exposed
as separate entities that can be reused in other applications.  As a simple
example of reuse, notice that the cube root of <img src="fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( x \)" /> is a fixed point of the
function <img src="fig/math/18bb0b98243514be22ca3fe084b0b07a.svg" class="math-inline" style="height: 1.078em; vertical-align: -0.235em;" alt="\( {y \mapsto x / y^2} \)" />, so we can immediately generalize our
square-root procedure to one that extracts cube roots:<sup><a class="footnote_link" id="DOCF60" href="#FOOT60" epub:type="noteref">60</a></sup>
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">cube-root x</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">fixed-point 
   </span><span class="opn">(</span><span class="pln">average-damp 
    </span><span class="opn">(</span><span class="kwd">lambda</span><span class="pln"> </span><span class="opn">(</span><span class="pln">y</span><span class="clo">)</span><span class="pln"> 
      </span><span class="opn">(</span><span class="pun">/</span><span class="pln"> x </span><span class="opn">(</span><span class="pln">square y</span><span class="clo">))))</span><span class="pln">
   </span><span class="lit">1.0</span><span class="clo">))</span></pre></div>

<a id="Newton_0027s-method"></a>
<h5 class="subsubheading">Newton’s method</h5>

<p>When we first introduced the square-root procedure, in <a href="1_002e1.xhtml#g_t1_002e1_002e7">1.1.7</a>, we
mentioned that this was a special case of <a id="index-Newton_0027s-method"></a>
<em>Newton’s method</em>.  
If <img src="fig/math/b8d7965e16f1c2bfd1e3352f2f7b5441.svg" class="math-inline" style="height: 0.933em; vertical-align: -0.225em;" alt="\( {x \mapsto g(x)} \)" /> is a differentiable function, then a solution of the equation
<img src="fig/math/1bb87b4a000856347a1692e05ca9bf3f.svg" class="math-inline" style="height: 0.933em; vertical-align: -0.225em;" alt="\( {g(x) = 0} \)" /> is a fixed point of the function <img src="fig/math/e989fa4d5f44c42efde2012a986077b1.svg" class="math-inline" style="height: 0.936em; vertical-align: -0.225em;" alt="\( {x \mapsto f(x)} \)" /> where

<img src="fig/math/081fda9357220fdc133ee7405c8ad84d.svg" class="math-display" style="height: 2.308em;" alt="\[ % :28:&amp;#10;   {f(x)} \,=\, x - \frac{g(x)}{D g(x)} \]" />

and <img src="fig/math/9b5f6180b46c2f42142132b6707d8307.svg" class="math-inline" style="height: 0.933em; vertical-align: -0.225em;" alt="\( {Dg(x)} \)" /> is the derivative of <img src="fig/math/658545a813335885e643f33ae78074bc.svg" class="math-inline" style="height: 0.669em; vertical-align: -0.235em;" alt="\( g \)" /> evaluated at <img src="fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( x \)" />.  Newton’s
method is the use of the fixed-point method we saw above to approximate a
solution of the equation by finding a fixed point of the function
<img src="fig/math/24281a3bb1d277b889b72378360aef7a.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( {f} \)" />.<sup><a class="footnote_link" id="DOCF61" href="#FOOT61" epub:type="noteref">61</a></sup>
</p>
<p>For many functions <img src="fig/math/658545a813335885e643f33ae78074bc.svg" class="math-inline" style="height: 0.669em; vertical-align: -0.235em;" alt="\( g \)" /> and for sufficiently good initial guesses for <img src="fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( x \)" />,
Newton’s method converges very rapidly to a solution of <img src="fig/math/1bb87b4a000856347a1692e05ca9bf3f.svg" class="math-inline" style="height: 0.933em; vertical-align: -0.225em;" alt="\( {g(x) = 0} \)" />.<sup><a class="footnote_link" id="DOCF62" href="#FOOT62" epub:type="noteref">62</a></sup>
</p>
<p>In order to implement Newton’s method as a procedure, we must first express the
idea of derivative.  Note that “derivative,” like average damping, is
something that transforms a function into another function.  For instance, the
derivative of the function <img src="fig/math/ac425fd6c307d8ccc07cc03c895b9e7d.svg" class="math-inline" style="height: 0.854em; vertical-align: -0.010em;" alt="\( {x \mapsto x^3} \)" /> is the function <img src="fig/math/ac7ca6931c571d4a707b5ebb95bf9994.svg" class="math-inline" style="height: 0.854em; vertical-align: -0.010em;" alt="\( {x \mapsto 3x^2} \)" />.
In general, if <img src="fig/math/658545a813335885e643f33ae78074bc.svg" class="math-inline" style="height: 0.669em; vertical-align: -0.235em;" alt="\( g \)" /> is a function and <img src="fig/math/a999758b4fd8ccd10d6eda8234629d51.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( {dx} \)" /> is a small number,
then the derivative <img src="fig/math/60f9f23f14887c92a25e763ddb432825.svg" class="math-inline" style="height: 0.876em; vertical-align: -0.227em;" alt="\( {Dg} \)" /> of <img src="fig/math/658545a813335885e643f33ae78074bc.svg" class="math-inline" style="height: 0.669em; vertical-align: -0.235em;" alt="\( g \)" /> is the function whose value at any
number <img src="fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( x \)" /> is given (in the limit of small <img src="fig/math/a999758b4fd8ccd10d6eda8234629d51.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( {dx} \)" />) by

<img src="fig/math/51b1ca2619c2a00fbaffbeaa70e8c8d0.svg" class="math-display" style="height: 2.085em;" alt="\[ % :29:&amp;#10;   Dg(x) \,=\, {\frac{g(x + dx) - g(x)}{dx}.} \]" />

Thus, we can express the idea of derivative (taking <img src="fig/math/a999758b4fd8ccd10d6eda8234629d51.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( {dx} \)" /> to be, say,
0.00001) as the procedure
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">deriv g</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">lambda</span><span class="pln"> </span><span class="opn">(</span><span class="pln">x</span><span class="clo">)</span><span class="pln">
    </span><span class="opn">(</span><span class="pun">/</span><span class="pln"> </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> </span><span class="opn">(</span><span class="pln">g </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> x dx</span><span class="clo">))</span><span class="pln"> </span><span class="opn">(</span><span class="pln">g x</span><span class="clo">))</span><span class="pln">
       dx</span><span class="clo">)))</span></pre></div>

<p>along with the definition
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> dx </span><span class="lit">0.00001</span><span class="clo">)</span></pre></div>

<p>Like <code>average-damp</code>, <code>deriv</code> is a procedure that takes a procedure as
argument and returns a procedure as value.  For example, to approximate the
derivative of <img src="fig/math/ac425fd6c307d8ccc07cc03c895b9e7d.svg" class="math-inline" style="height: 0.854em; vertical-align: -0.010em;" alt="\( {x \mapsto x^3} \)" /> at 5 (whose exact value is 75) we can evaluate
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">cube x</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> x x x</span><span class="clo">))</span><span class="pln">

</span><span class="opn">((</span><span class="pln">deriv cube</span><span class="clo">)</span><span class="pln"> </span><span class="lit">5</span><span class="clo">)</span><span class="pln">
</span><i><span class="lit">75.00014999664018</span></i>
</pre></div>

<p>With the aid of <code>deriv</code>, we can express Newton’s method as a fixed-point
process:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">newton-transform g</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">lambda</span><span class="pln"> </span><span class="opn">(</span><span class="pln">x</span><span class="clo">)</span><span class="pln">
    </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> x </span><span class="opn">(</span><span class="pun">/</span><span class="pln"> </span><span class="opn">(</span><span class="pln">g x</span><span class="clo">)</span><span class="pln"> 
            </span><span class="opn">((</span><span class="pln">deriv g</span><span class="clo">)</span><span class="pln"> x</span><span class="clo">)))))</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">newtons-method g guess</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">fixed-point </span><span class="opn">(</span><span class="pln">newton-transform g</span><span class="clo">)</span><span class="pln"> 
               guess</span><span class="clo">))</span></pre></div>

<p>The <code>newton-transform</code> procedure expresses the formula at the beginning of
this section, and <code>newtons-method</code> is readily defined in terms of this.
It takes as arguments a procedure that computes the function for which we want
to find a zero, together with an initial guess.  For instance, to find the
square root of <img src="fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( x \)" />, we can use Newton’s method to find a zero of the function
<img src="fig/math/9294c125cde969bc121635c17a573a38.svg" class="math-inline" style="height: 1.078em; vertical-align: -0.235em;" alt="\( {y \mapsto y^2 - x} \)" /> starting with an initial guess of 1.<sup><a class="footnote_link" id="DOCF63" href="#FOOT63" epub:type="noteref">63</a></sup>
</p>
<p>This provides yet another form of the square-root procedure:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">sqrt x</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">newtons-method 
   </span><span class="opn">(</span><span class="kwd">lambda</span><span class="pln"> </span><span class="opn">(</span><span class="pln">y</span><span class="clo">)</span><span class="pln"> 
     </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> </span><span class="opn">(</span><span class="pln">square y</span><span class="clo">)</span><span class="pln"> x</span><span class="clo">))</span><span class="pln"> 
   </span><span class="lit">1.0</span><span class="clo">))</span></pre></div>

<a id="Abstractions-and-first_002dclass-procedures"></a>
<h5 class="subsubheading">Abstractions and first-class procedures</h5>

<p>We’ve seen two ways to express the square-root computation as an instance of a
more general method, once as a fixed-point search and once using Newton’s
method.  Since Newton’s method was itself expressed as a fixed-point process,
we actually saw two ways to compute square roots as fixed points.  Each method
begins with a function and finds a fixed point of some transformation of the
function.  We can express this general idea itself as a procedure:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">fixed-point-of-transform 
         g transform guess</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">fixed-point </span><span class="opn">(</span><span class="pln">transform g</span><span class="clo">)</span><span class="pln"> guess</span><span class="clo">))</span></pre></div>

<p>This very general procedure takes as its arguments a procedure <code>g</code> that
computes some function, a procedure that transforms <code>g</code>, and an initial
guess.  The returned result is a fixed point of the transformed function.
</p>
<p>Using this abstraction, we can recast the first square-root computation from
this section (where we look for a fixed point of the average-damped version of
<img src="fig/math/c4888039e8855b22c0b35c8152532a53.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.229em;" alt="\( {y \mapsto x / y} \)" />) as an instance of this general method:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">sqrt x</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">fixed-point-of-transform 
   </span><span class="opn">(</span><span class="kwd">lambda</span><span class="pln"> </span><span class="opn">(</span><span class="pln">y</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">/</span><span class="pln"> x y</span><span class="clo">))</span><span class="pln">
   average-damp
   </span><span class="lit">1.0</span><span class="clo">))</span></pre></div>

<p>Similarly, we can express the second square-root computation from this section
(an instance of Newton’s method that finds a fixed point of the Newton
transform of <img src="fig/math/9294c125cde969bc121635c17a573a38.svg" class="math-inline" style="height: 1.078em; vertical-align: -0.235em;" alt="\( {y \mapsto y^2 - x} \)" />) as
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">sqrt x</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">fixed-point-of-transform 
   </span><span class="opn">(</span><span class="kwd">lambda</span><span class="pln"> </span><span class="opn">(</span><span class="pln">y</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> </span><span class="opn">(</span><span class="pln">square y</span><span class="clo">)</span><span class="pln"> x</span><span class="clo">))</span><span class="pln">
   newton-transform
   </span><span class="lit">1.0</span><span class="clo">))</span></pre></div>

<p>We began section <a href="#g_t1_002e3">1.3</a> with the observation that compound procedures are a
crucial abstraction mechanism, because they permit us to express general
methods of computing as explicit elements in our programming language.  Now
we’ve seen how higher-order procedures permit us to manipulate these general
methods to create further abstractions.
</p>
<p>As programmers, we should be alert to opportunities to identify the underlying
abstractions in our programs and to build upon them and generalize them to
create more powerful abstractions.  This is not to say that one should always
write programs in the most abstract way possible; expert programmers know how
to choose the level of abstraction appropriate to their task.  But it is
important to be able to think in terms of these abstractions, so that we can be
ready to apply them in new contexts.  The significance of higher-order
procedures is that they enable us to represent these abstractions explicitly as
elements in our programming language, so that they can be handled just like
other computational elements.
</p>
<p>In general, programming languages impose restrictions on the ways in which
computational elements can be manipulated.  Elements with the fewest
restrictions are said to have <a id="index-first_002dclass"></a>
<em>first-class</em> status.  Some of the
“rights and privileges” of first-class elements are:<sup><a class="footnote_link" id="DOCF64" href="#FOOT64" epub:type="noteref">64</a></sup>
</p>
<ul>
<li> They may be named by variables.

</li><li> They may be passed as arguments to procedures.

</li><li> They may be returned as the results of procedures.

</li><li> They may be included in data structures.<sup><a class="footnote_link" id="DOCF65" href="#FOOT65" epub:type="noteref">65</a></sup>

</li></ul>

<p>Lisp, unlike other common programming languages, awards procedures full
first-class status.  This poses challenges for efficient implementation, but
the resulting gain in expressive power is enormous.<sup><a class="footnote_link" id="DOCF66" href="#FOOT66" epub:type="noteref">66</a></sup>
</p>
<blockquote>
<p><strong><a id="Exercise-1_002e40"></a>Exercise 1.40:</strong> Define a procedure <code>cubic</code>
that can be used together with the <code>newtons-method</code> procedure in
expressions of the form
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pln">newtons-method </span><span class="opn">(</span><span class="pln">cubic a b c</span><span class="clo">)</span><span class="pln"> </span><span class="lit">1</span><span class="clo">)</span></pre></div>

<p>to approximate zeros of the cubic <img src="fig/math/5405ff8409de874ed7bdd219895b7fb8.svg" class="math-inline" style="height: 0.854em; vertical-align: -0.010em;" alt="\( {x^3 + ax^2 + bx + c} \)" />.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e41"></a>Exercise 1.41:</strong> Define a procedure <code>double</code>
that takes a procedure of one argument as argument and returns a procedure that
applies the original procedure twice.  For example, if <code>inc</code> is a
procedure that adds 1 to its argument, then <code>(double inc)</code> should be a
procedure that adds 2.  What value is returned by
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(((</span><span class="pln">double </span><span class="opn">(</span><span class="pln">double double</span><span class="clo">))</span><span class="pln"> inc</span><span class="clo">)</span><span class="pln"> </span><span class="lit">5</span><span class="clo">)</span></pre></div>
</blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e42"></a>Exercise 1.42:</strong> Let <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" /> and <img src="fig/math/658545a813335885e643f33ae78074bc.svg" class="math-inline" style="height: 0.669em; vertical-align: -0.235em;" alt="\( g \)" /> be two
one-argument functions.  The <a id="index-composition"></a>
<em>composition</em> <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" /> after <img src="fig/math/658545a813335885e643f33ae78074bc.svg" class="math-inline" style="height: 0.669em; vertical-align: -0.235em;" alt="\( g \)" /> is defined
to be the function <img src="fig/math/b5c483e8eb9a537a8287b34a6b721b7f.svg" class="math-inline" style="height: 0.936em; vertical-align: -0.225em;" alt="\( {x \mapsto f(g(x))} \)" />.  Define a procedure
<code>compose</code> that implements composition.  For example, if <code>inc</code> is a
procedure that adds 1 to its argument,
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">((</span><span class="pln">compose square inc</span><span class="clo">)</span><span class="pln"> </span><span class="lit">6</span><span class="clo">)</span><span class="pln">
</span><i><span class="lit">49</span></i>
</pre></div>
</blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e43"></a>Exercise 1.43:</strong> If <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" /> is a numerical function
and <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> is a positive integer, then we can form the <img src="fig/math/3b6c232f796b2d291446b22cb38c933e.svg" class="math-inline" style="height: 0.892em; vertical-align: -0.010em;" alt="\( n^{\text{th}} \)" /> repeated
application of <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" />, which is defined to be the function whose value at <img src="fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( x \)" />
is <img src="fig/math/78f46d84e8e5fbe7fe80f557cb5187f9.svg" class="math-inline" style="height: 0.936em; vertical-align: -0.225em;" alt="\( {f(f(\dots (f(x))\dots ))} \)" />.  For example, if <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" /> is the
function <img src="fig/math/57f08d79273b5db0de0b7073040df346.svg" class="math-inline" style="height: 0.652em; vertical-align: -0.009em;" alt="\( {x \mapsto x + 1} \)" />, then the <img src="fig/math/3b6c232f796b2d291446b22cb38c933e.svg" class="math-inline" style="height: 0.892em; vertical-align: -0.010em;" alt="\( n^{\text{th}} \)" /> repeated application of <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" /> is
the function <img src="fig/math/9a7d70be73671b51681b2db17377e06a.svg" class="math-inline" style="height: 0.515em; vertical-align: -0.006em;" alt="\( {x \mapsto x + n} \)" />.  If <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" /> is the operation of squaring a
number, then the <img src="fig/math/3b6c232f796b2d291446b22cb38c933e.svg" class="math-inline" style="height: 0.892em; vertical-align: -0.010em;" alt="\( n^{\text{th}} \)" /> repeated application of <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" /> is the function that
raises its argument to the <img src="fig/math/8eaeda4e327def8a55a0cf6d7d716fa1.svg" class="math-inline" style="height: 0.692em;" alt="\( {2^n\text{-th}} \)" /> power.  Write a procedure that takes as
inputs a procedure that computes <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" /> and a positive integer <img src="fig/math/0932467390da34555ec70c122d7e915e.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( n \)" /> and returns
the procedure that computes the <img src="fig/math/3b6c232f796b2d291446b22cb38c933e.svg" class="math-inline" style="height: 0.892em; vertical-align: -0.010em;" alt="\( n^{\text{th}} \)" /> repeated application of <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" />.  Your
procedure should be able to be used as follows:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">((</span><span class="pln">repeated square </span><span class="lit">2</span><span class="clo">)</span><span class="pln"> </span><span class="lit">5</span><span class="clo">)</span><span class="pln">
</span><i><span class="lit">625</span></i>
</pre></div>

<p>Hint: You may find it convenient to use <code>compose</code> from <a href="#Exercise-1_002e42">Exercise 1.42</a>.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e44"></a>Exercise 1.44:</strong> The idea of <a id="index-smoothing"></a>
<em>smoothing</em> a
function is an important concept in signal processing.  If <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" /> is a function
and <img src="fig/math/a999758b4fd8ccd10d6eda8234629d51.svg" class="math-inline" style="height: 0.703em; vertical-align: -0.009em;" alt="\( {dx} \)" /> is some small number, then the smoothed version of <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" /> is the
function whose value at a point <img src="fig/math/2f4b15565d0a1018e90c3e1b30b76acc.svg" class="math-inline" style="height: 0.444em; vertical-align: -0.008em;" alt="\( x \)" /> is the average of <img src="fig/math/d9e5595beefdff468eeafe7717bf4891.svg" class="math-inline" style="height: 0.936em; vertical-align: -0.225em;" alt="\( {f(x - dx)} \)" />, 
<img src="fig/math/b057a8e52b609c9d7031fbe3992972ef.svg" class="math-inline" style="height: 0.936em; vertical-align: -0.225em;" alt="\( {f(x)} \)" />, and <img src="fig/math/c1a6758b4b5770cca95dc3b49310f975.svg" class="math-inline" style="height: 0.936em; vertical-align: -0.225em;" alt="\( {f(x + dx)} \)" />.  Write a procedure
<code>smooth</code> that takes as input a procedure that computes <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" /> and returns a
procedure that computes the smoothed <img src="fig/math/7a8d165d31a04fc319968e0213091ff8.svg" class="math-inline" style="height: 0.929em; vertical-align: -0.234em;" alt="\( f \)" />.  It is sometimes valuable to
repeatedly smooth a function (that is, smooth the smoothed function, and so on)
to obtain the <a id="index-n_002dfold-smoothed-function"></a>
<em><i>n</i>-fold smoothed function</em>.  Show how to generate
the <i>n</i>-fold smoothed function of any given function using <code>smooth</code> and
<code>repeated</code> from <a href="#Exercise-1_002e43">Exercise 1.43</a>.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e45"></a>Exercise 1.45:</strong> We saw in <a href="#g_t1_002e3_002e3">1.3.3</a>
that attempting to compute square roots by naively finding a fixed point of
<img src="fig/math/c4888039e8855b22c0b35c8152532a53.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.229em;" alt="\( {y \mapsto x / y} \)" /> does not converge, and that this can be fixed by average
damping.  The same method works for finding cube roots as fixed points of the
average-damped <img src="fig/math/18bb0b98243514be22ca3fe084b0b07a.svg" class="math-inline" style="height: 1.078em; vertical-align: -0.235em;" alt="\( {y \mapsto x / y^2} \)" />.  Unfortunately, the process does not
work for fourth roots—a single average damp is not enough to make a
fixed-point search for <img src="fig/math/ee3c68d0350ab75033b5737a37031060.svg" class="math-inline" style="height: 1.078em; vertical-align: -0.235em;" alt="\( {y \mapsto x / y^3} \)" /> converge.  On the other hand, if
we average damp twice (i.e., use the average damp of the average damp of 
<img src="fig/math/ee3c68d0350ab75033b5737a37031060.svg" class="math-inline" style="height: 1.078em; vertical-align: -0.235em;" alt="\( {y \mapsto x / y^3} \)" />) the fixed-point search does converge.  Do some experiments
to determine how many average damps are required to compute <img src="fig/math/3b6c232f796b2d291446b22cb38c933e.svg" class="math-inline" style="height: 0.892em; vertical-align: -0.010em;" alt="\( n^{\text{th}} \)" /> roots as a
fixed-point search based upon repeated average damping of <img src="fig/math/688ae2de37fbe7a18cfc0edcc889f8dc.svg" class="math-inline" style="height: 1.078em; vertical-align: -0.235em;" alt="\( {y \mapsto x / y^{\kern0.1em n-1}} \)" />.  
Use this to implement a simple procedure for computing
<img src="fig/math/3b6c232f796b2d291446b22cb38c933e.svg" class="math-inline" style="height: 0.892em; vertical-align: -0.010em;" alt="\( n^{\text{th}} \)" /> roots using <code>fixed-point</code>, <code>average-damp</code>, and the
<code>repeated</code> procedure of <a href="#Exercise-1_002e43">Exercise 1.43</a>.  Assume that any arithmetic
operations you need are available as primitives.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e46"></a>Exercise 1.46:</strong> Several of the numerical methods
described in this chapter are instances of an extremely general computational
strategy known as <a id="index-iterative-improvement"></a>
<em>iterative improvement</em>.  Iterative improvement says
that, to compute something, we start with an initial guess for the answer, test
if the guess is good enough, and otherwise improve the guess and continue the
process using the improved guess as the new guess.  Write a procedure
<code>iterative-improve</code> that takes two procedures as arguments: a method for
telling whether a guess is good enough and a method for improving a guess.
<code>Iterative-improve</code> should return as its value a procedure that takes a
guess as argument and keeps improving the guess until it is good enough.
Rewrite the <code>sqrt</code> procedure of <a href="1_002e1.xhtml#g_t1_002e1_002e7">1.1.7</a> and the
<code>fixed-point</code> procedure of <a href="#g_t1_002e3_002e3">1.3.3</a> in terms of
<code>iterative-improve</code>.
</p></blockquote>

<div class="footnote">
<h4 class="footnotes-heading">Footnotes</h4>

<div><p id="FOOT49" epub:type="footnote"><a class="footnote_backlink" href="#DOCF49"><sup>49</sup></a>
This series, usually written in the equivalent form  <img src="fig/math/8fb226294dc22a2a6271b433e09a1435.svg" class="math-inline" style="height: 1.221em; vertical-align: -0.343em;" alt="\( {\pi\over4} = {1 - {1\over3} + {1\over5}} - {{1\over7} + \dots} \)" />,  is due to Leibniz.  We’ll see how to use this as the basis for some fancy numerical tricks in <a href="3_002e5.xhtml#g_t3_002e5_002e3">3.5.3</a>.</p>
</div>
<div><p id="FOOT50" epub:type="footnote"><a class="footnote_backlink" href="#DOCF50"><sup>50</sup></a>
Notice that we have used block structure (<a href="1_002e1.xhtml#g_t1_002e1_002e8">1.1.8</a>) to embed the definitions of <code>pi-next</code> and <code>pi-term</code> within <code>pi-sum</code>, since these procedures are unlikely to be useful for any other purpose.  We will see how to get rid of them altogether in <a href="#g_t1_002e3_002e2">1.3.2</a>.</p>
</div>
<div><p id="FOOT51" epub:type="footnote"><a class="footnote_backlink" href="#DOCF51"><sup>51</sup></a>
The intent of <a href="#Exercise-1_002e31">Exercise 1.31</a> through <a href="#Exercise-1_002e33">Exercise 1.33</a> is to demonstrate the expressive power that is attained by using an appropriate abstraction to consolidate many seemingly disparate operations.  However, though accumulation and filtering are elegant ideas, our hands are somewhat tied in using them at this point since we do not yet have data structures to provide suitable means of combination for these abstractions.  We will return to these ideas in <a href="2_002e2.xhtml#g_t2_002e2_002e3">2.2.3</a> when we show how to use <a id="index-sequences"></a> <em>sequences</em> as interfaces for combining filters and accumulators to build even more powerful abstractions.  We will see there how these methods really come into their own as a powerful and elegant approach to designing programs.</p>
</div>
<div><p id="FOOT52" epub:type="footnote"><a class="footnote_backlink" href="#DOCF52"><sup>52</sup></a>
This formula was discovered by the seventeenth-century English mathematician John Wallis.</p>
</div>
<div><p id="FOOT53" epub:type="footnote"><a class="footnote_backlink" href="#DOCF53"><sup>53</sup></a>
It would be clearer and less intimidating to people learning Lisp if a name more obvious than <code>lambda</code>, such as <code>make-procedure</code>, were used.  But the convention is firmly entrenched.  The notation is adopted from the λ-calculus, a mathematical formalism introduced by the mathematical logician Alonzo <a href="References.xhtml#Church-_00281941_0029">Church (1941)</a>.  Church developed the  λ-calculus to provide a rigorous foundation for studying the  notions of function and function application.  The λ-calculus has become a basic tool for mathematical investigations of the semantics of programming languages.</p>
</div>
<div><p id="FOOT54" epub:type="footnote"><a class="footnote_backlink" href="#DOCF54"><sup>54</sup></a>
Understanding internal definitions well enough to be sure a program means what we intend it to mean requires a more elaborate model of the evaluation process than we have presented in this chapter.  The subtleties do not arise with internal definitions of procedures, however.  We will return to this issue in  <a href="4_002e1.xhtml#g_t4_002e1_002e6">4.1.6</a>, after we learn more about evaluation.</p>
</div>
<div><p id="FOOT55" epub:type="footnote"><a class="footnote_backlink" href="#DOCF55"><sup>55</sup></a>
We have used 0.001 as a representative “small” number to indicate a tolerance for the acceptable error in a calculation.  The appropriate tolerance for a real calculation depends upon the problem to be solved and the limitations of the computer and the algorithm.  This is often a very subtle consideration, requiring help from a numerical analyst or some other kind of magician.</p>
</div>
<div><p id="FOOT56" epub:type="footnote"><a class="footnote_backlink" href="#DOCF56"><sup>56</sup></a>
This can be accomplished using <code>error</code>, which takes as arguments a number of items that are printed as error messages.</p>
</div>
<div><p id="FOOT57" epub:type="footnote"><a class="footnote_backlink" href="#DOCF57"><sup>57</sup></a>
Try this during a boring lecture: Set your calculator to radians mode and then repeatedly press the <code>cos</code> button until you obtain the fixed point.</p>
</div>
<div><p id="FOOT58" epub:type="footnote"><a class="footnote_backlink" href="#DOCF58"><sup>58</sup></a>
<img src="fig/math/0ce91553aad27651969cc77ddd0cb826.svg" class="math-inline" style="height: 0.467em;" alt="\( \mapsto \)" /> (pronounced “maps to”) is the mathematician’s way of writing <code>lambda</code>.  <img src="fig/math/c4888039e8855b22c0b35c8152532a53.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.229em;" alt="\( {y \mapsto x / y} \)" /> means <code>(lambda (y) (/ x y))</code>, that is, the function whose value at <img src="fig/math/05e4cdb2f26a4f66b68c167423907fea.svg" class="math-inline" style="height: 0.669em; vertical-align: -0.235em;" alt="\( y \)" /> is <img src="fig/math/c243e54e1f37c985a92584d386f5fc01.svg" class="math-inline" style="height: 0.901em; vertical-align: -0.229em;" alt="\( {x / y} \)" />.</p>
</div>
<div><p id="FOOT59" epub:type="footnote"><a class="footnote_backlink" href="#DOCF59"><sup>59</sup></a>
Observe that this is a combination whose operator is itself a combination.  <a href="1_002e1.xhtml#Exercise-1_002e4">Exercise 1.4</a> already demonstrated the ability to form such combinations, but that was only a toy example.  Here we begin to see the real need for such combinations—when applying a procedure that is obtained as the value returned by a higher-order procedure.</p>
</div>
<div><p id="FOOT60" epub:type="footnote"><a class="footnote_backlink" href="#DOCF60"><sup>60</sup></a>
See <a href="#Exercise-1_002e45">Exercise 1.45</a> for a further generalization.</p>
</div>
<div><p id="FOOT61" epub:type="footnote"><a class="footnote_backlink" href="#DOCF61"><sup>61</sup></a>
Elementary calculus books usually describe Newton’s method in terms of the sequence of approximations <img src="fig/math/96cbc64b5b9346071e74621f47f63af6.svg" class="math-inline" style="height: 0.933em; vertical-align: -0.225em;" alt="\( x_{n+1} = x_n - {g(x_n)\,/ Dg(x_n)} \)" />.  Having language for talking about processes and using the idea of fixed points  simplifies the description of the method.</p>
</div>
<div><p id="FOOT62" epub:type="footnote"><a class="footnote_backlink" href="#DOCF62"><sup>62</sup></a>
Newton’s method does not always converge to an answer, but it can be shown that in favorable cases each iteration doubles the number-of-digits accuracy of the approximation to the solution.  In such cases, Newton’s method will converge much more rapidly than the half-interval method.</p>
</div>
<div><p id="FOOT63" epub:type="footnote"><a class="footnote_backlink" href="#DOCF63"><sup>63</sup></a>
For finding square roots, Newton’s method converges rapidly to the correct solution from any starting point.</p>
</div>
<div><p id="FOOT64" epub:type="footnote"><a class="footnote_backlink" href="#DOCF64"><sup>64</sup></a>
The notion of first-class status of programming-language elements is due to the British computer scientist Christopher Strachey (1916-1975).</p>
</div>
<div><p id="FOOT65" epub:type="footnote"><a class="footnote_backlink" href="#DOCF65"><sup>65</sup></a>
We’ll see examples of this after we introduce data structures in <a href="Chapter-2.xhtml#Chapter-2">Chapter 2<!-- /@w --></a>.</p>
</div>
<div><p id="FOOT66" epub:type="footnote"><a class="footnote_backlink" href="#DOCF66"><sup>66</sup></a>
The major implementation cost of first-class procedures is that allowing procedures to be returned as values requires reserving storage for a procedure’s free variables even while the procedure is not executing.  In the Scheme implementation we will study in <a href="4_002e1.xhtml#g_t4_002e1">4.1</a>, these variables are stored in the procedure’s environment.</p>
</div>
</div>
<nav class="header">
<p>
Next: <a href="Chapter-2.xhtml#Chapter-2" accesskey="n" rel="next">Chapter 2</a>, Prev: <a href="1_002e2.xhtml#g_t1_002e2" accesskey="p" rel="prev">1.2</a>, Up: <a href="#g_t1_002e3" accesskey="u" rel="prev">1.3</a>   [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>]</p>
</nav>


</section><span class="bottom jump" title="Jump to bottom"><a href="#pagebottom" accesskey="b">⇣</a></span><a id="pagebottom"></a>
</body>
</html>
